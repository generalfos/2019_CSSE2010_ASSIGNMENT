
JoelFosterCSSE2010Project2019.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00003142  000031f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003142  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000359  0080018e  0080018e  00003284  2**0
                  ALLOC
  3 .eeprom       00000115  00810000  00810000  00003284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00003399  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033f8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004b8  00000000  00000000  00003438  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004c0b  00000000  00000000  000038f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015a2  00000000  00000000  000084fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000028fb  00000000  00000000  00009a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b28  00000000  00000000  0000c398  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000013c7  00000000  00000000  0000cec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000321a  00000000  00000000  0000e287  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000478  00000000  00000000  000114a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__ctors_end>
       4:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
       8:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
       c:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      10:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      14:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_5>
      18:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      1c:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      20:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      24:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      28:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      2c:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      30:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      34:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      38:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      3c:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      40:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <__vector_16>
      44:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      48:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      4c:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      50:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_20>
      54:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__vector_21>
      58:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      5c:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      60:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      64:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      68:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      6c:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      70:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      74:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      78:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__bad_interrupt>
      7c:	b3 06       	cpc	r11, r19
      7e:	c2 06       	cpc	r12, r18
      80:	c2 06       	cpc	r12, r18
      82:	c2 06       	cpc	r12, r18
      84:	c2 06       	cpc	r12, r18
      86:	c2 06       	cpc	r12, r18
      88:	c2 06       	cpc	r12, r18
      8a:	c2 06       	cpc	r12, r18
      8c:	c2 06       	cpc	r12, r18
      8e:	c2 06       	cpc	r12, r18
      90:	c2 06       	cpc	r12, r18
      92:	a8 06       	cpc	r10, r24
      94:	c2 06       	cpc	r12, r18
      96:	30 06       	cpc	r3, r16
      98:	bd 06       	cpc	r11, r29
      9a:	c2 06       	cpc	r12, r18
      9c:	c2 06       	cpc	r12, r18
      9e:	c2 06       	cpc	r12, r18
      a0:	c2 06       	cpc	r12, r18
      a2:	c2 06       	cpc	r12, r18
      a4:	c2 06       	cpc	r12, r18
      a6:	c2 06       	cpc	r12, r18
      a8:	c2 06       	cpc	r12, r18
      aa:	51 06       	cpc	r5, r17
      ac:	c2 06       	cpc	r12, r18
      ae:	c2 06       	cpc	r12, r18
      b0:	c2 06       	cpc	r12, r18
      b2:	c2 06       	cpc	r12, r18
      b4:	81 06       	cpc	r8, r17
      b6:	c2 06       	cpc	r12, r18
      b8:	74 06       	cpc	r7, r20
      ba:	c2 06       	cpc	r12, r18
      bc:	c2 06       	cpc	r12, r18
      be:	c2 06       	cpc	r12, r18
      c0:	c2 06       	cpc	r12, r18
      c2:	c2 06       	cpc	r12, r18
      c4:	c2 06       	cpc	r12, r18
      c6:	c2 06       	cpc	r12, r18
      c8:	46 06       	cpc	r4, r22
      ca:	c2 06       	cpc	r12, r18
      cc:	c2 06       	cpc	r12, r18
      ce:	c2 06       	cpc	r12, r18
      d0:	67 06       	cpc	r6, r23
      d2:	c2 06       	cpc	r12, r18
      d4:	5c 06       	cpc	r5, r28
      d6:	c2 06       	cpc	r12, r18
      d8:	c2 06       	cpc	r12, r18
      da:	c2 06       	cpc	r12, r18
      dc:	b8 06       	cpc	r11, r24
      de:	c2 06       	cpc	r12, r18
      e0:	c2 06       	cpc	r12, r18
      e2:	c2 06       	cpc	r12, r18
      e4:	c2 06       	cpc	r12, r18
      e6:	c2 06       	cpc	r12, r18
      e8:	c2 06       	cpc	r12, r18
      ea:	c2 06       	cpc	r12, r18
      ec:	c2 06       	cpc	r12, r18
      ee:	c2 06       	cpc	r12, r18
      f0:	c2 06       	cpc	r12, r18
      f2:	c2 06       	cpc	r12, r18
      f4:	c2 06       	cpc	r12, r18
      f6:	c2 06       	cpc	r12, r18
      f8:	8e 06       	cpc	r8, r30
      fa:	c2 06       	cpc	r12, r18
      fc:	c2 06       	cpc	r12, r18
      fe:	c2 06       	cpc	r12, r18
     100:	c2 06       	cpc	r12, r18
     102:	c2 06       	cpc	r12, r18
     104:	c2 06       	cpc	r12, r18
     106:	c2 06       	cpc	r12, r18
     108:	c2 06       	cpc	r12, r18
     10a:	c2 06       	cpc	r12, r18
     10c:	c2 06       	cpc	r12, r18
     10e:	c2 06       	cpc	r12, r18
     110:	c2 06       	cpc	r12, r18
     112:	c2 06       	cpc	r12, r18
     114:	c2 06       	cpc	r12, r18
     116:	c2 06       	cpc	r12, r18
     118:	c2 06       	cpc	r12, r18
     11a:	c2 06       	cpc	r12, r18
     11c:	c2 06       	cpc	r12, r18
     11e:	c2 06       	cpc	r12, r18
     120:	c2 06       	cpc	r12, r18
     122:	c2 06       	cpc	r12, r18
     124:	c2 06       	cpc	r12, r18
     126:	c2 06       	cpc	r12, r18
     128:	9b 06       	cpc	r9, r27
     12a:	c2 06       	cpc	r12, r18
     12c:	c2 06       	cpc	r12, r18
     12e:	c2 06       	cpc	r12, r18
     130:	c2 06       	cpc	r12, r18
     132:	c2 06       	cpc	r12, r18
     134:	3b 06       	cpc	r3, r27

00000136 <__trampolines_end>:
     136:	4e 75       	andi	r20, 0x5E	; 94
     138:	6d 62       	ori	r22, 0x2D	; 45
     13a:	65 72       	andi	r22, 0x25	; 37
     13c:	20 6f       	ori	r18, 0xF0	; 240
     13e:	66 20       	and	r6, r6
     140:	50 61       	ori	r21, 0x10	; 16
     142:	63 64       	ori	r22, 0x43	; 67
     144:	6f 74       	andi	r22, 0x4F	; 79
     146:	73 20       	and	r7, r3
     148:	3a 20       	and	r3, r10
     14a:	25 64       	ori	r18, 0x45	; 69
	...

0000014d <__c.2302>:
     14d:	53 63 6f 72 65 20 2f 6e 20 25 64 20 2f 6e 20 48     Score /n %d /n H
     15d:	69 67 68 20 53 63 6f 72 65 20 2f 6e 20 25 64 00     igh Score /n %d.

0000016d <init_game_field>:
     16d:	46 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 76 2d     F-------------v-
     17d:	76 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 37 7c     v-------------7|
     18d:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 7c 20 7c     .............| |
     19d:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 7c 7c 2e     .............||.
     1ad:	46 2d 2d 2d 37 2e 46 2d 2d 2d 37 2e 7c 20 7c 2e     F---7.F---7.| |.
     1bd:	46 2d 2d 2d 37 2e 46 2d 2d 2d 37 2e 7c 7c 2e 7c     F---7.F---7.||.|
     1cd:	20 20 20 7c 2e 4c 2d 2d 2d 4a 2e 4c 2d 4a 2e 4c        |.L---J.L-J.L
     1dd:	2d 2d 2d 4a 2e 7c 20 20 20 7c 2e 7c 7c 2e 7c 20     ---J.|   |.||.| 
     1ed:	20 20 7c 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e       |.............
     1fd:	2e 2e 2e 2e 7c 20 20 20 7c 2e 7c 7c 2e 7c 20 20     ....|   |.||.|  
     20d:	20 7c 2e 46 2d 2d 2d 37 2e 46 2d 37 2e 46 2d 2d      |.F---7.F-7.F--
     21d:	2d 37 2e 7c 20 20 20 7c 2e 7c 7c 50 4c 2d 2d 2d     -7.|   |.||PL---
     22d:	4a 2e 4c 2d 2d 2d 4a 2e 4c 2d 4a 2e 4c 2d 2d 2d     J.L---J.L-J.L---
     23d:	4a 2e 4c 2d 2d 2d 4a 50 7c 7c 2e 2e 2e 2e 2e 2e     J.L---JP||......
     24d:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     25d:	2e 2e 2e 2e 2e 2e 2e 7c 7c 2e 46 2d 2d 2d 37 2e     .......||.F---7.
     26d:	46 37 2e 46 2d 2d 2d 2d 2d 2d 2d 37 2e 46 37 2e     F7.F-------7.F7.
     27d:	46 2d 2d 2d 37 2e 7c 7c 2e 4c 2d 2d 2d 4a 2e 7c     F---7.||.L---J.|
     28d:	7c 2e 4c 2d 2d 37 20 46 2d 2d 4a 2e 7c 7c 2e 4c     |.L--7 F--J.||.L
     29d:	2d 2d 2d 4a 2e 7c 7c 2e 2e 2e 2e 2e 2e 2e 7c 7c     ---J.||.......||
     2ad:	2e 2e 2e 2e 7c 20 7c 2e 2e 2e 2e 7c 7c 2e 2e 2e     ....| |....||...
     2bd:	2e 2e 2e 2e 7c 4c 2d 2d 2d 2d 2d 37 2e 7c 4c 2d     ....|L-----7.|L-
     2cd:	2d 37 20 7c 20 7c 20 46 2d 2d 4a 7c 2e 46 2d 2d     -7 | | F--J|.F--
     2dd:	2d 2d 2d 4a 20 20 20 20 20 20 7c 2e 7c 46 2d 2d     ---J      |.|F--
     2ed:	4a 20 4c 2d 4a 20 4c 2d 2d 37 7c 2e 7c 20 20 20     J L-J L--7|.|   
     2fd:	20 20 20 20 20 20 20 20 20 7c 2e 7c 7c 20 20 20              |.||   
     30d:	20 20 20 20 20 20 20 20 7c 7c 2e 7c 20 20 20 20             ||.|    
     31d:	20 20 2d 2d 2d 2d 2d 2d 4a 2e 4c 4a 20 46 2d 2d       ------J.LJ F--
     32d:	20 20 20 2d 2d 37 20 4c 4a 2e 4c 2d 2d 2d 2d 2d        --7 LJ.L-----
     33d:	2d 20 20 20 20 20 20 20 2e 20 20 20 7c 20 20 20     -       .   |   
     34d:	20 20 20 20 7c 20 20 20 2e 20 20 20 20 20 20 20         |   .       
     35d:	2d 2d 2d 2d 2d 2d 37 2e 46 37 20 4c 2d 2d 2d 2d     ------7.F7 L----
     36d:	2d 2d 2d 4a 20 46 37 2e 46 2d 2d 2d 2d 2d 2d 20     ---J F7.F------ 
     37d:	20 20 20 20 20 7c 2e 7c 7c 20 20 20 20 20 20 20          |.||       
     38d:	20 20 20 20 7c 7c 2e 7c 20 20 20 20 20 20 20 20         ||.|        
     39d:	20 20 20 20 7c 2e 7c 7c 20 46 2d 2d 2d 2d 2d 2d         |.|| F------
     3ad:	2d 37 20 7c 7c 2e 7c 20 20 20 20 20 20 46 2d 2d     -7 ||.|      F--
     3bd:	2d 2d 2d 4a 2e 4c 4a 20 4c 2d 2d 37 20 46 2d 2d     ---J.LJ L--7 F--
     3cd:	4a 20 4c 4a 2e 4c 2d 2d 2d 2d 2d 37 7c 2e 2e 2e     J LJ.L-----7|...
     3dd:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 7c 20 7c 2e 2e 2e     ..........| |...
     3ed:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 7c 7c 2e 46 2d 2d     ..........||.F--
     3fd:	2d 37 2e 46 2d 2d 2d 37 2e 7c 20 7c 2e 46 2d 2d     -7.F---7.| |.F--
     40d:	2d 37 2e 46 2d 2d 2d 37 2e 7c 7c 2e 4c 2d 37 20     -7.F---7.||.L-7 
     41d:	7c 2e 4c 2d 2d 2d 4a 2e 4c 2d 4a 2e 4c 2d 2d 2d     |.L---J.L-J.L---
     42d:	4a 2e 7c 20 46 2d 4a 2e 7c 7c 50 2e 2e 7c 20 7c     J.| F-J.||P..| |
     43d:	2e 2e 2e 2e 2e 2e 2e 2e 20 2e 2e 2e 2e 2e 2e 2e     ........ .......
     44d:	2e 7c 20 7c 2e 2e 50 7c 3e 2d 37 2e 7c 20 7c 2e     .| |..P|>-7.| |.
     45d:	46 37 2e 46 2d 2d 2d 2d 2d 2d 2d 37 2e 46 37 2e     F7.F-------7.F7.
     46d:	7c 20 7c 2e 46 2d 3c 3e 2d 4a 2e 4c 2d 4a 2e 7c     | |.F-<>-J.L-J.|
     47d:	7c 2e 4c 2d 2d 37 20 46 2d 2d 4a 2e 7c 7c 2e 4c     |.L--7 F--J.||.L
     48d:	2d 4a 2e 4c 2d 3c 7c 2e 2e 2e 2e 2e 2e 2e 7c 7c     -J.L-<|.......||
     49d:	2e 2e 2e 2e 7c 20 7c 2e 2e 2e 2e 7c 7c 2e 2e 2e     ....| |....||...
     4ad:	2e 2e 2e 2e 7c 7c 2e 46 2d 2d 2d 2d 2d 4a 4c 2d     ....||.F-----JL-
     4bd:	2d 37 2e 7c 20 7c 2e 46 2d 2d 4a 4c 2d 2d 2d 2d     -7.| |.F--JL----
     4cd:	2d 37 2e 7c 7c 2e 4c 2d 2d 2d 2d 2d 2d 2d 2d 2d     -7.||.L---------
     4dd:	4a 2e 4c 2d 4a 2e 4c 2d 2d 2d 2d 2d 2d 2d 2d 2d     J.L-J.L---------
     4ed:	4a 2e 7c 7c 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     J.||............
     4fd:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     50d:	2e 7c 4c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .|L-------------
     51d:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     52d:	4a 00                                               J.

0000052f <__c.2601>:
     52f:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
     53f:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

0000054d <__c.2599>:
     54d:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000557 <__c.2591>:
     557:	50 75 73 68 20 61 20 62 75 74 74 6f 6e 20 6f 72     Push a button or
     567:	20 6b 65 79 20 74 6f 20 63 6f 6e 74 69 6e 75 65      key to continue
	...

00000578 <__c.2589>:
     578:	4c 65 76 65 6c 20 63 6f 6d 70 6c 65 74 65 00        Level complete.

00000587 <__c.2522>:
     587:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
     597:	6f 6a 65 63 74 20 62 79 20 4a 6f 65 6c 20 46 6f     oject by Joel Fo
     5a7:	73 74 65 72 20 2d 20 34 35 38 32 30 33 38 34 00     ster - 45820384.

000005b7 <__c.2520>:
     5b7:	50 61 63 2d 4d 61 6e 00                             Pac-Man.

000005bf <numbers>:
     5bf:	2a 06 27 06 23 06 1f 06 1b 06 17 06 13 06 0f 06     *.'.#...........
     5cf:	0b 06 07 06                                         ....

000005d3 <letters>:
     5d3:	99 06 95 06 91 06 8d 06 89 06 85 06 81 06 7d 06     ..............}.
     5e3:	7a 06 76 06 72 06 6e 06 69 06 65 06 61 06 5d 06     z.v.r.n.i.e.a.].
     5f3:	58 06 54 06 50 06 4b 06 47 06 42 06 3d 06 38 06     X.T.P.K.G.B.=.8.
     603:	33 06 2e 06                                         3...

00000607 <cols_9>:
     607:	64 92 92 7d                                         d..}

0000060b <cols_8>:
     60b:	6c 92 92 6d                                         l..m

0000060f <cols_7>:
     60f:	80 9e a0 c1                                         ....

00000613 <cols_6>:
     613:	7c 92 92 4d                                         |..M

00000617 <cols_5>:
     617:	e4 a2 a2 9d                                         ....

0000061b <cols_4>:
     61b:	18 28 48 ff                                         .(H.

0000061f <cols_3>:
     61f:	44 92 92 6d                                         D..m

00000623 <cols_2>:
     623:	46 8a 92 63                                         F..c

00000627 <cols_1>:
     627:	42 fe 03                                            B..

0000062a <cols_0>:
     62a:	7c 92 a2 7d                                         |..}

0000062e <cols_Z>:
     62e:	86 8a 92 a2 c3                                      .....

00000633 <cols_Y>:
     633:	e0 10 0e 10 e1                                      .....

00000638 <cols_X>:
     638:	c6 28 10 28 c7                                      .(.(.

0000063d <cols_W>:
     63d:	fc 02 1c 02 fd                                      .....

00000642 <cols_V>:
     642:	f8 04 02 04 f9                                      .....

00000647 <cols_U>:
     647:	fc 02 02 fd                                         ....

0000064b <cols_T>:
     64b:	80 80 fe 80 81                                      .....

00000650 <cols_S>:
     650:	64 92 92 4d                                         d..M

00000654 <cols_R>:
     654:	fe 90 98 67                                         ...g

00000658 <cols_Q>:
     658:	7c 82 8a 7c 03                                      |..|.

0000065d <cols_P>:
     65d:	fe 90 90 61                                         ...a

00000661 <cols_O>:
     661:	7c 82 82 7d                                         |..}

00000665 <cols_N>:
     665:	fe 20 10 ff                                         . ..

00000669 <cols_M>:
     669:	fe 40 30 40 ff                                      .@0@.

0000066e <cols_L>:
     66e:	fe 02 02 03                                         ....

00000672 <cols_K>:
     672:	fe 10 28 c7                                         ..(.

00000676 <cols_J>:
     676:	04 02 02 fd                                         ....

0000067a <cols_I>:
     67a:	82 fe 83                                            ...

0000067d <cols_H>:
     67d:	fe 10 10 ff                                         ....

00000681 <cols_G>:
     681:	7c 82 92 5d                                         |..]

00000685 <cols_F>:
     685:	fe 90 90 81                                         ....

00000689 <cols_E>:
     689:	fe 92 92 83                                         ....

0000068d <cols_D>:
     68d:	fe 82 82 7d                                         ...}

00000691 <cols_C>:
     691:	7c 82 82 45                                         |..E

00000695 <cols_B>:
     695:	fe 92 92 6d                                         ...m

00000699 <cols_A>:
     699:	7e 90 90 7f                                         ~...

0000069d <__c.2082>:
     69d:	1b 5b 3f 32 35 6c 00                                .[?25l.

000006a4 <__c.2078>:
     6a4:	1b 5b 25 64 6d 00                                   .[%dm.

000006aa <__c.2068>:
     6aa:	1b 5b 32 4a 00                                      .[2J.

000006af <__c.2058>:
     6af:	1b 5b 30 6d 00                                      .[0m.

000006b4 <__c.2033>:
     6b4:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

000006be <__ctors_end>:
     6be:	11 24       	eor	r1, r1
     6c0:	1f be       	out	0x3f, r1	; 63
     6c2:	cf ef       	ldi	r28, 0xFF	; 255
     6c4:	d8 e0       	ldi	r29, 0x08	; 8
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	cd bf       	out	0x3d, r28	; 61

000006ca <__do_copy_data>:
     6ca:	11 e0       	ldi	r17, 0x01	; 1
     6cc:	a0 e0       	ldi	r26, 0x00	; 0
     6ce:	b1 e0       	ldi	r27, 0x01	; 1
     6d0:	e2 e4       	ldi	r30, 0x42	; 66
     6d2:	f1 e3       	ldi	r31, 0x31	; 49
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <__do_copy_data+0x10>
     6d6:	05 90       	lpm	r0, Z+
     6d8:	0d 92       	st	X+, r0
     6da:	ae 38       	cpi	r26, 0x8E	; 142
     6dc:	b1 07       	cpc	r27, r17
     6de:	d9 f7       	brne	.-10     	; 0x6d6 <__do_copy_data+0xc>

000006e0 <__do_clear_bss>:
     6e0:	24 e0       	ldi	r18, 0x04	; 4
     6e2:	ae e8       	ldi	r26, 0x8E	; 142
     6e4:	b1 e0       	ldi	r27, 0x01	; 1
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <.do_clear_bss_start>

000006e8 <.do_clear_bss_loop>:
     6e8:	1d 92       	st	X+, r1

000006ea <.do_clear_bss_start>:
     6ea:	a7 3e       	cpi	r26, 0xE7	; 231
     6ec:	b2 07       	cpc	r27, r18
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <.do_clear_bss_loop>
     6f0:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <main>
     6f4:	0c 94 9f 18 	jmp	0x313e	; 0x313e <_exit>

000006f8 <__bad_interrupt>:
     6f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fc <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     6fc:	e8 e6       	ldi	r30, 0x68	; 104
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 81       	ld	r24, Z
     702:	82 60       	ori	r24, 0x02	; 2
     704:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     706:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     708:	ec e6       	ldi	r30, 0x6C	; 108
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	8f 60       	ori	r24, 0x0F	; 15
     710:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     712:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
     716:	08 95       	ret

00000718 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     718:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
     71c:	18 16       	cp	r1, r24
     71e:	3c f5       	brge	.+78     	; 0x76e <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     720:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     724:	6f b7       	in	r22, 0x3f	; 63
		cli();
     726:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     728:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <__data_end>
     72c:	92 30       	cpi	r25, 0x02	; 2
     72e:	b4 f0       	brlt	.+44     	; 0x75c <button_pushed+0x44>
     730:	21 e0       	ldi	r18, 0x01	; 1
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     736:	f9 01       	movw	r30, r18
     738:	e1 57       	subi	r30, 0x71	; 113
     73a:	fe 4f       	sbci	r31, 0xFE	; 254
     73c:	40 81       	ld	r20, Z
     73e:	f9 01       	movw	r30, r18
     740:	e2 57       	subi	r30, 0x72	; 114
     742:	fe 4f       	sbci	r31, 0xFE	; 254
     744:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     746:	9f 5f       	subi	r25, 0xFF	; 255
     748:	29 2f       	mov	r18, r25
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	40 91 8e 01 	lds	r20, 0x018E	; 0x80018e <__data_end>
     750:	04 2e       	mov	r0, r20
     752:	00 0c       	add	r0, r0
     754:	55 0b       	sbc	r21, r21
     756:	24 17       	cp	r18, r20
     758:	35 07       	cpc	r19, r21
     75a:	6c f3       	brlt	.-38     	; 0x736 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     75c:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <__data_end>
     760:	91 50       	subi	r25, 0x01	; 1
     762:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <__data_end>
		
		if(interrupts_were_enabled) {
     766:	66 23       	and	r22, r22
     768:	1c f4       	brge	.+6      	; 0x770 <button_pushed+0x58>
			// Turn them back on again
			sei();
     76a:	78 94       	sei
     76c:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     76e:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     770:	08 95       	ret

00000772 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     772:	1f 92       	push	r1
     774:	0f 92       	push	r0
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	0f 92       	push	r0
     77a:	11 24       	eor	r1, r1
     77c:	2f 93       	push	r18
     77e:	3f 93       	push	r19
     780:	4f 93       	push	r20
     782:	5f 93       	push	r21
     784:	6f 93       	push	r22
     786:	7f 93       	push	r23
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	ef 93       	push	r30
     78e:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     790:	43 b1       	in	r20, 0x03	; 3
     792:	4f 70       	andi	r20, 0x0F	; 15
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     798:	64 2f       	mov	r22, r20
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__data_end>
     7a0:	24 30       	cpi	r18, 0x04	; 4
     7a2:	04 f5       	brge	.+64     	; 0x7e4 <__vector_5+0x72>
     7a4:	9b 01       	movw	r18, r22
     7a6:	08 2e       	mov	r0, r24
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <__vector_5+0x3c>
     7aa:	35 95       	asr	r19
     7ac:	27 95       	ror	r18
     7ae:	0a 94       	dec	r0
     7b0:	e2 f7       	brpl	.-8      	; 0x7aa <__vector_5+0x38>
     7b2:	20 ff       	sbrs	r18, 0
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     7b6:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	08 2e       	mov	r0, r24
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <__vector_5+0x52>
     7c0:	35 95       	asr	r19
     7c2:	27 95       	ror	r18
     7c4:	0a 94       	dec	r0
     7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <__vector_5+0x4e>
     7c8:	20 fd       	sbrc	r18, 0
     7ca:	0c c0       	rjmp	.+24     	; 0x7e4 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     7cc:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <__data_end>
     7d0:	21 e0       	ldi	r18, 0x01	; 1
     7d2:	2e 0f       	add	r18, r30
     7d4:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
     7d8:	0e 2e       	mov	r0, r30
     7da:	00 0c       	add	r0, r0
     7dc:	ff 0b       	sbc	r31, r31
     7de:	e1 57       	subi	r30, 0x71	; 113
     7e0:	fe 4f       	sbci	r31, 0xFE	; 254
     7e2:	80 83       	st	Z, r24
     7e4:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     7e6:	84 30       	cpi	r24, 0x04	; 4
     7e8:	91 05       	cpc	r25, r1
     7ea:	c1 f6       	brne	.-80     	; 0x79c <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     7ec:	40 93 93 01 	sts	0x0193, r20	; 0x800193 <last_button_state>
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	7f 91       	pop	r23
     7fa:	6f 91       	pop	r22
     7fc:	5f 91       	pop	r21
     7fe:	4f 91       	pop	r20
     800:	3f 91       	pop	r19
     802:	2f 91       	pop	r18
     804:	0f 90       	pop	r0
     806:	0f be       	out	0x3f, r0	; 63
     808:	0f 90       	pop	r0
     80a:	1f 90       	pop	r1
     80c:	18 95       	reti

0000080e <is_ghost_home>:
}

// Returns true (1) if the given location is the home of the ghosts
// (this includes the entry to the home of the ghosts)
static int8_t is_ghost_home(uint8_t x, uint8_t y) {
	if(y == GHOST_HOME_Y && x >= GHOST_HOME_X_LEFT && x <= GHOST_HOME_X_RIGHT) {
     80e:	6f 30       	cpi	r22, 0x0F	; 15
     810:	39 f4       	brne	.+14     	; 0x820 <is_ghost_home+0x12>
		return 1;
     812:	94 ef       	ldi	r25, 0xF4	; 244
     814:	98 0f       	add	r25, r24
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	97 30       	cpi	r25, 0x07	; 7
     81a:	60 f0       	brcs	.+24     	; 0x834 <is_ghost_home+0x26>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	08 95       	ret
	} else if(y == GHOST_HOME_ENTRY_Y && x >= GHOST_HOME_ENTRY_X_LEFT
     820:	6e 30       	cpi	r22, 0x0E	; 14
     822:	39 f4       	brne	.+14     	; 0x832 <is_ghost_home+0x24>

// Returns true (1) if the given location is the home of the ghosts
// (this includes the entry to the home of the ghosts)
static int8_t is_ghost_home(uint8_t x, uint8_t y) {
	if(y == GHOST_HOME_Y && x >= GHOST_HOME_X_LEFT && x <= GHOST_HOME_X_RIGHT) {
		return 1;
     824:	92 ef       	ldi	r25, 0xF2	; 242
     826:	98 0f       	add	r25, r24
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	93 30       	cpi	r25, 0x03	; 3
     82c:	18 f0       	brcs	.+6      	; 0x834 <is_ghost_home+0x26>
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	08 95       	ret
	} else if(y == GHOST_HOME_ENTRY_Y && x >= GHOST_HOME_ENTRY_X_LEFT
			&& x <= GHOST_HOME_ENTRY_X_RIGHT) {
		return 1;
	} else {
		return 0;
     832:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     834:	08 95       	ret

00000836 <display_lives>:
	}
	powered_period = get_current_time();
}

static void display_lives(void) {
	switch(lives) {
     836:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <lives>
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	49 f0       	breq	.+18     	; 0x850 <display_lives+0x1a>
     83e:	28 f0       	brcs	.+10     	; 0x84a <display_lives+0x14>
     840:	82 30       	cpi	r24, 0x02	; 2
     842:	51 f0       	breq	.+20     	; 0x858 <display_lives+0x22>
     844:	83 30       	cpi	r24, 0x03	; 3
     846:	61 f0       	breq	.+24     	; 0x860 <display_lives+0x2a>
     848:	0e c0       	rjmp	.+28     	; 0x866 <display_lives+0x30>
		case 0:
			lives_led = 0;
     84a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lives_led>
			break;
     84e:	0b c0       	rjmp	.+22     	; 0x866 <display_lives+0x30>
		case 1:
			lives_led = 1;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lives_led>
			break;
     856:	07 c0       	rjmp	.+14     	; 0x866 <display_lives+0x30>
		case 2:
			lives_led = 3;
     858:	83 e0       	ldi	r24, 0x03	; 3
     85a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lives_led>
			break;
     85e:	03 c0       	rjmp	.+6      	; 0x866 <display_lives+0x30>
		case 3:
			lives_led = 7;
     860:	87 e0       	ldi	r24, 0x07	; 7
     862:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lives_led>
			break;
	}
	PORTC = lives_led;
     866:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lives_led>
     86a:	88 b9       	out	0x08, r24	; 8
     86c:	08 95       	ret

0000086e <draw_pacman_at>:

// We draw the pac-man at the given location. The character used
// to draw the pac-man is based on the direction it is currently
// facing.
static void draw_pacman_at(uint8_t x, uint8_t y) {
	move_cursor(x+1,y+1);
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	6f 5f       	subi	r22, 0xFF	; 255
     872:	7f 4f       	sbci	r23, 0xFF	; 255
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <move_cursor>
	set_display_attribute(PACMAN_COLOUR);
     87c:	81 e2       	ldi	r24, 0x21	; 33
     87e:	0e 94 9d 12 	call	0x253a	; 0x253a <set_display_attribute>
	printf("%s", pacman_characters[pacman_direction]);
     882:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <pacman_direction>
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	ee 0f       	add	r30, r30
     88a:	ff 1f       	adc	r31, r31
     88c:	ea 58       	subi	r30, 0x8A	; 138
     88e:	fe 4f       	sbci	r31, 0xFE	; 254
     890:	81 81       	ldd	r24, Z+1	; 0x01
     892:	8f 93       	push	r24
     894:	80 81       	ld	r24, Z
     896:	8f 93       	push	r24
     898:	8c e2       	ldi	r24, 0x2C	; 44
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
	normal_display_mode();
     8a4:	0e 94 8b 12 	call	0x2516	; 0x2516 <normal_display_mode>
}
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	08 95       	ret

000008b2 <draw_ghost_at>:

// ghostnum is assumed to be in the range 0..NUM_GHOSTS-1
// x and y values are assumed to be valid
static void draw_ghost_at(uint8_t ghostnum, uint8_t x, uint8_t y) {
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	18 2f       	mov	r17, r24
     8bc:	06 2f       	mov	r16, r22
	move_cursor(x+1,y+1);
     8be:	c4 2f       	mov	r28, r20
     8c0:	d0 e0       	ldi	r29, 0x00	; 0
     8c2:	86 2f       	mov	r24, r22
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	be 01       	movw	r22, r28
     8c8:	6f 5f       	subi	r22, 0xFF	; 255
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <move_cursor>
	// change the background colour to the colour of the given ghost
	set_display_attribute(ghost_colours[ghostnum]);
     8d2:	e1 2f       	mov	r30, r17
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	ec 5f       	subi	r30, 0xFC	; 252
     8d8:	fe 4f       	sbci	r31, 0xFE	; 254
     8da:	80 81       	ld	r24, Z
     8dc:	0e 94 9d 12 	call	0x253a	; 0x253a <set_display_attribute>

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     8e0:	fe 01       	movw	r30, r28
     8e2:	ee 0f       	add	r30, r30
     8e4:	ff 1f       	adc	r31, r31
     8e6:	ee 0f       	add	r30, r30
     8e8:	ff 1f       	adc	r31, r31
     8ea:	eb 5e       	subi	r30, 0xEB	; 235
     8ec:	fd 4f       	sbci	r31, 0xFD	; 253
	move_cursor(x+1,y+1);
	// change the background colour to the colour of the given ghost
	set_display_attribute(ghost_colours[ghostnum]);
	// If there is a pac-dot at this location we output a "." otherwise
	// we output a space (which will be shown as a block in reverse video)
	if(is_pacdot_at(x,y)) {
     8ee:	80 81       	ld	r24, Z
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
     8f2:	a2 81       	ldd	r26, Z+2	; 0x02
     8f4:	b3 81       	ldd	r27, Z+3	; 0x03
     8f6:	00 2e       	mov	r0, r16
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__stack+0x3>
     8fa:	b6 95       	lsr	r27
     8fc:	a7 95       	ror	r26
     8fe:	97 95       	ror	r25
     900:	87 95       	ror	r24
     902:	0a 94       	dec	r0
     904:	d2 f7       	brpl	.-12     	; 0x8fa <draw_ghost_at+0x48>
     906:	80 ff       	sbrs	r24, 0
     908:	05 c0       	rjmp	.+10     	; 0x914 <__stack+0x15>
		printf(".");
     90a:	8e e2       	ldi	r24, 0x2E	; 46
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <putchar>
     912:	1c c0       	rjmp	.+56     	; 0x94c <__stack+0x4d>

// is_power_pellet_at() returns true (1) if there is a power pellet at the given
// game location, 0 otherwise
static int8_t is_power_pellet_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = power_pellets[y];
     914:	cc 0f       	add	r28, r28
     916:	dd 1f       	adc	r29, r29
     918:	cc 0f       	add	r28, r28
     91a:	dd 1f       	adc	r29, r29
     91c:	c7 56       	subi	r28, 0x67	; 103
     91e:	de 4f       	sbci	r29, 0xFE	; 254
	set_display_attribute(ghost_colours[ghostnum]);
	// If there is a pac-dot at this location we output a "." otherwise
	// we output a space (which will be shown as a block in reverse video)
	if(is_pacdot_at(x,y)) {
		printf(".");
	} else if (is_power_pellet_at(x, y)) {
     920:	88 81       	ld	r24, Y
     922:	99 81       	ldd	r25, Y+1	; 0x01
     924:	aa 81       	ldd	r26, Y+2	; 0x02
     926:	bb 81       	ldd	r27, Y+3	; 0x03
     928:	04 c0       	rjmp	.+8      	; 0x932 <__stack+0x33>
     92a:	b6 95       	lsr	r27
     92c:	a7 95       	ror	r26
     92e:	97 95       	ror	r25
     930:	87 95       	ror	r24
     932:	0a 95       	dec	r16
     934:	d2 f7       	brpl	.-12     	; 0x92a <__stack+0x2b>
     936:	80 ff       	sbrs	r24, 0
     938:	05 c0       	rjmp	.+10     	; 0x944 <__stack+0x45>
		printf("P");
     93a:	80 e5       	ldi	r24, 0x50	; 80
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <putchar>
     942:	04 c0       	rjmp	.+8      	; 0x94c <__stack+0x4d>
	} else {
		printf(" ");
     944:	80 e2       	ldi	r24, 0x20	; 32
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <putchar>
	}
	// Return to normal display mode to ensure we don't use this
	// background colour for any other printing
	normal_display_mode();
     94c:	0e 94 8b 12 	call	0x2516	; 0x2516 <normal_display_mode>
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	08 95       	ret

0000095a <erase_pixel_at>:

// Erase the pixel at the given location - presumably because the 
// ghost or the pac-man has moved out of this space. If there is 
// still a pac-dot at this space, we output a dot, otherwise we
// output a space. It is assumed that we are in normal video mode.
static void erase_pixel_at(uint8_t x, uint8_t y) {
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	18 2f       	mov	r17, r24
	move_cursor(x+1, y+1);
     962:	c6 2f       	mov	r28, r22
     964:	d0 e0       	ldi	r29, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	be 01       	movw	r22, r28
     96a:	6f 5f       	subi	r22, 0xFF	; 255
     96c:	7f 4f       	sbci	r23, 0xFF	; 255
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <move_cursor>

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     974:	fe 01       	movw	r30, r28
     976:	ee 0f       	add	r30, r30
     978:	ff 1f       	adc	r31, r31
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	eb 5e       	subi	r30, 0xEB	; 235
     980:	fd 4f       	sbci	r31, 0xFD	; 253
// ghost or the pac-man has moved out of this space. If there is 
// still a pac-dot at this space, we output a dot, otherwise we
// output a space. It is assumed that we are in normal video mode.
static void erase_pixel_at(uint8_t x, uint8_t y) {
	move_cursor(x+1, y+1);
	if(is_pacdot_at(x,y)) {
     982:	80 81       	ld	r24, Z
     984:	91 81       	ldd	r25, Z+1	; 0x01
     986:	a2 81       	ldd	r26, Z+2	; 0x02
     988:	b3 81       	ldd	r27, Z+3	; 0x03
     98a:	01 2e       	mov	r0, r17
     98c:	04 c0       	rjmp	.+8      	; 0x996 <erase_pixel_at+0x3c>
     98e:	b6 95       	lsr	r27
     990:	a7 95       	ror	r26
     992:	97 95       	ror	r25
     994:	87 95       	ror	r24
     996:	0a 94       	dec	r0
     998:	d2 f7       	brpl	.-12     	; 0x98e <erase_pixel_at+0x34>
     99a:	80 ff       	sbrs	r24, 0
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <erase_pixel_at+0x4e>
		printf(".");
     99e:	8e e2       	ldi	r24, 0x2E	; 46
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <putchar>
     9a6:	1c c0       	rjmp	.+56     	; 0x9e0 <erase_pixel_at+0x86>

// is_power_pellet_at() returns true (1) if there is a power pellet at the given
// game location, 0 otherwise
static int8_t is_power_pellet_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = power_pellets[y];
     9a8:	cc 0f       	add	r28, r28
     9aa:	dd 1f       	adc	r29, r29
     9ac:	cc 0f       	add	r28, r28
     9ae:	dd 1f       	adc	r29, r29
     9b0:	c7 56       	subi	r28, 0x67	; 103
     9b2:	de 4f       	sbci	r29, 0xFE	; 254
// output a space. It is assumed that we are in normal video mode.
static void erase_pixel_at(uint8_t x, uint8_t y) {
	move_cursor(x+1, y+1);
	if(is_pacdot_at(x,y)) {
		printf(".");
 	} else if (is_power_pellet_at(x, y)) {
     9b4:	88 81       	ld	r24, Y
     9b6:	99 81       	ldd	r25, Y+1	; 0x01
     9b8:	aa 81       	ldd	r26, Y+2	; 0x02
     9ba:	bb 81       	ldd	r27, Y+3	; 0x03
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <erase_pixel_at+0x6c>
     9be:	b6 95       	lsr	r27
     9c0:	a7 95       	ror	r26
     9c2:	97 95       	ror	r25
     9c4:	87 95       	ror	r24
     9c6:	1a 95       	dec	r17
     9c8:	d2 f7       	brpl	.-12     	; 0x9be <erase_pixel_at+0x64>
     9ca:	80 ff       	sbrs	r24, 0
     9cc:	05 c0       	rjmp	.+10     	; 0x9d8 <erase_pixel_at+0x7e>
		printf("P");		 
     9ce:	80 e5       	ldi	r24, 0x50	; 80
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <putchar>
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <erase_pixel_at+0x86>
	} else {
		printf(" ");
     9d8:	80 e2       	ldi	r24, 0x20	; 32
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <putchar>
	 }
}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	08 95       	ret

000009e8 <display_score>:
	char wall_character = pgm_read_byte(& init_game_field[y * FIELD_WIDTH + x]);
	return (wall_character != ' ' && wall_character != '.'
			&& wall_character != 'P');
}

void display_score(void) {
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
	move_cursor(50,20);
     9f0:	64 e1       	ldi	r22, 0x14	; 20
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	82 e3       	ldi	r24, 0x32	; 50
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <move_cursor>
	printf_P(PSTR("Score /n %d /n High Score /n %d"), 1.0, "Score", get_score(), "High Score", get_highscore());
     9fc:	0e 94 06 10 	call	0x200c	; 0x200c <get_highscore>
     a00:	c6 2f       	mov	r28, r22
     a02:	d7 2f       	mov	r29, r23
     a04:	18 2f       	mov	r17, r24
     a06:	09 2f       	mov	r16, r25
     a08:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <get_score>
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	df 93       	push	r29
     a12:	cf 93       	push	r28
     a14:	2f e2       	ldi	r18, 0x2F	; 47
     a16:	31 e0       	ldi	r19, 0x01	; 1
     a18:	3f 93       	push	r19
     a1a:	2f 93       	push	r18
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	7f 93       	push	r23
     a22:	6f 93       	push	r22
     a24:	84 e3       	ldi	r24, 0x34	; 52
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	9f 93       	push	r25
     a2a:	8f 93       	push	r24
     a2c:	8f e3       	ldi	r24, 0x3F	; 63
     a2e:	8f 93       	push	r24
     a30:	80 e8       	ldi	r24, 0x80	; 128
     a32:	8f 93       	push	r24
     a34:	1f 92       	push	r1
     a36:	1f 92       	push	r1
     a38:	8d e4       	ldi	r24, 0x4D	; 77
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	9f 93       	push	r25
     a3e:	8f 93       	push	r24
     a40:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>
}
     a44:	8d b7       	in	r24, 0x3d	; 61
     a46:	9e b7       	in	r25, 0x3e	; 62
     a48:	42 96       	adiw	r24, 0x12	; 18
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	9e bf       	out	0x3e, r25	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	8d bf       	out	0x3d, r24	; 61
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	08 95       	ret

00000a5e <what_is_in_dirn>:

// what_is_in_dirn(x,y,direction) returns what is in the cell one from
// the cell at (x,y) in the given direction - provided that is not off
// the game field. (If it is, we just indicate that a wall is there.)
// We check for a wall first because this also checks that we're not at the edge
int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
	int8_t delta_y = 0;
	switch(direction) {
     a66:	41 30       	cpi	r20, 0x01	; 1
     a68:	91 f0       	breq	.+36     	; 0xa8e <what_is_in_dirn+0x30>
     a6a:	28 f0       	brcs	.+10     	; 0xa76 <what_is_in_dirn+0x18>
     a6c:	42 30       	cpi	r20, 0x02	; 2
     a6e:	49 f0       	breq	.+18     	; 0xa82 <what_is_in_dirn+0x24>
     a70:	43 30       	cpi	r20, 0x03	; 3
     a72:	99 f0       	breq	.+38     	; 0xa9a <what_is_in_dirn+0x3c>
     a74:	5e c0       	rjmp	.+188    	; 0xb32 <what_is_in_dirn+0xd4>
		case DIRN_LEFT:
		if(x == 0) {
     a76:	88 23       	and	r24, r24
     a78:	09 f4       	brne	.+2      	; 0xa7c <what_is_in_dirn+0x1e>
     a7a:	5d c0       	rjmp	.+186    	; 0xb36 <what_is_in_dirn+0xd8>
int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
	int8_t delta_y = 0;
     a7c:	20 e0       	ldi	r18, 0x00	; 0
		case DIRN_LEFT:
		if(x == 0) {
			// We can't move left since we're at the edge
			return CELL_IS_WALL;
		}
		delta_x = -1;
     a7e:	9f ef       	ldi	r25, 0xFF	; 255
     a80:	11 c0       	rjmp	.+34     	; 0xaa4 <what_is_in_dirn+0x46>
		break;
		case DIRN_RIGHT:
		if(x == FIELD_WIDTH-1) {
     a82:	8e 31       	cpi	r24, 0x1E	; 30
     a84:	09 f4       	brne	.+2      	; 0xa88 <what_is_in_dirn+0x2a>
     a86:	59 c0       	rjmp	.+178    	; 0xb3a <what_is_in_dirn+0xdc>
int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
	int8_t delta_y = 0;
     a88:	20 e0       	ldi	r18, 0x00	; 0
		case DIRN_RIGHT:
		if(x == FIELD_WIDTH-1) {
			// We can't move right since we're at the edge
			return CELL_IS_WALL;
		}
		delta_x = 1;
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	0b c0       	rjmp	.+22     	; 0xaa4 <what_is_in_dirn+0x46>
		break;
		case DIRN_UP:
		if(y == 0) {
     a8e:	66 23       	and	r22, r22
     a90:	09 f4       	brne	.+2      	; 0xa94 <what_is_in_dirn+0x36>
     a92:	55 c0       	rjmp	.+170    	; 0xb3e <what_is_in_dirn+0xe0>
			// We can't move up since we're at the edge
			return CELL_IS_WALL;
		}
		delta_y = -1;
     a94:	2f ef       	ldi	r18, 0xFF	; 255
// We check for a wall first because this also checks that we're not at the edge
int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <what_is_in_dirn+0x46>
			return CELL_IS_WALL;
		}
		delta_y = -1;
		break;
		case DIRN_DOWN:
		if(y == FIELD_HEIGHT-1) {
     a9a:	6e 31       	cpi	r22, 0x1E	; 30
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <what_is_in_dirn+0x42>
     a9e:	51 c0       	rjmp	.+162    	; 0xb42 <what_is_in_dirn+0xe4>
			// We can't move down since we're at the edge
			return CELL_IS_WALL;
		}
		delta_y = 1;
     aa0:	21 e0       	ldi	r18, 0x01	; 1
// We check for a wall first because this also checks that we're not at the edge
int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
     aa2:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:	// Shouldn't happen - we just return CELL_IS_WALL if
		// the direction given is invalid
		return CELL_IS_WALL;
	}
	return what_is_at(x + delta_x, y + delta_y);
     aa4:	62 0f       	add	r22, r18
     aa6:	89 0f       	add	r24, r25
}

// is_pacman_at() returns true(1) if the pacman is at the given 
// game location (x,y), 0 otherwise
static int8_t is_pacman_at(uint8_t x, uint8_t y) {
	return (x == pacman_x && y == pacman_y);
     aa8:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <pacman_x>
     aac:	89 13       	cpse	r24, r25
     aae:	05 c0       	rjmp	.+10     	; 0xaba <what_is_in_dirn+0x5c>
     ab0:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <pacman_y>
     ab4:	69 17       	cp	r22, r25
     ab6:	09 f4       	brne	.+2      	; 0xaba <what_is_in_dirn+0x5c>
     ab8:	46 c0       	rjmp	.+140    	; 0xb46 <what_is_in_dirn+0xe8>
     aba:	a9 e9       	ldi	r26, 0x99	; 153
     abc:	b2 e0       	ldi	r27, 0x02	; 2
     abe:	e5 e9       	ldi	r30, 0x95	; 149
     ac0:	f2 e0       	ldi	r31, 0x02	; 2
// We check for a wall first because this also checks that we're not at the edge
int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
     ac2:	90 e0       	ldi	r25, 0x00	; 0
	if(is_pacman_at(x,y)) {
		return CELL_CONTAINS_PACMAN;
	} else { // Check for ghosts next - these take priority over dots
		// BUT note that there may be a pacdot at the same location
		for(int8_t i = 0; i < NUM_GHOSTS; i++) {
			if(x == ghost_x[i] && y == ghost_y[i]) {
     ac4:	2d 91       	ld	r18, X+
     ac6:	82 13       	cpse	r24, r18
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <what_is_in_dirn+0x74>
     aca:	20 81       	ld	r18, Z
     acc:	62 17       	cp	r22, r18
     ace:	09 f4       	brne	.+2      	; 0xad2 <what_is_in_dirn+0x74>
     ad0:	3c c0       	rjmp	.+120    	; 0xb4a <what_is_in_dirn+0xec>
     ad2:	9f 5f       	subi	r25, 0xFF	; 255
     ad4:	31 96       	adiw	r30, 0x01	; 1
static int8_t what_is_at(uint8_t x, uint8_t y) {
	if(is_pacman_at(x,y)) {
		return CELL_CONTAINS_PACMAN;
	} else { // Check for ghosts next - these take priority over dots
		// BUT note that there may be a pacdot at the same location
		for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     ad6:	94 30       	cpi	r25, 0x04	; 4
     ad8:	a9 f7       	brne	.-22     	; 0xac4 <what_is_in_dirn+0x66>

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     ada:	46 2f       	mov	r20, r22
     adc:	50 e0       	ldi	r21, 0x00	; 0
	// Extract the value for the column x (which is in bit x)
	if(dots_on_row & (1UL<< x)) {
     ade:	28 2f       	mov	r18, r24
     ae0:	30 e0       	ldi	r19, 0x00	; 0

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     ae2:	fa 01       	movw	r30, r20
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	eb 5e       	subi	r30, 0xEB	; 235
     aee:	fd 4f       	sbci	r31, 0xFD	; 253
			if(x == ghost_x[i] && y == ghost_y[i]) {
				return i;	// ghost number
			}
		}
	}
	if (is_pacdot_at(x,y)) {
     af0:	c0 80       	ld	r12, Z
     af2:	d1 80       	ldd	r13, Z+1	; 0x01
     af4:	e2 80       	ldd	r14, Z+2	; 0x02
     af6:	f3 80       	ldd	r15, Z+3	; 0x03
     af8:	08 2e       	mov	r0, r24
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <what_is_in_dirn+0xa6>
     afc:	f6 94       	lsr	r15
     afe:	e7 94       	ror	r14
     b00:	d7 94       	ror	r13
     b02:	c7 94       	ror	r12
     b04:	0a 94       	dec	r0
     b06:	d2 f7       	brpl	.-12     	; 0xafc <what_is_in_dirn+0x9e>
     b08:	c0 fc       	sbrc	r12, 0
     b0a:	21 c0       	rjmp	.+66     	; 0xb4e <what_is_in_dirn+0xf0>
//
// is_wall_at() returns true (1) if there is a wall at the given 
// game location, 0 otherwise
static int8_t is_wall_at (uint8_t x, uint8_t y) {
	// Get information about any wall in that position
	char wall_character = pgm_read_byte(& init_game_field[y * FIELD_WIDTH + x]);
     b0c:	9f e1       	ldi	r25, 0x1F	; 31
     b0e:	94 9f       	mul	r25, r20
     b10:	f0 01       	movw	r30, r0
     b12:	95 9f       	mul	r25, r21
     b14:	f0 0d       	add	r31, r0
     b16:	11 24       	eor	r1, r1
     b18:	e2 0f       	add	r30, r18
     b1a:	f3 1f       	adc	r31, r19
     b1c:	e3 59       	subi	r30, 0x93	; 147
     b1e:	fe 4f       	sbci	r31, 0xFE	; 254
     b20:	e4 91       	lpm	r30, Z
	return (wall_character != ' ' && wall_character != '.'
			&& wall_character != 'P');
     b22:	e0 32       	cpi	r30, 0x20	; 32
     b24:	c1 f0       	breq	.+48     	; 0xb56 <what_is_in_dirn+0xf8>
// is_wall_at() returns true (1) if there is a wall at the given 
// game location, 0 otherwise
static int8_t is_wall_at (uint8_t x, uint8_t y) {
	// Get information about any wall in that position
	char wall_character = pgm_read_byte(& init_game_field[y * FIELD_WIDTH + x]);
	return (wall_character != ' ' && wall_character != '.'
     b26:	ee 32       	cpi	r30, 0x2E	; 46
     b28:	b1 f0       	breq	.+44     	; 0xb56 <what_is_in_dirn+0xf8>
			&& wall_character != 'P');
     b2a:	e0 35       	cpi	r30, 0x50	; 80
     b2c:	a1 f0       	breq	.+40     	; 0xb56 <what_is_in_dirn+0xf8>
		}
	}
	if (is_pacdot_at(x,y)) {
		return CELL_CONTAINS_PACDOT;
	} else if (is_wall_at(x,y)) {
		return CELL_IS_WALL;
     b2e:	8e ef       	ldi	r24, 0xFE	; 254
     b30:	17 c0       	rjmp	.+46     	; 0xb60 <what_is_in_dirn+0x102>
		}
		delta_y = 1;
		break;
		default:	// Shouldn't happen - we just return CELL_IS_WALL if
		// the direction given is invalid
		return CELL_IS_WALL;
     b32:	8e ef       	ldi	r24, 0xFE	; 254
     b34:	15 c0       	rjmp	.+42     	; 0xb60 <what_is_in_dirn+0x102>
	int8_t delta_y = 0;
	switch(direction) {
		case DIRN_LEFT:
		if(x == 0) {
			// We can't move left since we're at the edge
			return CELL_IS_WALL;
     b36:	8e ef       	ldi	r24, 0xFE	; 254
     b38:	13 c0       	rjmp	.+38     	; 0xb60 <what_is_in_dirn+0x102>
		delta_x = -1;
		break;
		case DIRN_RIGHT:
		if(x == FIELD_WIDTH-1) {
			// We can't move right since we're at the edge
			return CELL_IS_WALL;
     b3a:	8e ef       	ldi	r24, 0xFE	; 254
     b3c:	11 c0       	rjmp	.+34     	; 0xb60 <what_is_in_dirn+0x102>
		delta_x = 1;
		break;
		case DIRN_UP:
		if(y == 0) {
			// We can't move up since we're at the edge
			return CELL_IS_WALL;
     b3e:	8e ef       	ldi	r24, 0xFE	; 254
     b40:	0f c0       	rjmp	.+30     	; 0xb60 <what_is_in_dirn+0x102>
		delta_y = -1;
		break;
		case DIRN_DOWN:
		if(y == FIELD_HEIGHT-1) {
			// We can't move down since we're at the edge
			return CELL_IS_WALL;
     b42:	8e ef       	ldi	r24, 0xFE	; 254
     b44:	0d c0       	rjmp	.+26     	; 0xb60 <what_is_in_dirn+0x102>
// what_is_at(x,y) returns
//		CELL_EMPTY, CELL_CONTAINS_PACDOT, CELL_CONTAINS_PACMAN, CELL_IS_WALL,
//		CELL_IS_GHOST_HOME or the ghost number if the cell contains a ghost
static int8_t what_is_at(uint8_t x, uint8_t y) {
	if(is_pacman_at(x,y)) {
		return CELL_CONTAINS_PACMAN;
     b46:	8d ef       	ldi	r24, 0xFD	; 253
     b48:	0b c0       	rjmp	.+22     	; 0xb60 <what_is_in_dirn+0x102>
	} else { // Check for ghosts next - these take priority over dots
		// BUT note that there may be a pacdot at the same location
		for(int8_t i = 0; i < NUM_GHOSTS; i++) {
			if(x == ghost_x[i] && y == ghost_y[i]) {
     b4a:	89 2f       	mov	r24, r25
     b4c:	09 c0       	rjmp	.+18     	; 0xb60 <what_is_in_dirn+0x102>
				return i;	// ghost number
			}
		}
	}
	if (is_pacdot_at(x,y)) {
		return CELL_CONTAINS_PACDOT;
     b4e:	8c ef       	ldi	r24, 0xFC	; 252
     b50:	07 c0       	rjmp	.+14     	; 0xb60 <what_is_in_dirn+0x102>
	} else if (is_wall_at(x,y)) {
		return CELL_IS_WALL;
	} else if(is_ghost_home(x,y)) {
		return CELL_IS_GHOST_HOME;
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	05 c0       	rjmp	.+10     	; 0xb60 <what_is_in_dirn+0x102>
	}
	if (is_pacdot_at(x,y)) {
		return CELL_CONTAINS_PACDOT;
	} else if (is_wall_at(x,y)) {
		return CELL_IS_WALL;
	} else if(is_ghost_home(x,y)) {
     b56:	0e 94 07 04 	call	0x80e	; 0x80e <is_ghost_home>
     b5a:	81 11       	cpse	r24, r1
     b5c:	fa cf       	rjmp	.-12     	; 0xb52 <what_is_in_dirn+0xf4>
		return CELL_IS_GHOST_HOME;
	}
	// If we get here, we haven't found anything else - cell is empty
	return CELL_EMPTY;
     b5e:	8b ef       	ldi	r24, 0xFB	; 251
		default:	// Shouldn't happen - we just return CELL_IS_WALL if
		// the direction given is invalid
		return CELL_IS_WALL;
	}
	return what_is_at(x + delta_x, y + delta_y);
}
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	08 95       	ret

00000b6a <determine_dirns_ghost_can_move_in>:
// - a pacdot
// - empty
// It can not move there if the cell is a ghost or a wall.
// If we're in the ghost home we can move to another cell in the ghost home.
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
     b6a:	cf 92       	push	r12
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	08 2f       	mov	r16, r24
     b7c:	f6 2e       	mov	r15, r22
	int8_t return_value = 0;
	int8_t posn_is_in_ghost_home = is_ghost_home(x,y);
     b7e:	0e 94 07 04 	call	0x80e	; 0x80e <is_ghost_home>
     b82:	e8 2e       	mov	r14, r24
     b84:	c0 e0       	ldi	r28, 0x00	; 0
     b86:	d0 e0       	ldi	r29, 0x00	; 0
// - empty
// It can not move there if the cell is a ghost or a wall.
// If we're in the ghost home we can move to another cell in the ghost home.
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
	int8_t return_value = 0;
     b88:	10 e0       	ldi	r17, 0x00	; 0
		if(adjacent_cell_contents < CELL_IS_WALL) {
			// cell is empty or pacdot or pacman
			return_value |= (1 << dirn);
		} else if(posn_is_in_ghost_home && adjacent_cell_contents == CELL_IS_GHOST_HOME) {
			// we're in the ghost home and can move to an empty cell in the ghost home
			return_value |= (1 << dirn);
     b8a:	cc 24       	eor	r12, r12
     b8c:	c3 94       	inc	r12
     b8e:	d1 2c       	mov	r13, r1
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
	int8_t return_value = 0;
	int8_t posn_is_in_ghost_home = is_ghost_home(x,y);
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		int8_t adjacent_cell_contents = what_is_in_dirn(x,y,dirn);
     b90:	4c 2f       	mov	r20, r28
     b92:	6f 2d       	mov	r22, r15
     b94:	80 2f       	mov	r24, r16
     b96:	0e 94 2f 05 	call	0xa5e	; 0xa5e <what_is_in_dirn>
		
		if(adjacent_cell_contents < CELL_IS_WALL) {
     b9a:	8e 3f       	cpi	r24, 0xFE	; 254
     b9c:	4c f4       	brge	.+18     	; 0xbb0 <determine_dirns_ghost_can_move_in+0x46>
			// cell is empty or pacdot or pacman
			return_value |= (1 << dirn);
     b9e:	c6 01       	movw	r24, r12
     ba0:	0c 2e       	mov	r0, r28
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <determine_dirns_ghost_can_move_in+0x3e>
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	0a 94       	dec	r0
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <determine_dirns_ghost_can_move_in+0x3a>
     bac:	18 2b       	or	r17, r24
     bae:	0c c0       	rjmp	.+24     	; 0xbc8 <determine_dirns_ghost_can_move_in+0x5e>
		} else if(posn_is_in_ghost_home && adjacent_cell_contents == CELL_IS_GHOST_HOME) {
     bb0:	ee 20       	and	r14, r14
     bb2:	51 f0       	breq	.+20     	; 0xbc8 <determine_dirns_ghost_can_move_in+0x5e>
     bb4:	8f 3f       	cpi	r24, 0xFF	; 255
     bb6:	41 f4       	brne	.+16     	; 0xbc8 <determine_dirns_ghost_can_move_in+0x5e>
			// we're in the ghost home and can move to an empty cell in the ghost home
			return_value |= (1 << dirn);
     bb8:	c6 01       	movw	r24, r12
     bba:	0c 2e       	mov	r0, r28
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <determine_dirns_ghost_can_move_in+0x58>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <determine_dirns_ghost_can_move_in+0x54>
     bc6:	18 2b       	or	r17, r24
     bc8:	21 96       	adiw	r28, 0x01	; 1
// If we're in the ghost home we can move to another cell in the ghost home.
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
	int8_t return_value = 0;
	int8_t posn_is_in_ghost_home = is_ghost_home(x,y);
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
     bca:	c4 30       	cpi	r28, 0x04	; 4
     bcc:	d1 05       	cpc	r29, r1
     bce:	01 f7       	brne	.-64     	; 0xb90 <determine_dirns_ghost_can_move_in+0x26>
			// we're in the ghost home and can move to an empty cell in the ghost home
			return_value |= (1 << dirn);
		} 
	}
	return return_value;
}
     bd0:	81 2f       	mov	r24, r17
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	cf 90       	pop	r12
     be2:	08 95       	ret

00000be4 <initialise_game_level>:
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
     be4:	2f 92       	push	r2
     be6:	3f 92       	push	r3
     be8:	4f 92       	push	r4
     bea:	5f 92       	push	r5
     bec:	6f 92       	push	r6
     bee:	7f 92       	push	r7
     bf0:	8f 92       	push	r8
     bf2:	9f 92       	push	r9
     bf4:	af 92       	push	r10
     bf6:	bf 92       	push	r11
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
}


// draw_initial_game_field()
static void draw_initial_game_field(void) {
	clear_terminal();
     c08:	0e 94 94 12 	call	0x2528	; 0x2528 <clear_terminal>
	normal_display_mode();
     c0c:	0e 94 8b 12 	call	0x2516	; 0x2516 <normal_display_mode>
	hide_cursor();
     c10:	0e 94 aa 12 	call	0x2554	; 0x2554 <hide_cursor>
	move_cursor(1,1);	// Start at top left
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <move_cursor>
     c20:	0f 2e       	mov	r0, r31
     c22:	fc e8       	ldi	r31, 0x8C	; 140
     c24:	6f 2e       	mov	r6, r31
     c26:	f1 e0       	ldi	r31, 0x01	; 1
     c28:	7f 2e       	mov	r7, r31
     c2a:	f0 2d       	mov	r31, r0
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     c2c:	0f 2e       	mov	r0, r31
     c2e:	f2 e6       	ldi	r31, 0x62	; 98
     c30:	2f 2e       	mov	r2, r31
     c32:	f1 e0       	ldi	r31, 0x01	; 1
     c34:	3f 2e       	mov	r3, r31
     c36:	f0 2d       	mov	r31, r0
     c38:	0f 2e       	mov	r0, r31
     c3a:	fc e2       	ldi	r31, 0x2C	; 44
     c3c:	4f 2e       	mov	r4, r31
     c3e:	f1 e0       	ldi	r31, 0x01	; 1
     c40:	5f 2e       	mov	r5, r31
     c42:	f0 2d       	mov	r31, r0
     c44:	b6 c0       	rjmp	.+364    	; 0xdb2 <initialise_game_level+0x1ce>
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     c46:	f6 01       	movw	r30, r12
     c48:	84 91       	lpm	r24, Z
			switch(wall_character) {
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	fc 01       	movw	r30, r24
     c4e:	b0 97       	sbiw	r30, 0x20	; 32
     c50:	ed 35       	cpi	r30, 0x5D	; 93
     c52:	f1 05       	cpc	r31, r1
     c54:	08 f0       	brcs	.+2      	; 0xc58 <initialise_game_level+0x74>
     c56:	96 c0       	rjmp	.+300    	; 0xd84 <initialise_game_level+0x1a0>
     c58:	e2 5c       	subi	r30, 0xC2	; 194
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__tablejump2__>
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     c60:	9f 92       	push	r9
     c62:	8f 92       	push	r8
     c64:	5f 92       	push	r5
     c66:	4f 92       	push	r4
     c68:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	8b c0       	rjmp	.+278    	; 0xd8c <initialise_game_level+0x1a8>
				case '|':	printf("%s", LINE_VERTICAL); break;
     c76:	bf 92       	push	r11
     c78:	af 92       	push	r10
     c7a:	5f 92       	push	r5
     c7c:	4f 92       	push	r4
     c7e:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	80 c0       	rjmp	.+256    	; 0xd8c <initialise_game_level+0x1a8>
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	5f 92       	push	r5
     c92:	4f 92       	push	r4
     c94:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	75 c0       	rjmp	.+234    	; 0xd8c <initialise_game_level+0x1a8>
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     ca2:	1f 93       	push	r17
     ca4:	0f 93       	push	r16
     ca6:	5f 92       	push	r5
     ca8:	4f 92       	push	r4
     caa:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	6a c0       	rjmp	.+212    	; 0xd8c <initialise_game_level+0x1a8>
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     cb8:	ff 92       	push	r15
     cba:	ef 92       	push	r14
     cbc:	5f 92       	push	r5
     cbe:	4f 92       	push	r4
     cc0:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	5f c0       	rjmp	.+190    	; 0xd8c <initialise_game_level+0x1a8>
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
     cce:	8e e4       	ldi	r24, 0x4E	; 78
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	9f 93       	push	r25
     cd4:	8f 93       	push	r24
     cd6:	5f 92       	push	r5
     cd8:	4f 92       	push	r4
     cda:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	52 c0       	rjmp	.+164    	; 0xd8c <initialise_game_level+0x1a8>
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
     ce8:	82 e5       	ldi	r24, 0x52	; 82
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	9f 93       	push	r25
     cee:	8f 93       	push	r24
     cf0:	5f 92       	push	r5
     cf2:	4f 92       	push	r4
     cf4:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	45 c0       	rjmp	.+138    	; 0xd8c <initialise_game_level+0x1a8>
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
     d02:	86 e5       	ldi	r24, 0x56	; 86
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	5f 92       	push	r5
     d0c:	4f 92       	push	r4
     d0e:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	38 c0       	rjmp	.+112    	; 0xd8c <initialise_game_level+0x1a8>
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
     d1c:	8a e5       	ldi	r24, 0x5A	; 90
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	5f 92       	push	r5
     d26:	4f 92       	push	r4
     d28:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	2b c0       	rjmp	.+86     	; 0xd8c <initialise_game_level+0x1a8>
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
     d36:	8e e5       	ldi	r24, 0x5E	; 94
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	9f 93       	push	r25
     d3c:	8f 93       	push	r24
     d3e:	5f 92       	push	r5
     d40:	4f 92       	push	r4
     d42:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	1e c0       	rjmp	.+60     	; 0xd8c <initialise_game_level+0x1a8>
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     d50:	3f 92       	push	r3
     d52:	2f 92       	push	r2
     d54:	5f 92       	push	r5
     d56:	4f 92       	push	r4
     d58:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	13 c0       	rjmp	.+38     	; 0xd8c <initialise_game_level+0x1a8>
				case ' ':	printf(" "); break;
     d66:	80 e2       	ldi	r24, 0x20	; 32
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <putchar>
     d6e:	0e c0       	rjmp	.+28     	; 0xd8c <initialise_game_level+0x1a8>
				case 'P':	printf("P"); break;	// power-pellet initially just implemented as a pac-dot
     d70:	80 e5       	ldi	r24, 0x50	; 80
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <putchar>
     d78:	09 c0       	rjmp	.+18     	; 0xd8c <initialise_game_level+0x1a8>
				case '.':	printf("."); break;	// pac-dot
     d7a:	8e e2       	ldi	r24, 0x2E	; 46
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <putchar>
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <initialise_game_level+0x1a8>
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
     d84:	88 e7       	ldi	r24, 0x78	; 120
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <putchar>
     d8c:	ff ef       	ldi	r31, 0xFF	; 255
     d8e:	cf 1a       	sub	r12, r31
     d90:	df 0a       	sbc	r13, r31
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     d92:	6c 14       	cp	r6, r12
     d94:	7d 04       	cpc	r7, r13
     d96:	09 f0       	breq	.+2      	; 0xd9a <initialise_game_level+0x1b6>
     d98:	56 cf       	rjmp	.-340    	; 0xc46 <initialise_game_level+0x62>
				case '.':	printf("."); break;	// pac-dot
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
			}
			wall_array_index++;
		}
		printf("\n");
     d9a:	8a e0       	ldi	r24, 0x0A	; 10
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <putchar>
     da2:	2f e1       	ldi	r18, 0x1F	; 31
     da4:	62 0e       	add	r6, r18
     da6:	71 1c       	adc	r7, r1
	clear_terminal();
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     da8:	8d e4       	ldi	r24, 0x4D	; 77
     daa:	95 e0       	ldi	r25, 0x05	; 5
     dac:	86 15       	cp	r24, r6
     dae:	97 05       	cpc	r25, r7
     db0:	d9 f0       	breq	.+54     	; 0xde8 <initialise_game_level+0x204>
     db2:	63 01       	movw	r12, r6
     db4:	9f e1       	ldi	r25, 0x1F	; 31
     db6:	c9 1a       	sub	r12, r25
     db8:	d1 08       	sbc	r13, r1
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     dba:	0f 2e       	mov	r0, r31
     dbc:	fa e4       	ldi	r31, 0x4A	; 74
     dbe:	ef 2e       	mov	r14, r31
     dc0:	f1 e0       	ldi	r31, 0x01	; 1
     dc2:	ff 2e       	mov	r15, r31
     dc4:	f0 2d       	mov	r31, r0
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     dc6:	06 e4       	ldi	r16, 0x46	; 70
     dc8:	11 e0       	ldi	r17, 0x01	; 1
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     dca:	c2 e4       	ldi	r28, 0x42	; 66
     dcc:	d1 e0       	ldi	r29, 0x01	; 1
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
     dce:	0f 2e       	mov	r0, r31
     dd0:	fe e3       	ldi	r31, 0x3E	; 62
     dd2:	af 2e       	mov	r10, r31
     dd4:	f1 e0       	ldi	r31, 0x01	; 1
     dd6:	bf 2e       	mov	r11, r31
     dd8:	f0 2d       	mov	r31, r0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     dda:	0f 2e       	mov	r0, r31
     ddc:	fa e3       	ldi	r31, 0x3A	; 58
     dde:	8f 2e       	mov	r8, r31
     de0:	f1 e0       	ldi	r31, 0x01	; 1
     de2:	9f 2e       	mov	r9, r31
     de4:	f0 2d       	mov	r31, r0
     de6:	2f cf       	rjmp	.-418    	; 0xc46 <initialise_game_level+0x62>
     de8:	c5 e1       	ldi	r28, 0x15	; 21
     dea:	d2 e0       	ldi	r29, 0x02	; 2
		printf("\n");
	}
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			if(wall_character == '.') {
				pacdots[y] |= (1UL<<x);
     df4:	81 2c       	mov	r8, r1
     df6:	91 2c       	mov	r9, r1
     df8:	54 01       	movw	r10, r8
     dfa:	83 94       	inc	r8
     dfc:	de 01       	movw	r26, r28

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
     dfe:	18 82       	st	Y, r1
     e00:	19 82       	std	Y+1, r1	; 0x01
     e02:	1a 82       	std	Y+2, r1	; 0x02
     e04:	1b 82       	std	Y+3, r1	; 0x03
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     e0a:	fc 01       	movw	r30, r24
     e0c:	e2 0f       	add	r30, r18
     e0e:	f3 1f       	adc	r31, r19
     e10:	e3 59       	subi	r30, 0x93	; 147
     e12:	fe 4f       	sbci	r31, 0xFE	; 254
     e14:	e4 91       	lpm	r30, Z
			if(wall_character == '.') {
     e16:	ee 32       	cpi	r30, 0x2E	; 46
     e18:	d1 f4       	brne	.+52     	; 0xe4e <initialise_game_level+0x26a>
				pacdots[y] |= (1UL<<x);
     e1a:	4d 90       	ld	r4, X+
     e1c:	5d 90       	ld	r5, X+
     e1e:	6d 90       	ld	r6, X+
     e20:	7c 90       	ld	r7, X
     e22:	13 97       	sbiw	r26, 0x03	; 3
     e24:	75 01       	movw	r14, r10
     e26:	64 01       	movw	r12, r8
     e28:	08 2e       	mov	r0, r24
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <initialise_game_level+0x250>
     e2c:	cc 0c       	add	r12, r12
     e2e:	dd 1c       	adc	r13, r13
     e30:	ee 1c       	adc	r14, r14
     e32:	ff 1c       	adc	r15, r15
     e34:	0a 94       	dec	r0
     e36:	d2 f7       	brpl	.-12     	; 0xe2c <initialise_game_level+0x248>
     e38:	c4 28       	or	r12, r4
     e3a:	d5 28       	or	r13, r5
     e3c:	e6 28       	or	r14, r6
     e3e:	f7 28       	or	r15, r7
     e40:	cd 92       	st	X+, r12
     e42:	dd 92       	st	X+, r13
     e44:	ed 92       	st	X+, r14
     e46:	fc 92       	st	X, r15
     e48:	13 97       	sbiw	r26, 0x03	; 3
				num_pacdots++;
     e4a:	4f 5f       	subi	r20, 0xFF	; 255
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
     e4e:	01 96       	adiw	r24, 0x01	; 1
static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     e50:	8f 31       	cpi	r24, 0x1F	; 31
     e52:	91 05       	cpc	r25, r1
     e54:	d1 f6       	brne	.-76     	; 0xe0a <initialise_game_level+0x226>
     e56:	21 5e       	subi	r18, 0xE1	; 225
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	24 96       	adiw	r28, 0x04	; 4
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     e5c:	21 3c       	cpi	r18, 0xC1	; 193
     e5e:	e3 e0       	ldi	r30, 0x03	; 3
     e60:	3e 07       	cpc	r19, r30
     e62:	61 f6       	brne	.-104    	; 0xdfc <initialise_game_level+0x218>
     e64:	50 93 98 01 	sts	0x0198, r21	; 0x800198 <num_pacdots+0x1>
     e68:	40 93 97 01 	sts	0x0197, r20	; 0x800197 <num_pacdots>
     e6c:	0f 2e       	mov	r0, r31
     e6e:	f9 e9       	ldi	r31, 0x99	; 153
     e70:	cf 2e       	mov	r12, r31
     e72:	f1 e0       	ldi	r31, 0x01	; 1
     e74:	df 2e       	mov	r13, r31
     e76:	f0 2d       	mov	r31, r0
     e78:	00 e0       	ldi	r16, 0x00	; 0
     e7a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		power_pellets[y] = 0;
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			if(wall_character == 'P') {
				power_pellets[y] |= (1UL<<x);
     e7c:	81 2c       	mov	r8, r1
     e7e:	91 2c       	mov	r9, r1
     e80:	54 01       	movw	r10, r8
     e82:	83 94       	inc	r8
     e84:	76 01       	movw	r14, r12
}

static void initialise_power_pellets(void) {
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		power_pellets[y] = 0;
     e86:	f6 01       	movw	r30, r12
     e88:	10 82       	st	Z, r1
     e8a:	11 82       	std	Z+1, r1	; 0x01
     e8c:	12 82       	std	Z+2, r1	; 0x02
     e8e:	13 82       	std	Z+3, r1	; 0x03
     e90:	c0 e0       	ldi	r28, 0x00	; 0
     e92:	d0 e0       	ldi	r29, 0x00	; 0
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     e94:	fe 01       	movw	r30, r28
     e96:	e0 0f       	add	r30, r16
     e98:	f1 1f       	adc	r31, r17
     e9a:	e3 59       	subi	r30, 0x93	; 147
     e9c:	fe 4f       	sbci	r31, 0xFE	; 254
     e9e:	e4 91       	lpm	r30, Z
			if(wall_character == 'P') {
     ea0:	e0 35       	cpi	r30, 0x50	; 80
     ea2:	d9 f4       	brne	.+54     	; 0xeda <initialise_game_level+0x2f6>
				power_pellets[y] |= (1UL<<x);
     ea4:	f7 01       	movw	r30, r14
     ea6:	40 81       	ld	r20, Z
     ea8:	51 81       	ldd	r21, Z+1	; 0x01
     eaa:	62 81       	ldd	r22, Z+2	; 0x02
     eac:	73 81       	ldd	r23, Z+3	; 0x03
     eae:	d5 01       	movw	r26, r10
     eb0:	c4 01       	movw	r24, r8
     eb2:	0c 2e       	mov	r0, r28
     eb4:	04 c0       	rjmp	.+8      	; 0xebe <initialise_game_level+0x2da>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	aa 1f       	adc	r26, r26
     ebc:	bb 1f       	adc	r27, r27
     ebe:	0a 94       	dec	r0
     ec0:	d2 f7       	brpl	.-12     	; 0xeb6 <initialise_game_level+0x2d2>
     ec2:	84 2b       	or	r24, r20
     ec4:	95 2b       	or	r25, r21
     ec6:	a6 2b       	or	r26, r22
     ec8:	b7 2b       	or	r27, r23
     eca:	f7 01       	movw	r30, r14
     ecc:	80 83       	st	Z, r24
     ece:	91 83       	std	Z+1, r25	; 0x01
     ed0:	a2 83       	std	Z+2, r26	; 0x02
     ed2:	b3 83       	std	Z+3, r27	; 0x03
				set_display_attribute(BG_CYAN);
     ed4:	8e e2       	ldi	r24, 0x2E	; 46
     ed6:	0e 94 9d 12 	call	0x253a	; 0x253a <set_display_attribute>
     eda:	21 96       	adiw	r28, 0x01	; 1

static void initialise_power_pellets(void) {
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		power_pellets[y] = 0;
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     edc:	cf 31       	cpi	r28, 0x1F	; 31
     ede:	d1 05       	cpc	r29, r1
     ee0:	c9 f6       	brne	.-78     	; 0xe94 <initialise_game_level+0x2b0>
     ee2:	01 5e       	subi	r16, 0xE1	; 225
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
     ee6:	f4 e0       	ldi	r31, 0x04	; 4
     ee8:	cf 0e       	add	r12, r31
     eea:	d1 1c       	adc	r13, r1
	}	
}

static void initialise_power_pellets(void) {
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     eec:	01 3c       	cpi	r16, 0xC1	; 193
     eee:	23 e0       	ldi	r18, 0x03	; 3
     ef0:	12 07       	cpc	r17, r18
     ef2:	41 f6       	brne	.-112    	; 0xe84 <initialise_game_level+0x2a0>
// Public Functions
void initialise_game_level(void) {
	draw_initial_game_field();
	initialise_pacdots();
	initialise_power_pellets();
	pacman_x = INIT_PACMAN_X;
     ef4:	8f e0       	ldi	r24, 0x0F	; 15
     ef6:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <pacman_x>
	pacman_y = INIT_PACMAN_Y;
     efa:	87 e1       	ldi	r24, 0x17	; 23
     efc:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <pacman_y>
	pacman_direction = INIT_PACMAN_DIRN;
     f00:	82 e0       	ldi	r24, 0x02	; 2
     f02:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <pacman_direction>
	draw_pacman_at(pacman_x, pacman_y);
     f06:	67 e1       	ldi	r22, 0x17	; 23
     f08:	8f e0       	ldi	r24, 0x0F	; 15
     f0a:	0e 94 37 04 	call	0x86e	; 0x86e <draw_pacman_at>
     f0e:	0f 2e       	mov	r0, r31
     f10:	f9 e9       	ldi	r31, 0x99	; 153
     f12:	af 2e       	mov	r10, r31
     f14:	f2 e0       	ldi	r31, 0x02	; 2
     f16:	bf 2e       	mov	r11, r31
     f18:	f0 2d       	mov	r31, r0
     f1a:	0f 2e       	mov	r0, r31
     f1c:	f5 e9       	ldi	r31, 0x95	; 149
     f1e:	cf 2e       	mov	r12, r31
     f20:	f2 e0       	ldi	r31, 0x02	; 2
     f22:	df 2e       	mov	r13, r31
     f24:	f0 2d       	mov	r31, r0
     f26:	0f 2e       	mov	r0, r31
     f28:	f1 e9       	ldi	r31, 0x91	; 145
     f2a:	ef 2e       	mov	r14, r31
     f2c:	f2 e0       	ldi	r31, 0x02	; 2
     f2e:	ff 2e       	mov	r15, r31
     f30:	f0 2d       	mov	r31, r0
     f32:	dc e0       	ldi	r29, 0x0C	; 12
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     f34:	c0 e0       	ldi	r28, 0x00	; 0
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
     f36:	1f e0       	ldi	r17, 0x0F	; 15
		ghost_direction[i] = INIT_GHOST_DIRN;
     f38:	02 e0       	ldi	r16, 0x02	; 2
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
     f3a:	f5 01       	movw	r30, r10
     f3c:	d1 93       	st	Z+, r29
     f3e:	5f 01       	movw	r10, r30
		ghost_y[i] = GHOST_HOME_Y;
     f40:	f6 01       	movw	r30, r12
     f42:	11 93       	st	Z+, r17
     f44:	6f 01       	movw	r12, r30
		ghost_direction[i] = INIT_GHOST_DIRN;
     f46:	f7 01       	movw	r30, r14
     f48:	01 93       	st	Z+, r16
     f4a:	7f 01       	movw	r14, r30
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
     f4c:	41 2f       	mov	r20, r17
     f4e:	6d 2f       	mov	r22, r29
     f50:	8c 2f       	mov	r24, r28
     f52:	0e 94 59 04 	call	0x8b2	; 0x8b2 <draw_ghost_at>
     f56:	cf 5f       	subi	r28, 0xFF	; 255
     f58:	de 5f       	subi	r29, 0xFE	; 254
	initialise_power_pellets();
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     f5a:	c4 30       	cpi	r28, 0x04	; 4
     f5c:	71 f7       	brne	.-36     	; 0xf3a <initialise_game_level+0x356>
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
		ghost_direction[i] = INIT_GHOST_DIRN;
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
	}
}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	bf 90       	pop	r11
     f70:	af 90       	pop	r10
     f72:	9f 90       	pop	r9
     f74:	8f 90       	pop	r8
     f76:	7f 90       	pop	r7
     f78:	6f 90       	pop	r6
     f7a:	5f 90       	pop	r5
     f7c:	4f 90       	pop	r4
     f7e:	3f 90       	pop	r3
     f80:	2f 90       	pop	r2
     f82:	08 95       	ret

00000f84 <initialise_game>:

void initialise_game(void) {
	initialise_game_level();
     f84:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <initialise_game_level>
	// Initialise Life Display
	display_lives();
     f88:	0e 94 1b 04 	call	0x836	; 0x836 <display_lives>
	game_running = 1;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <game_running>
     f92:	08 95       	ret

00000f94 <determine_ghost_score>:
}

void determine_ghost_score(int8_t number) {
	switch(number) {
     f94:	82 30       	cpi	r24, 0x02	; 2
     f96:	71 f0       	breq	.+28     	; 0xfb4 <determine_ghost_score+0x20>
     f98:	1c f4       	brge	.+6      	; 0xfa0 <determine_ghost_score+0xc>
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	31 f0       	breq	.+12     	; 0xfaa <determine_ghost_score+0x16>
     f9e:	18 c0       	rjmp	.+48     	; 0xfd0 <determine_ghost_score+0x3c>
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	69 f0       	breq	.+26     	; 0xfbe <determine_ghost_score+0x2a>
     fa4:	84 30       	cpi	r24, 0x04	; 4
     fa6:	81 f0       	breq	.+32     	; 0xfc8 <determine_ghost_score+0x34>
     fa8:	13 c0       	rjmp	.+38     	; 0xfd0 <determine_ghost_score+0x3c>
		case 1:
			add_to_score(200);
     faa:	88 ec       	ldi	r24, 0xC8	; 200
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <add_to_score>
			break;
     fb2:	0e c0       	rjmp	.+28     	; 0xfd0 <determine_ghost_score+0x3c>
		case 2:
			add_to_score(400);
     fb4:	80 e9       	ldi	r24, 0x90	; 144
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <add_to_score>
			break;
     fbc:	09 c0       	rjmp	.+18     	; 0xfd0 <determine_ghost_score+0x3c>
		case 3:
			add_to_score(800);
     fbe:	80 e2       	ldi	r24, 0x20	; 32
     fc0:	93 e0       	ldi	r25, 0x03	; 3
     fc2:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <add_to_score>
			break;
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <determine_ghost_score+0x3c>
		case 4:
			add_to_score(1600);
     fc8:	80 e4       	ldi	r24, 0x40	; 64
     fca:	96 e0       	ldi	r25, 0x06	; 6
     fcc:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <add_to_score>
			break;		
	}
	display_score();
     fd0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <display_score>
     fd4:	08 95       	ret

00000fd6 <reset_entities_pos>:
	return 1;
}

void reset_entities_pos(void) {
	// Reset Pacman
	pacman_x = INIT_PACMAN_X;
     fd6:	8f e0       	ldi	r24, 0x0F	; 15
     fd8:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <pacman_x>
	pacman_y = INIT_PACMAN_Y;
     fdc:	97 e1       	ldi	r25, 0x17	; 23
     fde:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <pacman_y>
	// Reset Ghosts
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
		ghost_x[i] = GHOST_HOME_X_LEFT;
     fe2:	a9 e9       	ldi	r26, 0x99	; 153
     fe4:	b2 e0       	ldi	r27, 0x02	; 2
     fe6:	9c e0       	ldi	r25, 0x0C	; 12
     fe8:	9c 93       	st	X, r25
		ghost_y[i] = GHOST_HOME_Y;
     fea:	e5 e9       	ldi	r30, 0x95	; 149
     fec:	f2 e0       	ldi	r31, 0x02	; 2
     fee:	80 83       	st	Z, r24
	// Reset Pacman
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	// Reset Ghosts
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
		ghost_x[i] = GHOST_HOME_X_LEFT;
     ff0:	11 96       	adiw	r26, 0x01	; 1
     ff2:	9c 93       	st	X, r25
     ff4:	11 97       	sbiw	r26, 0x01	; 1
		ghost_y[i] = GHOST_HOME_Y;
     ff6:	81 83       	std	Z+1, r24	; 0x01
	// Reset Pacman
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	// Reset Ghosts
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
		ghost_x[i] = GHOST_HOME_X_LEFT;
     ff8:	12 96       	adiw	r26, 0x02	; 2
     ffa:	9c 93       	st	X, r25
     ffc:	12 97       	sbiw	r26, 0x02	; 2
		ghost_y[i] = GHOST_HOME_Y;
     ffe:	82 83       	std	Z+2, r24	; 0x02
	// Reset Pacman
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	// Reset Ghosts
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
		ghost_x[i] = GHOST_HOME_X_LEFT;
    1000:	13 96       	adiw	r26, 0x03	; 3
    1002:	9c 93       	st	X, r25
		ghost_y[i] = GHOST_HOME_Y;
    1004:	83 83       	std	Z+3, r24	; 0x03
    1006:	08 95       	ret

00001008 <move_pacman>:
			break;		
	}
	display_score();
}

int8_t move_pacman(void) {
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
	if(!game_running) {
    100e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <game_running>
    1012:	88 23       	and	r24, r24
    1014:	09 f4       	brne	.+2      	; 0x1018 <move_pacman+0x10>
    1016:	d9 c0       	rjmp	.+434    	; 0x11ca <move_pacman+0x1c2>
	// If the pac-man is about to exit through the end of a passage-way
	// then wrap its location around to the other side of the game field
	// YOUR CODE HERE - you may need to alter the code below also
	
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
    1018:	d0 91 9d 02 	lds	r29, 0x029D	; 0x80029d <pacman_y>
    101c:	c0 91 9e 02 	lds	r28, 0x029E	; 0x80029e <pacman_x>
    1020:	40 91 b6 03 	lds	r20, 0x03B6	; 0x8003b6 <pacman_direction>
    1024:	6d 2f       	mov	r22, r29
    1026:	8c 2f       	mov	r24, r28
    1028:	0e 94 2f 05 	call	0xa5e	; 0xa5e <what_is_in_dirn>
    102c:	18 2f       	mov	r17, r24
	if(cell_contents == CELL_IS_WALL) {
    102e:	8e 3f       	cpi	r24, 0xFE	; 254
    1030:	09 f4       	brne	.+2      	; 0x1034 <move_pacman+0x2c>
    1032:	cd c0       	rjmp	.+410    	; 0x11ce <move_pacman+0x1c6>
		return 0;	// We can't move - wall is straight ahead
	}
	// We can move - erase the pac-man in the current location
	erase_pixel_at(pacman_x, pacman_y);
    1034:	6d 2f       	mov	r22, r29
    1036:	8c 2f       	mov	r24, r28
    1038:	0e 94 ad 04 	call	0x95a	; 0x95a <erase_pixel_at>
	// Update the pac-man location
	if(pacman_direction == DIRN_LEFT) {
    103c:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <pacman_direction>
    1040:	81 11       	cpse	r24, r1
    1042:	0b c0       	rjmp	.+22     	; 0x105a <move_pacman+0x52>
		pacman_x--;
    1044:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <pacman_x>
    1048:	81 50       	subi	r24, 0x01	; 1
		if(pacman_x == 0) {
    104a:	19 f0       	breq	.+6      	; 0x1052 <move_pacman+0x4a>
	}
	// We can move - erase the pac-man in the current location
	erase_pixel_at(pacman_x, pacman_y);
	// Update the pac-man location
	if(pacman_direction == DIRN_LEFT) {
		pacman_x--;
    104c:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <pacman_x>
    1050:	1e c0       	rjmp	.+60     	; 0x108e <move_pacman+0x86>
		if(pacman_x == 0) {
			pacman_x = FIELD_WIDTH - 1;
    1052:	8e e1       	ldi	r24, 0x1E	; 30
    1054:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <pacman_x>
    1058:	1a c0       	rjmp	.+52     	; 0x108e <move_pacman+0x86>
		}
	} else if(pacman_direction == DIRN_RIGHT) {
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	59 f4       	brne	.+22     	; 0x1074 <move_pacman+0x6c>
		pacman_x++;
    105e:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <pacman_x>
    1062:	8f 5f       	subi	r24, 0xFF	; 255
		if(pacman_x == FIELD_WIDTH - 1) {
    1064:	8e 31       	cpi	r24, 0x1E	; 30
    1066:	19 f0       	breq	.+6      	; 0x106e <move_pacman+0x66>
		pacman_x--;
		if(pacman_x == 0) {
			pacman_x = FIELD_WIDTH - 1;
		}
	} else if(pacman_direction == DIRN_RIGHT) {
		pacman_x++;
    1068:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <pacman_x>
    106c:	10 c0       	rjmp	.+32     	; 0x108e <move_pacman+0x86>
		if(pacman_x == FIELD_WIDTH - 1) {
			pacman_x = 0;
    106e:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <pacman_x>
    1072:	0d c0       	rjmp	.+26     	; 0x108e <move_pacman+0x86>
		}
	} else if(pacman_direction == DIRN_UP) {
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	31 f4       	brne	.+12     	; 0x1084 <move_pacman+0x7c>
		pacman_y--;
    1078:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <pacman_y>
    107c:	81 50       	subi	r24, 0x01	; 1
    107e:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <pacman_y>
    1082:	05 c0       	rjmp	.+10     	; 0x108e <move_pacman+0x86>
	} else {
		pacman_y++;
    1084:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <pacman_y>
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <pacman_y>
	}
	if(cell_contents >= 0) {
    108e:	11 23       	and	r17, r17
    1090:	0c f4       	brge	.+2      	; 0x1094 <move_pacman+0x8c>
    1092:	42 c0       	rjmp	.+132    	; 0x1118 <move_pacman+0x110>
		// We've encountered a ghost - draw both at the location
		// Set the background colour to that of the ghost
		// before we print out the pac-man
		// Note that the variable cell_contents contains the ghost number
		// Lose a life
		if (power_active) {
    1094:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <power_active>
    1098:	88 23       	and	r24, r24
    109a:	f9 f0       	breq	.+62     	; 0x10da <move_pacman+0xd2>
			ghost_x[cell_contents] = GHOST_HOME_X_LEFT;
    109c:	c1 2f       	mov	r28, r17
    109e:	01 2e       	mov	r0, r17
    10a0:	00 0c       	add	r0, r0
    10a2:	dd 0b       	sbc	r29, r29
    10a4:	fe 01       	movw	r30, r28
    10a6:	e7 56       	subi	r30, 0x67	; 103
    10a8:	fd 4f       	sbci	r31, 0xFD	; 253
    10aa:	8c e0       	ldi	r24, 0x0C	; 12
    10ac:	80 83       	st	Z, r24
			ghost_y[cell_contents] = GHOST_HOME_Y;
    10ae:	fe 01       	movw	r30, r28
    10b0:	eb 56       	subi	r30, 0x6B	; 107
    10b2:	fd 4f       	sbci	r31, 0xFD	; 253
    10b4:	8f e0       	ldi	r24, 0x0F	; 15
    10b6:	80 83       	st	Z, r24
			ghost_kills++;
    10b8:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <ghost_kills>
    10bc:	8f 5f       	subi	r24, 0xFF	; 255
    10be:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <ghost_kills>
			determine_ghost_score(ghost_kills);
    10c2:	0e 94 ca 07 	call	0xf94	; 0xf94 <determine_ghost_score>
			disabled_ghosts[cell_contents] = cell_contents;
    10c6:	c4 5f       	subi	r28, 0xF4	; 244
    10c8:	de 4f       	sbci	r29, 0xFE	; 254
    10ca:	18 83       	st	Y, r17
			draw_pacman_at(pacman_x, pacman_y);
    10cc:	60 91 9d 02 	lds	r22, 0x029D	; 0x80029d <pacman_y>
    10d0:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <pacman_x>
    10d4:	0e 94 37 04 	call	0x86e	; 0x86e <draw_pacman_at>
    10d8:	70 c0       	rjmp	.+224    	; 0x11ba <move_pacman+0x1b2>
		} else {
			lives--;
    10da:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <lives>
    10de:	81 50       	subi	r24, 0x01	; 1
    10e0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <lives>
			// Update Life Display
			display_lives();
    10e4:	0e 94 1b 04 	call	0x836	; 0x836 <display_lives>
			// Check if pacman still has lives
			if(lives > 0) {
    10e8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <lives>
    10ec:	88 23       	and	r24, r24
    10ee:	19 f0       	breq	.+6      	; 0x10f6 <move_pacman+0xee>
				reset_entities_pos();
    10f0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <reset_entities_pos>
    10f4:	62 c0       	rjmp	.+196    	; 0x11ba <move_pacman+0x1b2>
				} else {
				set_display_attribute(ghost_colours[cell_contents]);
    10f6:	e1 2f       	mov	r30, r17
    10f8:	11 0f       	add	r17, r17
    10fa:	ff 0b       	sbc	r31, r31
    10fc:	ec 5f       	subi	r30, 0xFC	; 252
    10fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1100:	80 81       	ld	r24, Z
    1102:	0e 94 9d 12 	call	0x253a	; 0x253a <set_display_attribute>
				draw_pacman_at(pacman_x, pacman_y);
    1106:	60 91 9d 02 	lds	r22, 0x029D	; 0x80029d <pacman_y>
    110a:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <pacman_x>
    110e:	0e 94 37 04 	call	0x86e	; 0x86e <draw_pacman_at>
				game_running = 0;
    1112:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <game_running>
    1116:	51 c0       	rjmp	.+162    	; 0x11ba <move_pacman+0x1b2>
			}
		}
	} else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
    1118:	1c 3f       	cpi	r17, 0xFC	; 252
    111a:	31 f5       	brne	.+76     	; 0x1168 <move_pacman+0x160>
// is initialised.
static void eat_pacdot(void) {
	// Update Location to Contain No Dot
	pacdots[pacman_y] |= (0UL<<pacman_x);
	// Update Number of Pacdots
	num_pacdots--;
    111c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <num_pacdots>
    1120:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <num_pacdots+0x1>
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <num_pacdots+0x1>
    112a:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <num_pacdots>
	// Update Current Score
	add_to_score(10);
    112e:	8a e0       	ldi	r24, 0x0A	; 10
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <add_to_score>
	display_score();
    1136:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <display_score>
		return 0;
	}
}

static void display_no_dots(void) {
	move_cursor(50,10);
    113a:	6a e0       	ldi	r22, 0x0A	; 10
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	82 e3       	ldi	r24, 0x32	; 50
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <move_cursor>
	printf_P(PSTR("Number of Pacdots : %d"), num_pacdots);
    1146:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <num_pacdots+0x1>
    114a:	8f 93       	push	r24
    114c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <num_pacdots>
    1150:	8f 93       	push	r24
    1152:	86 e3       	ldi	r24, 0x36	; 54
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	9f 93       	push	r25
    1158:	8f 93       	push	r24
    115a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	29 c0       	rjmp	.+82     	; 0x11ba <move_pacman+0x1b2>
			}
		}
	} else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
			eat_pacdot();
		} else if (cell_contents == CELL_CONTAINS_POWER_PELLET) {
    1168:	1a 3f       	cpi	r17, 0xFA	; 250
    116a:	39 f5       	brne	.+78     	; 0x11ba <move_pacman+0x1b2>
// The pac-man has just arrived in a location occupied by a power pellet. Update
// our array which keeps track of remaining power pellets.
// See initialise_power_pellets() below for information on how the power pellet array
// is initialised.
static void eat_power_pellet(void) {
	if (power_active) {
    116c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <power_active>
    1170:	88 23       	and	r24, r24
    1172:	49 f0       	breq	.+18     	; 0x1186 <move_pacman+0x17e>
		ghost_kills = 0;
    1174:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <ghost_kills>
		disabled_ghosts[0] = -1;
    1178:	ec e0       	ldi	r30, 0x0C	; 12
    117a:	f1 e0       	ldi	r31, 0x01	; 1
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	80 83       	st	Z, r24
		disabled_ghosts[1] = -1;
    1180:	81 83       	std	Z+1, r24	; 0x01
		disabled_ghosts[2] = -1;
    1182:	82 83       	std	Z+2, r24	; 0x02
		disabled_ghosts[3] = -1;
    1184:	83 83       	std	Z+3, r24	; 0x03
	}
	power_active = 1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <power_active>
	// Update Location to Contain No Dot
	power_pellets[pacman_y] |= (0UL<<pacman_x);
	// Update Current Score
	add_to_score(50);
    118c:	82 e3       	ldi	r24, 0x32	; 50
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <add_to_score>
	display_score();
    1194:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <display_score>
	for (int8_t i = 0; i < NUM_GHOSTS; i++) {
		ghost_colours[i] = FG_BLUE;
    1198:	e4 e0       	ldi	r30, 0x04	; 4
    119a:	f1 e0       	ldi	r31, 0x01	; 1
    119c:	82 e2       	ldi	r24, 0x22	; 34
    119e:	80 83       	st	Z, r24
    11a0:	81 83       	std	Z+1, r24	; 0x01
    11a2:	82 83       	std	Z+2, r24	; 0x02
    11a4:	83 83       	std	Z+3, r24	; 0x03
	}
	powered_period = get_current_time();
    11a6:	0e 94 cb 12 	call	0x2596	; 0x2596 <get_current_time>
    11aa:	60 93 b7 03 	sts	0x03B7, r22	; 0x8003b7 <powered_period>
    11ae:	70 93 b8 03 	sts	0x03B8, r23	; 0x8003b8 <powered_period+0x1>
    11b2:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <powered_period+0x2>
    11b6:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <powered_period+0x3>
			eat_pacdot();
		} else if (cell_contents == CELL_CONTAINS_POWER_PELLET) {
			eat_power_pellet();
		}
	}
	draw_pacman_at(pacman_x, pacman_y);
    11ba:	60 91 9d 02 	lds	r22, 0x029D	; 0x80029d <pacman_y>
    11be:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <pacman_x>
    11c2:	0e 94 37 04 	call	0x86e	; 0x86e <draw_pacman_at>
	return 1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <move_pacman+0x1c8>
}

int8_t move_pacman(void) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <move_pacman+0x1c8>
	// YOUR CODE HERE - you may need to alter the code below also
	
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
	if(cell_contents == CELL_IS_WALL) {
		return 0;	// We can't move - wall is straight ahead
    11ce:	80 e0       	ldi	r24, 0x00	; 0
			eat_power_pellet();
		}
	}
	draw_pacman_at(pacman_x, pacman_y);
	return 1;
}
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	08 95       	ret

000011d8 <change_pacman_direction>:
		ghost_x[i] = GHOST_HOME_X_LEFT;
		ghost_y[i] = GHOST_HOME_Y;
	}
}

int8_t change_pacman_direction(int8_t direction) {
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
	if(!game_running) {
    11de:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <game_running>
    11e2:	99 23       	and	r25, r25
    11e4:	a1 f0       	breq	.+40     	; 0x120e <change_pacman_direction+0x36>
    11e6:	c8 2f       	mov	r28, r24
		// Game is over - do nothing
		return 0;
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
    11e8:	10 91 9d 02 	lds	r17, 0x029D	; 0x80029d <pacman_y>
    11ec:	d0 91 9e 02 	lds	r29, 0x029E	; 0x80029e <pacman_x>
    11f0:	48 2f       	mov	r20, r24
    11f2:	61 2f       	mov	r22, r17
    11f4:	8d 2f       	mov	r24, r29
    11f6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <what_is_in_dirn>
	if(cell_contents == CELL_IS_WALL) {
    11fa:	8e 3f       	cpi	r24, 0xFE	; 254
    11fc:	51 f0       	breq	.+20     	; 0x1212 <change_pacman_direction+0x3a>
		// Can't move
		return 0;
	} else {
		pacman_direction = direction;
    11fe:	c0 93 b6 03 	sts	0x03B6, r28	; 0x8003b6 <pacman_direction>
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
    1202:	61 2f       	mov	r22, r17
    1204:	8d 2f       	mov	r24, r29
    1206:	0e 94 37 04 	call	0x86e	; 0x86e <draw_pacman_at>
		return 1;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	03 c0       	rjmp	.+6      	; 0x1214 <change_pacman_direction+0x3c>
}

int8_t change_pacman_direction(int8_t direction) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <change_pacman_direction+0x3c>
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
	if(cell_contents == CELL_IS_WALL) {
		// Can't move
		return 0;
    1212:	80 e0       	ldi	r24, 0x00	; 0
		pacman_direction = direction;
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
		return 1;
	}
}
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	08 95       	ret

0000121c <move_ghost>:

void move_ghost(int8_t ghostnum) {
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
	if(!game_running) {
    122a:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <game_running>
    122e:	99 23       	and	r25, r25
    1230:	09 f4       	brne	.+2      	; 0x1234 <move_ghost+0x18>
    1232:	03 c2       	rjmp	.+1030   	; 0x163a <move_ghost+0x41e>
		// Game is over - do nothing
		return;
	}
	if(disabled_ghosts[ghostnum] == ghostnum) {
    1234:	08 2f       	mov	r16, r24
    1236:	08 2e       	mov	r0, r24
    1238:	00 0c       	add	r0, r0
    123a:	11 0b       	sbc	r17, r17
    123c:	f8 01       	movw	r30, r16
    123e:	e4 5f       	subi	r30, 0xF4	; 244
    1240:	fe 4f       	sbci	r31, 0xFE	; 254
    1242:	20 81       	ld	r18, Z
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	02 17       	cp	r16, r18
    1248:	13 07       	cpc	r17, r19
    124a:	09 f4       	brne	.+2      	; 0x124e <move_ghost+0x32>
    124c:	f6 c1       	rjmp	.+1004   	; 0x163a <move_ghost+0x41e>
    124e:	c8 2f       	mov	r28, r24
// Determine the direction the given ghost (0 to 3) should move in.
// (Each ghost uses a different approach to moving.)
// Return -1 if the ghost can't move (e.g. surrounded by walls and other
// ghosts).
static int8_t determine_ghost_direction_to_move(uint8_t ghostnum) {
	uint8_t x = ghost_x[ghostnum];
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	fc 01       	movw	r30, r24
    1254:	e7 56       	subi	r30, 0x67	; 103
    1256:	fd 4f       	sbci	r31, 0xFD	; 253
    1258:	f0 80       	ld	r15, Z
	uint8_t y = ghost_y[ghostnum];
    125a:	fc 01       	movw	r30, r24
    125c:	eb 56       	subi	r30, 0x6B	; 107
    125e:	fd 4f       	sbci	r31, 0xFD	; 253
    1260:	d0 80       	ld	r13, Z
	uint8_t curdirn = ghost_direction[ghostnum];
    1262:	fc 01       	movw	r30, r24
    1264:	ef 56       	subi	r30, 0x6F	; 111
    1266:	fd 4f       	sbci	r31, 0xFD	; 253
    1268:	d0 81       	ld	r29, Z

	int8_t dirn_options = determine_dirns_ghost_can_move_in(x,y);
    126a:	6d 2d       	mov	r22, r13
    126c:	8f 2d       	mov	r24, r15
    126e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <determine_dirns_ghost_can_move_in>
    1272:	e8 2e       	mov	r14, r24
	if(dirn_options == 0) {
    1274:	88 23       	and	r24, r24
    1276:	09 f4       	brne	.+2      	; 0x127a <move_ghost+0x5e>
    1278:	e0 c1       	rjmp	.+960    	; 0x163a <move_ghost+0x41e>
		// ghost has no options - indicate that the ghost can't move
		return -1;
	}
	
	if(is_ghost_home(x,y)) {
    127a:	6d 2d       	mov	r22, r13
    127c:	8f 2d       	mov	r24, r15
    127e:	0e 94 07 04 	call	0x80e	; 0x80e <is_ghost_home>
    1282:	88 23       	and	r24, r24
    1284:	09 f4       	brne	.+2      	; 0x1288 <move_ghost+0x6c>
    1286:	77 c1       	rjmp	.+750    	; 0x1576 <move_ghost+0x35a>
		// Attempt to move ghost out of home - try UP
		if(dirn_options & (1 << DIRN_UP)) {
    1288:	e1 fe       	sbrs	r14, 1
    128a:	75 c1       	rjmp	.+746    	; 0x1576 <move_ghost+0x35a>
    128c:	c6 c1       	rjmp	.+908    	; 0x161a <move_ghost+0x3fe>
// to move in that will take us closer to the pacman (from DIRN_LEFT to DIRN_DOWN)
// or -1 if we can't move at all. (Note we can only move into cells that are empty
// OR contain a pacdot OR contain the pacman. We can't move into walls or cells 
// that contain ghosts.)
static int8_t direction_to_pacman(uint8_t x, uint8_t y) {
	int8_t delta_x = pacman_x - x;
    128e:	e0 90 9e 02 	lds	r14, 0x029E	; 0x80029e <pacman_x>
    1292:	ef 18       	sub	r14, r15
	int8_t delta_y = pacman_y - y;
    1294:	d0 91 9d 02 	lds	r29, 0x029D	; 0x80029d <pacman_y>
    1298:	dd 19       	sub	r29, r13
	// Work out which direction options are possible
	int8_t dirn_options = determine_dirns_ghost_can_move_in(x, y);
    129a:	6d 2d       	mov	r22, r13
    129c:	8f 2d       	mov	r24, r15
    129e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <determine_dirns_ghost_can_move_in>
	if(dirn_options == 0) {
    12a2:	88 23       	and	r24, r24
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <move_ghost+0x8c>
    12a6:	c9 c1       	rjmp	.+914    	; 0x163a <move_ghost+0x41e>
		// Can't move
		return -1;
	}
	
	if(abs(delta_x) < abs(delta_y)) {
    12a8:	4e 2d       	mov	r20, r14
    12aa:	0e 2c       	mov	r0, r14
    12ac:	00 0c       	add	r0, r0
    12ae:	55 0b       	sbc	r21, r21
    12b0:	55 23       	and	r21, r21
    12b2:	1c f4       	brge	.+6      	; 0x12ba <move_ghost+0x9e>
    12b4:	51 95       	neg	r21
    12b6:	41 95       	neg	r20
    12b8:	51 09       	sbc	r21, r1
    12ba:	2d 2f       	mov	r18, r29
    12bc:	0d 2e       	mov	r0, r29
    12be:	00 0c       	add	r0, r0
    12c0:	33 0b       	sbc	r19, r19
    12c2:	33 23       	and	r19, r19
    12c4:	1c f4       	brge	.+6      	; 0x12cc <move_ghost+0xb0>
    12c6:	31 95       	neg	r19
    12c8:	21 95       	neg	r18
    12ca:	31 09       	sbc	r19, r1
    12cc:	42 17       	cp	r20, r18
    12ce:	53 07       	cpc	r21, r19
    12d0:	4c f4       	brge	.+18     	; 0x12e4 <move_ghost+0xc8>
		// Pacman is further away in y direction - try this direction (up/down) first
		if(delta_y < 0) {
    12d2:	dd 23       	and	r29, r29
    12d4:	1c f4       	brge	.+6      	; 0x12dc <move_ghost+0xc0>
			if(dirn_options & (1 << DIRN_UP)) {
    12d6:	81 ff       	sbrs	r24, 1
    12d8:	05 c0       	rjmp	.+10     	; 0x12e4 <move_ghost+0xc8>
    12da:	9f c1       	rjmp	.+830    	; 0x161a <move_ghost+0x3fe>
				return DIRN_UP;
			}
			// Can't move up - move on to checking left/right
		} else if(delta_y > 0) {
    12dc:	1d 16       	cp	r1, r29
    12de:	14 f4       	brge	.+4      	; 0x12e4 <move_ghost+0xc8>
			if(dirn_options & (1 << DIRN_DOWN)) {
    12e0:	83 fd       	sbrc	r24, 3
    12e2:	6c c1       	rjmp	.+728    	; 0x15bc <move_ghost+0x3a0>
			}
			// Can't move down - move on to checking left/right
		} // else delta_y is 0 - so try left/right
	}
	// Try the x direction 
	if(delta_x < 0) {
    12e4:	ee 20       	and	r14, r14
    12e6:	54 f4       	brge	.+20     	; 0x12fc <move_ghost+0xe0>
		if(dirn_options & (1 << DIRN_LEFT)) {
    12e8:	80 fd       	sbrc	r24, 0
    12ea:	78 c1       	rjmp	.+752    	; 0x15dc <move_ghost+0x3c0>
			return DIRN_LEFT;
		}
		// Pacman is left but we can't move left - try up or down
		if(delta_y < 0) {
    12ec:	dd 23       	and	r29, r29
    12ee:	1c f4       	brge	.+6      	; 0x12f6 <move_ghost+0xda>
			if(dirn_options & (1 << DIRN_UP)) {
    12f0:	81 ff       	sbrs	r24, 1
    12f2:	60 c1       	rjmp	.+704    	; 0x15b4 <move_ghost+0x398>
    12f4:	92 c1       	rjmp	.+804    	; 0x161a <move_ghost+0x3fe>
				return DIRN_UP;
			}
		} else if(dirn_options & (1 << DIRN_DOWN)) {
    12f6:	83 fd       	sbrc	r24, 3
    12f8:	61 c1       	rjmp	.+706    	; 0x15bc <move_ghost+0x3a0>
    12fa:	5c c1       	rjmp	.+696    	; 0x15b4 <move_ghost+0x398>
			return DIRN_DOWN;
		}
	} else {
		if(dirn_options & (1 << DIRN_RIGHT)) {
    12fc:	82 fd       	sbrc	r24, 2
    12fe:	7d c1       	rjmp	.+762    	; 0x15fa <move_ghost+0x3de>
			return DIRN_RIGHT;
		}
		// Pacman is right (or directly above/below) but we can't move right - try up or down
		if(delta_y < 0) {
    1300:	dd 23       	and	r29, r29
    1302:	1c f4       	brge	.+6      	; 0x130a <move_ghost+0xee>
			if(dirn_options & (1 << DIRN_UP)) {
    1304:	81 ff       	sbrs	r24, 1
    1306:	46 c1       	rjmp	.+652    	; 0x1594 <move_ghost+0x378>
    1308:	88 c1       	rjmp	.+784    	; 0x161a <move_ghost+0x3fe>
				return DIRN_UP;
			} 
		} else if(dirn_options & (1 << DIRN_DOWN)) {
    130a:	83 fd       	sbrc	r24, 3
    130c:	57 c1       	rjmp	.+686    	; 0x15bc <move_ghost+0x3a0>
    130e:	42 c1       	rjmp	.+644    	; 0x1594 <move_ghost+0x378>
		draw_pacman_at(pacman_x, pacman_y);
		return 1;
	}
}

void move_ghost(int8_t ghostnum) {
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    1314:	ab 01       	movw	r20, r22
    1316:	08 2e       	mov	r0, r24
    1318:	02 c0       	rjmp	.+4      	; 0x131e <move_ghost+0x102>
    131a:	55 95       	asr	r21
    131c:	47 95       	ror	r20
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <move_ghost+0xfe>
    1322:	40 fd       	sbrc	r20, 0
    1324:	a0 c0       	rjmp	.+320    	; 0x1466 <move_ghost+0x24a>
    1326:	01 96       	adiw	r24, 0x01	; 1
		} else if(dirn_options & (1 << DIRN_DOWN)) {
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	91 05       	cpc	r25, r1
    132c:	99 f7       	brne	.-26     	; 0x1314 <move_ghost+0xf8>
    132e:	85 c1       	rjmp	.+778    	; 0x163a <move_ghost+0x41e>
			break;
		case 1:
		case 3:
			// Ghosts 1 and 3 will always try to keep moving in their current
			// direction if possible
			if(dirn_options & (1<<curdirn)) {
    1330:	0e 2c       	mov	r0, r14
    1332:	00 0c       	add	r0, r0
    1334:	ff 08       	sbc	r15, r15
    1336:	8d 2f       	mov	r24, r29
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	97 01       	movw	r18, r14
    133c:	0d 2e       	mov	r0, r29
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <move_ghost+0x128>
    1340:	35 95       	asr	r19
    1342:	27 95       	ror	r18
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <move_ghost+0x124>
    1348:	20 fd       	sbrc	r18, 0
    134a:	94 c0       	rjmp	.+296    	; 0x1474 <move_ghost+0x258>
				// Current direction is valid - just keep going
				return curdirn;
			} else {
				// Can't move in current direction - try right angles
				int8_t new_dirn = (curdirn + ghostnum)%4;
    134c:	dc 0f       	add	r29, r28
    134e:	d3 70       	andi	r29, 0x03	; 3
				if(dirn_options & (1 << new_dirn)) {
    1350:	2d 2f       	mov	r18, r29
    1352:	0d 2e       	mov	r0, r29
    1354:	00 0c       	add	r0, r0
    1356:	33 0b       	sbc	r19, r19
    1358:	a7 01       	movw	r20, r14
    135a:	0d 2e       	mov	r0, r29
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <move_ghost+0x146>
    135e:	55 95       	asr	r21
    1360:	47 95       	ror	r20
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <move_ghost+0x142>
    1366:	40 fd       	sbrc	r20, 0
    1368:	85 c0       	rjmp	.+266    	; 0x1474 <move_ghost+0x258>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
    136a:	2e 5f       	subi	r18, 0xFE	; 254
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	23 70       	andi	r18, 0x03	; 3
    1370:	30 78       	andi	r19, 0x80	; 128
    1372:	33 23       	and	r19, r19
    1374:	34 f4       	brge	.+12     	; 0x1382 <move_ghost+0x166>
    1376:	21 50       	subi	r18, 0x01	; 1
    1378:	31 09       	sbc	r19, r1
    137a:	2c 6f       	ori	r18, 0xFC	; 252
    137c:	3f 6f       	ori	r19, 0xFF	; 255
    137e:	2f 5f       	subi	r18, 0xFF	; 255
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << new_dirn)) {
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <move_ghost+0x16e>
    1386:	f5 94       	asr	r15
    1388:	e7 94       	ror	r14
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <move_ghost+0x16a>
    138e:	e0 fc       	sbrc	r14, 0
    1390:	6c c0       	rjmp	.+216    	; 0x146a <move_ghost+0x24e>
						return new_dirn;
					} else {
						// Neither of the right angles directions worked
						// - just go back in the opposite direction 
						return (curdirn + 2)%4;
    1392:	9c 01       	movw	r18, r24
    1394:	2e 5f       	subi	r18, 0xFE	; 254
    1396:	3f 4f       	sbci	r19, 0xFF	; 255
    1398:	23 70       	andi	r18, 0x03	; 3
    139a:	30 78       	andi	r19, 0x80	; 128
    139c:	33 23       	and	r19, r19
    139e:	34 f4       	brge	.+12     	; 0x13ac <move_ghost+0x190>
    13a0:	21 50       	subi	r18, 0x01	; 1
    13a2:	31 09       	sbc	r19, r1
    13a4:	2c 6f       	ori	r18, 0xFC	; 252
    13a6:	3f 6f       	ori	r19, 0xFF	; 255
    13a8:	2f 5f       	subi	r18, 0xFF	; 255
    13aa:	3f 4f       	sbci	r19, 0xFF	; 255
    13ac:	d2 2f       	mov	r29, r18
    13ae:	62 c0       	rjmp	.+196    	; 0x1474 <move_ghost+0x258>
				}
			}
			break;	
		case 2:
			// Ghost 2 will try to move in the same direction as the pacman is moving
			if(dirn_options & (1 << pacman_direction)) {
    13b0:	0e 2c       	mov	r0, r14
    13b2:	00 0c       	add	r0, r0
    13b4:	ff 08       	sbc	r15, r15
    13b6:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <pacman_direction>
    13ba:	c7 01       	movw	r24, r14
    13bc:	02 2e       	mov	r0, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <move_ghost+0x1a8>
    13c0:	95 95       	asr	r25
    13c2:	87 95       	ror	r24
    13c4:	0a 94       	dec	r0
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <move_ghost+0x1a4>
    13c8:	80 ff       	sbrs	r24, 0
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <move_ghost+0x1b4>
				// That direction is one of the valid options
				return pacman_direction;
    13cc:	d2 2f       	mov	r29, r18
    13ce:	52 c0       	rjmp	.+164    	; 0x1474 <move_ghost+0x258>
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
    13d0:	0e 94 7d 14 	call	0x28fa	; 0x28fa <random>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	83 70       	andi	r24, 0x03	; 3
    13da:	99 27       	eor	r25, r25
    13dc:	aa 27       	eor	r26, r26
    13de:	b0 78       	andi	r27, 0x80	; 128
    13e0:	bb 23       	and	r27, r27
    13e2:	54 f4       	brge	.+20     	; 0x13f8 <move_ghost+0x1dc>
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	a1 09       	sbc	r26, r1
    13e8:	b1 09       	sbc	r27, r1
    13ea:	8c 6f       	ori	r24, 0xFC	; 252
    13ec:	9f 6f       	ori	r25, 0xFF	; 255
    13ee:	af 6f       	ori	r26, 0xFF	; 255
    13f0:	bf 6f       	ori	r27, 0xFF	; 255
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	a1 1d       	adc	r26, r1
    13f6:	b1 1d       	adc	r27, r1
    13f8:	48 2f       	mov	r20, r24
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    13fa:	68 2f       	mov	r22, r24
    13fc:	88 0f       	add	r24, r24
    13fe:	77 0b       	sbc	r23, r23
    1400:	9b 01       	movw	r18, r22
    1402:	23 70       	andi	r18, 0x03	; 3
    1404:	30 78       	andi	r19, 0x80	; 128
    1406:	33 23       	and	r19, r19
    1408:	34 f4       	brge	.+12     	; 0x1416 <move_ghost+0x1fa>
    140a:	21 50       	subi	r18, 0x01	; 1
    140c:	31 09       	sbc	r19, r1
    140e:	2c 6f       	ori	r18, 0xFC	; 252
    1410:	3f 6f       	ori	r19, 0xFF	; 255
    1412:	2f 5f       	subi	r18, 0xFF	; 255
    1414:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << direction_to_check)) {
    1416:	c7 01       	movw	r24, r14
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <move_ghost+0x204>
    141c:	95 95       	asr	r25
    141e:	87 95       	ror	r24
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <move_ghost+0x200>
    1424:	80 fd       	sbrc	r24, 0
    1426:	23 c0       	rjmp	.+70     	; 0x146e <move_ghost+0x252>
    1428:	6f 5f       	subi	r22, 0xFF	; 255
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	04 2e       	mov	r0, r20
    142e:	00 0c       	add	r0, r0
    1430:	55 0b       	sbc	r21, r21
    1432:	4c 5f       	subi	r20, 0xFC	; 252
    1434:	5f 4f       	sbci	r21, 0xFF	; 255
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    1436:	cb 01       	movw	r24, r22
    1438:	83 70       	andi	r24, 0x03	; 3
    143a:	90 78       	andi	r25, 0x80	; 128
    143c:	99 23       	and	r25, r25
    143e:	24 f4       	brge	.+8      	; 0x1448 <move_ghost+0x22c>
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	8c 6f       	ori	r24, 0xFC	; 252
    1444:	9f 6f       	ori	r25, 0xFF	; 255
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	28 2f       	mov	r18, r24
					if(dirn_options & (1 << direction_to_check)) {
    144a:	f7 01       	movw	r30, r14
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <move_ghost+0x236>
    144e:	f5 95       	asr	r31
    1450:	e7 95       	ror	r30
    1452:	8a 95       	dec	r24
    1454:	e2 f7       	brpl	.-8      	; 0x144e <move_ghost+0x232>
    1456:	e0 fd       	sbrc	r30, 0
    1458:	0c c0       	rjmp	.+24     	; 0x1472 <move_ghost+0x256>
    145a:	6f 5f       	subi	r22, 0xFF	; 255
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
				// That direction is one of the valid options
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
    145e:	64 17       	cp	r22, r20
    1460:	75 07       	cpc	r23, r21
    1462:	49 f7       	brne	.-46     	; 0x1436 <move_ghost+0x21a>
    1464:	ea c0       	rjmp	.+468    	; 0x163a <move_ghost+0x41e>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    1466:	d8 2f       	mov	r29, r24
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <move_ghost+0x258>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
					if(dirn_options & (1 << new_dirn)) {
						return new_dirn;
    146a:	d2 2f       	mov	r29, r18
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <move_ghost+0x258>
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    146e:	d2 2f       	mov	r29, r18
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <move_ghost+0x258>
    1472:	d2 2f       	mov	r29, r18
	if(disabled_ghosts[ghostnum] == ghostnum) {
		// Ghost has been eaten - do nothing
		return;
	}
	int8_t dirn_to_move = determine_ghost_direction_to_move(ghostnum);
	if(dirn_to_move < 0) {
    1474:	dd 23       	and	r29, r29
    1476:	0c f4       	brge	.+2      	; 0x147a <move_ghost+0x25e>
    1478:	e0 c0       	rjmp	.+448    	; 0x163a <move_ghost+0x41e>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    147a:	f8 01       	movw	r30, r16
    147c:	eb 56       	subi	r30, 0x6B	; 107
    147e:	fd 4f       	sbci	r31, 0xFD	; 253
    1480:	60 81       	ld	r22, Z
    1482:	f8 01       	movw	r30, r16
    1484:	e7 56       	subi	r30, 0x67	; 103
    1486:	fd 4f       	sbci	r31, 0xFD	; 253
    1488:	80 81       	ld	r24, Z
    148a:	0e 94 ad 04 	call	0x95a	; 0x95a <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    148e:	f8 01       	movw	r30, r16
    1490:	ef 56       	subi	r30, 0x6F	; 111
    1492:	fd 4f       	sbci	r31, 0xFD	; 253
    1494:	d0 83       	st	Z, r29
	// Update the ghost's location
	switch(dirn_to_move) {
    1496:	d1 30       	cpi	r29, 0x01	; 1
    1498:	b9 f0       	breq	.+46     	; 0x14c8 <move_ghost+0x2ac>
    149a:	1c f4       	brge	.+6      	; 0x14a2 <move_ghost+0x286>
    149c:	dd 23       	and	r29, r29
    149e:	31 f0       	breq	.+12     	; 0x14ac <move_ghost+0x290>
    14a0:	20 c0       	rjmp	.+64     	; 0x14e2 <move_ghost+0x2c6>
    14a2:	d2 30       	cpi	r29, 0x02	; 2
    14a4:	51 f0       	breq	.+20     	; 0x14ba <move_ghost+0x29e>
    14a6:	d3 30       	cpi	r29, 0x03	; 3
    14a8:	b1 f0       	breq	.+44     	; 0x14d6 <move_ghost+0x2ba>
    14aa:	1b c0       	rjmp	.+54     	; 0x14e2 <move_ghost+0x2c6>
		case DIRN_LEFT:
			ghost_x[ghostnum]--;
    14ac:	f8 01       	movw	r30, r16
    14ae:	e7 56       	subi	r30, 0x67	; 103
    14b0:	fd 4f       	sbci	r31, 0xFD	; 253
    14b2:	80 81       	ld	r24, Z
    14b4:	81 50       	subi	r24, 0x01	; 1
    14b6:	80 83       	st	Z, r24
			break;
    14b8:	14 c0       	rjmp	.+40     	; 0x14e2 <move_ghost+0x2c6>
		case DIRN_RIGHT:
			ghost_x[ghostnum]++;
    14ba:	f8 01       	movw	r30, r16
    14bc:	e7 56       	subi	r30, 0x67	; 103
    14be:	fd 4f       	sbci	r31, 0xFD	; 253
    14c0:	80 81       	ld	r24, Z
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	80 83       	st	Z, r24
			break;
    14c6:	0d c0       	rjmp	.+26     	; 0x14e2 <move_ghost+0x2c6>
		case DIRN_UP:
			ghost_y[ghostnum]--;
    14c8:	f8 01       	movw	r30, r16
    14ca:	eb 56       	subi	r30, 0x6B	; 107
    14cc:	fd 4f       	sbci	r31, 0xFD	; 253
    14ce:	80 81       	ld	r24, Z
    14d0:	81 50       	subi	r24, 0x01	; 1
    14d2:	80 83       	st	Z, r24
			break;
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <move_ghost+0x2c6>
		case DIRN_DOWN:
			ghost_y[ghostnum]++;
    14d6:	f8 01       	movw	r30, r16
    14d8:	eb 56       	subi	r30, 0x6B	; 107
    14da:	fd 4f       	sbci	r31, 0xFD	; 253
    14dc:	80 81       	ld	r24, Z
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	80 83       	st	Z, r24
			break;
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
    14e2:	f8 01       	movw	r30, r16
    14e4:	eb 56       	subi	r30, 0x6B	; 107
    14e6:	fd 4f       	sbci	r31, 0xFD	; 253
    14e8:	40 81       	ld	r20, Z
    14ea:	f8 01       	movw	r30, r16
    14ec:	e7 56       	subi	r30, 0x67	; 103
    14ee:	fd 4f       	sbci	r31, 0xFD	; 253
    14f0:	60 81       	ld	r22, Z
}

// is_pacman_at() returns true(1) if the pacman is at the given 
// game location (x,y), 0 otherwise
static int8_t is_pacman_at(uint8_t x, uint8_t y) {
	return (x == pacman_x && y == pacman_y);
    14f2:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <pacman_x>
    14f6:	68 13       	cpse	r22, r24
    14f8:	54 c0       	rjmp	.+168    	; 0x15a2 <move_ghost+0x386>
    14fa:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <pacman_y>
    14fe:	48 13       	cpse	r20, r24
    1500:	50 c0       	rjmp	.+160    	; 0x15a2 <move_ghost+0x386>
    1502:	53 c0       	rjmp	.+166    	; 0x15aa <move_ghost+0x38e>
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
		if (power_active) {
			ghost_x[ghostnum] = GHOST_HOME_X_LEFT;
    1504:	f8 01       	movw	r30, r16
    1506:	e7 56       	subi	r30, 0x67	; 103
    1508:	fd 4f       	sbci	r31, 0xFD	; 253
    150a:	8c e0       	ldi	r24, 0x0C	; 12
    150c:	80 83       	st	Z, r24
			ghost_y[ghostnum] = GHOST_HOME_Y;
    150e:	f8 01       	movw	r30, r16
    1510:	eb 56       	subi	r30, 0x6B	; 107
    1512:	fd 4f       	sbci	r31, 0xFD	; 253
    1514:	8f e0       	ldi	r24, 0x0F	; 15
    1516:	80 83       	st	Z, r24
			ghost_kills++;
    1518:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <ghost_kills>
    151c:	8f 5f       	subi	r24, 0xFF	; 255
    151e:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <ghost_kills>
			determine_ghost_score(ghost_kills);
    1522:	0e 94 ca 07 	call	0xf94	; 0xf94 <determine_ghost_score>
			disabled_ghosts[ghostnum] = ghostnum;
    1526:	f8 01       	movw	r30, r16
    1528:	e4 5f       	subi	r30, 0xF4	; 244
    152a:	fe 4f       	sbci	r31, 0xFE	; 254
    152c:	c0 83       	st	Z, r28
    152e:	20 c0       	rjmp	.+64     	; 0x1570 <move_ghost+0x354>
		} else {
			// Update Lives
			lives--;
    1530:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <lives>
    1534:	81 50       	subi	r24, 0x01	; 1
    1536:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <lives>
			// Update Life Display
			display_lives();
    153a:	0e 94 1b 04 	call	0x836	; 0x836 <display_lives>
			// Check if pacman still has lives
			if(lives > 0) {
    153e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <lives>
    1542:	88 23       	and	r24, r24
    1544:	19 f0       	breq	.+6      	; 0x154c <move_ghost+0x330>
				reset_entities_pos();
    1546:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <reset_entities_pos>
    154a:	12 c0       	rjmp	.+36     	; 0x1570 <move_ghost+0x354>
			} else {
			game_running = 0;
    154c:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <game_running>
			set_display_attribute(ghost_colours[ghostnum]);
    1550:	f8 01       	movw	r30, r16
    1552:	ec 5f       	subi	r30, 0xFC	; 252
    1554:	fe 4f       	sbci	r31, 0xFE	; 254
    1556:	80 81       	ld	r24, Z
    1558:	0e 94 9d 12 	call	0x253a	; 0x253a <set_display_attribute>
			draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    155c:	d8 01       	movw	r26, r16
    155e:	ab 56       	subi	r26, 0x6B	; 107
    1560:	bd 4f       	sbci	r27, 0xFD	; 253
    1562:	f8 01       	movw	r30, r16
    1564:	e7 56       	subi	r30, 0x67	; 103
    1566:	fd 4f       	sbci	r31, 0xFD	; 253
    1568:	6c 91       	ld	r22, X
    156a:	80 81       	ld	r24, Z
    156c:	0e 94 37 04 	call	0x86e	; 0x86e <draw_pacman_at>
			}
		}
	} else {
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
	}
	normal_display_mode();
    1570:	0e 94 8b 12 	call	0x2516	; 0x2516 <normal_display_mode>
    1574:	62 c0       	rjmp	.+196    	; 0x163a <move_ghost+0x41e>
		if(dirn_options & (1 << DIRN_UP)) {
			return DIRN_UP;
		}
		// If this doesn't work, we'll try the usual algorithm
	}
	switch(ghostnum) {
    1576:	c1 30       	cpi	r28, 0x01	; 1
    1578:	09 f4       	brne	.+2      	; 0x157c <move_ghost+0x360>
    157a:	da ce       	rjmp	.-588    	; 0x1330 <move_ghost+0x114>
    157c:	24 f4       	brge	.+8      	; 0x1586 <move_ghost+0x36a>
    157e:	cc 23       	and	r28, r28
    1580:	09 f4       	brne	.+2      	; 0x1584 <move_ghost+0x368>
    1582:	85 ce       	rjmp	.-758    	; 0x128e <move_ghost+0x72>
    1584:	5a c0       	rjmp	.+180    	; 0x163a <move_ghost+0x41e>
    1586:	c2 30       	cpi	r28, 0x02	; 2
    1588:	09 f4       	brne	.+2      	; 0x158c <move_ghost+0x370>
    158a:	12 cf       	rjmp	.-476    	; 0x13b0 <move_ghost+0x194>
    158c:	c3 30       	cpi	r28, 0x03	; 3
    158e:	09 f4       	brne	.+2      	; 0x1592 <move_ghost+0x376>
    1590:	cf ce       	rjmp	.-610    	; 0x1330 <move_ghost+0x114>
    1592:	53 c0       	rjmp	.+166    	; 0x163a <move_ghost+0x41e>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    1594:	68 2f       	mov	r22, r24
    1596:	08 2e       	mov	r0, r24
    1598:	00 0c       	add	r0, r0
    159a:	77 0b       	sbc	r23, r23
    159c:	80 ff       	sbrs	r24, 0
    159e:	b8 ce       	rjmp	.-656    	; 0x1310 <move_ghost+0xf4>
    15a0:	1d c0       	rjmp	.+58     	; 0x15dc <move_ghost+0x3c0>
			set_display_attribute(ghost_colours[ghostnum]);
			draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
			}
		}
	} else {
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
    15a2:	8c 2f       	mov	r24, r28
    15a4:	0e 94 59 04 	call	0x8b2	; 0x8b2 <draw_ghost_at>
    15a8:	e3 cf       	rjmp	.-58     	; 0x1570 <move_ghost+0x354>
			break;
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
		if (power_active) {
    15aa:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <power_active>
    15ae:	81 11       	cpse	r24, r1
    15b0:	a9 cf       	rjmp	.-174    	; 0x1504 <move_ghost+0x2e8>
    15b2:	be cf       	rjmp	.-132    	; 0x1530 <move_ghost+0x314>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    15b4:	68 2f       	mov	r22, r24
    15b6:	88 0f       	add	r24, r24
    15b8:	77 0b       	sbc	r23, r23
    15ba:	aa ce       	rjmp	.-684    	; 0x1310 <move_ghost+0xf4>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    15bc:	f8 01       	movw	r30, r16
    15be:	eb 56       	subi	r30, 0x6B	; 107
    15c0:	fd 4f       	sbci	r31, 0xFD	; 253
    15c2:	60 81       	ld	r22, Z
    15c4:	f8 01       	movw	r30, r16
    15c6:	e7 56       	subi	r30, 0x67	; 103
    15c8:	fd 4f       	sbci	r31, 0xFD	; 253
    15ca:	80 81       	ld	r24, Z
    15cc:	0e 94 ad 04 	call	0x95a	; 0x95a <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	f8 01       	movw	r30, r16
    15d4:	ef 56       	subi	r30, 0x6F	; 111
    15d6:	fd 4f       	sbci	r31, 0xFD	; 253
    15d8:	80 83       	st	Z, r24
    15da:	7d cf       	rjmp	.-262    	; 0x14d6 <move_ghost+0x2ba>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    15dc:	f8 01       	movw	r30, r16
    15de:	eb 56       	subi	r30, 0x6B	; 107
    15e0:	fd 4f       	sbci	r31, 0xFD	; 253
    15e2:	60 81       	ld	r22, Z
    15e4:	f8 01       	movw	r30, r16
    15e6:	e7 56       	subi	r30, 0x67	; 103
    15e8:	fd 4f       	sbci	r31, 0xFD	; 253
    15ea:	80 81       	ld	r24, Z
    15ec:	0e 94 ad 04 	call	0x95a	; 0x95a <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    15f0:	f8 01       	movw	r30, r16
    15f2:	ef 56       	subi	r30, 0x6F	; 111
    15f4:	fd 4f       	sbci	r31, 0xFD	; 253
    15f6:	10 82       	st	Z, r1
    15f8:	59 cf       	rjmp	.-334    	; 0x14ac <move_ghost+0x290>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    15fa:	f8 01       	movw	r30, r16
    15fc:	eb 56       	subi	r30, 0x6B	; 107
    15fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1600:	60 81       	ld	r22, Z
    1602:	f8 01       	movw	r30, r16
    1604:	e7 56       	subi	r30, 0x67	; 103
    1606:	fd 4f       	sbci	r31, 0xFD	; 253
    1608:	80 81       	ld	r24, Z
    160a:	0e 94 ad 04 	call	0x95a	; 0x95a <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	f8 01       	movw	r30, r16
    1612:	ef 56       	subi	r30, 0x6F	; 111
    1614:	fd 4f       	sbci	r31, 0xFD	; 253
    1616:	80 83       	st	Z, r24
    1618:	50 cf       	rjmp	.-352    	; 0x14ba <move_ghost+0x29e>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    161a:	f8 01       	movw	r30, r16
    161c:	eb 56       	subi	r30, 0x6B	; 107
    161e:	fd 4f       	sbci	r31, 0xFD	; 253
    1620:	60 81       	ld	r22, Z
    1622:	f8 01       	movw	r30, r16
    1624:	e7 56       	subi	r30, 0x67	; 103
    1626:	fd 4f       	sbci	r31, 0xFD	; 253
    1628:	80 81       	ld	r24, Z
    162a:	0e 94 ad 04 	call	0x95a	; 0x95a <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	f8 01       	movw	r30, r16
    1632:	ef 56       	subi	r30, 0x6F	; 111
    1634:	fd 4f       	sbci	r31, 0xFD	; 253
    1636:	80 83       	st	Z, r24
    1638:	47 cf       	rjmp	.-370    	; 0x14c8 <move_ghost+0x2ac>
		}
	} else {
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
	}
	normal_display_mode();
}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	df 90       	pop	r13
    1648:	08 95       	ret

0000164a <is_game_over>:

int8_t is_game_over(void) {
	return !game_running;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <game_running>
    1650:	91 11       	cpse	r25, r1
    1652:	80 e0       	ldi	r24, 0x00	; 0
}
    1654:	08 95       	ret

00001656 <is_level_complete>:

int8_t is_level_complete(void) {
	return (num_pacdots == 0);
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <num_pacdots>
    165c:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <num_pacdots+0x1>
    1660:	23 2b       	or	r18, r19
    1662:	09 f0       	breq	.+2      	; 0x1666 <is_level_complete+0x10>
    1664:	80 e0       	ldi	r24, 0x00	; 0
}
    1666:	08 95       	ret

00001668 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    1668:	80 e8       	ldi	r24, 0x80	; 128
    166a:	0e 94 4c 12 	call	0x2498	; 0x2498 <spi_setup_master>
    166e:	08 95       	ret

00001670 <ledmatrix_update_column>:
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	80 31       	cpi	r24, 0x10	; 16
    167a:	90 f4       	brcc	.+36     	; 0x16a0 <ledmatrix_update_column+0x30>
    167c:	8b 01       	movw	r16, r22
    167e:	c8 2f       	mov	r28, r24
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_send_byte>
    1686:	8c 2f       	mov	r24, r28
    1688:	8f 70       	andi	r24, 0x0F	; 15
    168a:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_send_byte>
    168e:	e8 01       	movw	r28, r16
    1690:	08 5f       	subi	r16, 0xF8	; 248
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	89 91       	ld	r24, Y+
    1696:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_send_byte>
    169a:	c0 17       	cp	r28, r16
    169c:	d1 07       	cpc	r29, r17
    169e:	d1 f7       	brne	.-12     	; 0x1694 <ledmatrix_update_column+0x24>
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	08 95       	ret

000016aa <ledmatrix_shift_display_left>:
    16aa:	84 e0       	ldi	r24, 0x04	; 4
    16ac:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_send_byte>
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_send_byte>
    16b6:	08 95       	ret

000016b8 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    16b8:	8f e0       	ldi	r24, 0x0F	; 15
    16ba:	0e 94 74 12 	call	0x24e8	; 0x24e8 <spi_send_byte>
    16be:	08 95       	ret

000016c0 <initialise_hardware>:
		printf_P(PSTR("Save Data Not Available"));
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
    16c0:	0e 94 34 0b 	call	0x1668	; 0x1668 <ledmatrix_setup>
	init_button_interrupts();
    16c4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	7b e4       	ldi	r23, 0x4B	; 75
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 64 11 	call	0x22c8	; 0x22c8 <init_serial_stdio>
	
	init_timer0();
    16d6:	0e 94 b3 12 	call	0x2566	; 0x2566 <init_timer0>
	
	// Turn on global interrupts
	sei();
    16da:	78 94       	sei
    16dc:	08 95       	ret

000016de <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
    16de:	0e 94 94 12 	call	0x2528	; 0x2528 <clear_terminal>
	move_cursor(10,10);
    16e2:	6a e0       	ldi	r22, 0x0A	; 10
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	8a e0       	ldi	r24, 0x0A	; 10
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <move_cursor>
	printf_P(PSTR("Pac-Man"));
    16ee:	87 eb       	ldi	r24, 0xB7	; 183
    16f0:	95 e0       	ldi	r25, 0x05	; 5
    16f2:	9f 93       	push	r25
    16f4:	8f 93       	push	r24
    16f6:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>
	move_cursor(10,12);
    16fa:	6c e0       	ldi	r22, 0x0C	; 12
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	8a e0       	ldi	r24, 0x0A	; 10
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <move_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Joel Foster - 45820384"));
    1706:	87 e8       	ldi	r24, 0x87	; 135
    1708:	95 e0       	ldi	r25, 0x05	; 5
    170a:	9f 93       	push	r25
    170c:	8f 93       	push	r24
    170e:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>

	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    1712:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <ledmatrix_clear>
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("PACMAN 45820384", COLOUR_YELLOW);
    171e:	6f ed       	ldi	r22, 0xDF	; 223
    1720:	8e e7       	ldi	r24, 0x7E	; 126
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	0e 94 2d 10 	call	0x205a	; 0x205a <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
    1728:	10 c0       	rjmp	.+32     	; 0x174a <splash_screen+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    172a:	2f e7       	ldi	r18, 0x7F	; 127
    172c:	89 ea       	ldi	r24, 0xA9	; 169
    172e:	93 e0       	ldi	r25, 0x03	; 3
    1730:	21 50       	subi	r18, 0x01	; 1
    1732:	80 40       	sbci	r24, 0x00	; 0
    1734:	90 40       	sbci	r25, 0x00	; 0
    1736:	e1 f7       	brne	.-8      	; 0x1730 <splash_screen+0x52>
    1738:	00 c0       	rjmp	.+0      	; 0x173a <splash_screen+0x5c>
    173a:	00 00       	nop
			_delay_ms(150);
			if(button_pushed() != NO_BUTTON_PUSHED) {
    173c:	0e 94 8c 03 	call	0x718	; 0x718 <button_pushed>
    1740:	8f 3f       	cpi	r24, 0xFF	; 255
    1742:	19 f0       	breq	.+6      	; 0x174a <splash_screen+0x6c>
				ledmatrix_clear();
    1744:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <ledmatrix_clear>
				return;
    1748:	08 95       	ret
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("PACMAN 45820384", COLOUR_YELLOW);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
    174a:	0e 94 3c 10 	call	0x2078	; 0x2078 <scroll_display>
    174e:	81 11       	cpse	r24, r1
    1750:	ec cf       	rjmp	.-40     	; 0x172a <splash_screen+0x4c>
    1752:	e5 cf       	rjmp	.-54     	; 0x171e <splash_screen+0x40>

00001754 <get_resting_voltage>:
	}
}

void get_resting_voltage(void) {
	// Set the ADC mux to choose ADC0 if x_or_y is 0, ADC1 if x_or_y is 1
	if(x_or_y == 0) {
    1754:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <x_or_y>
    1758:	81 11       	cpse	r24, r1
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <get_resting_voltage+0x14>
		ADMUX &= ~1;
    175c:	ec e7       	ldi	r30, 0x7C	; 124
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	8e 7f       	andi	r24, 0xFE	; 254
    1764:	80 83       	st	Z, r24
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <get_resting_voltage+0x1e>
		} else {
		ADMUX |= 1;
    1768:	ec e7       	ldi	r30, 0x7C	; 124
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	81 60       	ori	r24, 0x01	; 1
    1770:	80 83       	st	Z, r24
	}
	// Start the ADC conversion
	ADCSRA |= (1<<ADSC);
    1772:	ea e7       	ldi	r30, 0x7A	; 122
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	80 64       	ori	r24, 0x40	; 64
    177a:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC)) {
    177c:	80 81       	ld	r24, Z
    177e:	86 fd       	sbrc	r24, 6
    1780:	fd cf       	rjmp	.-6      	; 0x177c <get_resting_voltage+0x28>
		; /* Wait until conversion finished */
	}
	value = ADC; // read the value
    1782:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1786:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    178a:	30 93 cc 03 	sts	0x03CC, r19	; 0x8003cc <value+0x1>
    178e:	20 93 cb 03 	sts	0x03CB, r18	; 0x8003cb <value>
	if(x_or_y == 0) {
    1792:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <x_or_y>
    1796:	91 11       	cpse	r25, r1
    1798:	05 c0       	rjmp	.+10     	; 0x17a4 <get_resting_voltage+0x50>
		resting_x = value;
    179a:	30 93 ca 03 	sts	0x03CA, r19	; 0x8003ca <resting_x+0x1>
    179e:	20 93 c9 03 	sts	0x03C9, r18	; 0x8003c9 <resting_x>
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <get_resting_voltage+0x58>
		} else {
		resting_y = value;
    17a4:	30 93 c6 03 	sts	0x03C6, r19	; 0x8003c6 <resting_y+0x1>
    17a8:	20 93 c5 03 	sts	0x03C5, r18	; 0x8003c5 <resting_y>
	}
	// Next time through the loop, do the other direction
	x_or_y ^= 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	89 27       	eor	r24, r25
    17b0:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <x_or_y>
    17b4:	08 95       	ret

000017b6 <new_game>:
}

void new_game(void) {
	// Initialise the game and display
	initialise_game();
    17b6:	0e 94 c2 07 	call	0xf84	; 0xf84 <initialise_game>
	
	// Initialise the score
	init_score();
    17ba:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <init_score>
	
	// Get Joystick Resting Voltages
	get_resting_voltage();
    17be:	0e 94 aa 0b 	call	0x1754	; 0x1754 <get_resting_voltage>
	get_resting_voltage();
    17c2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <get_resting_voltage>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    17c6:	0e 94 8c 03 	call	0x718	; 0x718 <button_pushed>
	clear_serial_input_buffer();
    17ca:	0e 94 b2 11 	call	0x2364	; 0x2364 <clear_serial_input_buffer>
    17ce:	08 95       	ret

000017d0 <valid_direction>:
}

void valid_direction(void) {
	int8_t cell_contents;
	joystick_rest = 0;
    17d0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <joystick_rest>
	if(x > resting_x) {
    17d4:	20 91 c3 03 	lds	r18, 0x03C3	; 0x8003c3 <x>
    17d8:	30 91 c4 03 	lds	r19, 0x03C4	; 0x8003c4 <x+0x1>
    17dc:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <resting_x>
    17e0:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <resting_x+0x1>
    17e4:	82 17       	cp	r24, r18
    17e6:	93 07       	cpc	r25, r19
    17e8:	70 f4       	brcc	.+28     	; 0x1806 <valid_direction+0x36>
		cell_contents = what_is_in_dirn(pacman_x, pacman_y, DIRN_RIGHT);
    17ea:	42 e0       	ldi	r20, 0x02	; 2
    17ec:	60 91 a8 03 	lds	r22, 0x03A8	; 0x8003a8 <pacman_y>
    17f0:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <pacman_x>
    17f4:	0e 94 2f 05 	call	0xa5e	; 0xa5e <what_is_in_dirn>
		if(cell_contents == CELL_IS_WALL) {
    17f8:	8e 3f       	cpi	r24, 0xFE	; 254
    17fa:	09 f4       	brne	.+2      	; 0x17fe <valid_direction+0x2e>
    17fc:	3f c0       	rjmp	.+126    	; 0x187c <valid_direction+0xac>
			;	// Invalid Direction Do Nothing
		} else {
			change_pacman_direction(DIRN_RIGHT);
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <change_pacman_direction>
    1804:	08 95       	ret
		}
	} else if (x < resting_x) {
    1806:	28 17       	cp	r18, r24
    1808:	39 07       	cpc	r19, r25
    180a:	68 f4       	brcc	.+26     	; 0x1826 <valid_direction+0x56>
		cell_contents = what_is_in_dirn(pacman_x, pacman_y, DIRN_LEFT);
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	60 91 a8 03 	lds	r22, 0x03A8	; 0x8003a8 <pacman_y>
    1812:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <pacman_x>
    1816:	0e 94 2f 05 	call	0xa5e	; 0xa5e <what_is_in_dirn>
		if(cell_contents == CELL_IS_WALL) {
    181a:	8e 3f       	cpi	r24, 0xFE	; 254
    181c:	79 f1       	breq	.+94     	; 0x187c <valid_direction+0xac>
			;	// Invalid Direction Do Nothing
		} else {
			change_pacman_direction(DIRN_LEFT);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <change_pacman_direction>
    1824:	08 95       	ret
		}
	} else {
		if(y > resting_y) {
    1826:	20 91 c7 03 	lds	r18, 0x03C7	; 0x8003c7 <y>
    182a:	30 91 c8 03 	lds	r19, 0x03C8	; 0x8003c8 <y+0x1>
    182e:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <resting_y>
    1832:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <resting_y+0x1>
    1836:	82 17       	cp	r24, r18
    1838:	93 07       	cpc	r25, r19
    183a:	68 f4       	brcc	.+26     	; 0x1856 <valid_direction+0x86>
			cell_contents = what_is_in_dirn(pacman_x, pacman_y, DIRN_UP);
    183c:	41 e0       	ldi	r20, 0x01	; 1
    183e:	60 91 a8 03 	lds	r22, 0x03A8	; 0x8003a8 <pacman_y>
    1842:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <pacman_x>
    1846:	0e 94 2f 05 	call	0xa5e	; 0xa5e <what_is_in_dirn>
			if(cell_contents == CELL_IS_WALL) {
    184a:	8e 3f       	cpi	r24, 0xFE	; 254
    184c:	b9 f0       	breq	.+46     	; 0x187c <valid_direction+0xac>
				;	// Invalid Direction Do Nothing
			} else {
				change_pacman_direction(DIRN_RIGHT);
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <change_pacman_direction>
    1854:	08 95       	ret
			}
		} else if (y < resting_y) {
    1856:	28 17       	cp	r18, r24
    1858:	39 07       	cpc	r19, r25
    185a:	68 f4       	brcc	.+26     	; 0x1876 <valid_direction+0xa6>
			cell_contents = what_is_in_dirn(pacman_x, pacman_y, DIRN_DOWN);
    185c:	43 e0       	ldi	r20, 0x03	; 3
    185e:	60 91 a8 03 	lds	r22, 0x03A8	; 0x8003a8 <pacman_y>
    1862:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <pacman_x>
    1866:	0e 94 2f 05 	call	0xa5e	; 0xa5e <what_is_in_dirn>
			if(cell_contents == CELL_IS_WALL) {
    186a:	8e 3f       	cpi	r24, 0xFE	; 254
    186c:	39 f0       	breq	.+14     	; 0x187c <valid_direction+0xac>
				;	// Invalid Direction Do Nothing
			} else {
				change_pacman_direction(DIRN_DOWN);
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <change_pacman_direction>
    1874:	08 95       	ret
			}
		} else {
			joystick_rest = 1;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <joystick_rest>
    187c:	08 95       	ret

0000187e <save>:
		}
	}
}

void save(void) {
	eeprom_update_byte(&IsWritten, 1);
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	84 e1       	ldi	r24, 0x14	; 20
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	0e 94 0a 18 	call	0x3014	; 0x3014 <eeprom_update_byte>
	eeprom_update_word(&written_pacman_x, pacman_x);
    1888:	60 91 a9 03 	lds	r22, 0x03A9	; 0x8003a9 <pacman_x>
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	82 e1       	ldi	r24, 0x12	; 18
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	0e 94 28 18 	call	0x3050	; 0x3050 <eeprom_update_word>
	eeprom_update_word(&written_pacman_y, pacman_y);
    1896:	60 91 a8 03 	lds	r22, 0x03A8	; 0x8003a8 <pacman_y>
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	80 e1       	ldi	r24, 0x10	; 16
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	0e 94 28 18 	call	0x3050	; 0x3050 <eeprom_update_word>
	eeprom_update_byte(&written_pacman_direction, pacman_direction);
    18a4:	60 91 b6 03 	lds	r22, 0x03B6	; 0x8003b6 <pacman_direction>
    18a8:	8f e0       	ldi	r24, 0x0F	; 15
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	0e 94 0a 18 	call	0x3014	; 0x3014 <eeprom_update_byte>
	eeprom_update_byte(&written_lives, lives);
    18b0:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <lives>
    18b4:	86 e0       	ldi	r24, 0x06	; 6
    18b6:	91 e0       	ldi	r25, 0x01	; 1
    18b8:	0e 94 0a 18 	call	0x3014	; 0x3014 <eeprom_update_byte>
	eeprom_update_byte(&written_power_active, power_active);
    18bc:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <power_active>
    18c0:	85 e0       	ldi	r24, 0x05	; 5
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	0e 94 0a 18 	call	0x3014	; 0x3014 <eeprom_update_byte>
	eeprom_update_byte(&written_time_remaining, special_time_remaining);
    18c8:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <special_time_remaining>
    18cc:	84 e0       	ldi	r24, 0x04	; 4
    18ce:	91 e0       	ldi	r25, 0x01	; 1
    18d0:	0e 94 0a 18 	call	0x3014	; 0x3014 <eeprom_update_byte>
	eeprom_update_dword(&written_score, score);
    18d4:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <score>
    18d8:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <score+0x1>
    18dc:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <score+0x2>
    18e0:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <score+0x3>
    18e4:	8b e0       	ldi	r24, 0x0B	; 11
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	0e 94 1c 18 	call	0x3038	; 0x3038 <eeprom_update_dword>
	eeprom_update_dword(&written_highscore, highscore);
    18ec:	40 91 bf 03 	lds	r20, 0x03BF	; 0x8003bf <highscore>
    18f0:	50 91 c0 03 	lds	r21, 0x03C0	; 0x8003c0 <highscore+0x1>
    18f4:	60 91 c1 03 	lds	r22, 0x03C1	; 0x8003c1 <highscore+0x2>
    18f8:	70 91 c2 03 	lds	r23, 0x03C2	; 0x8003c2 <highscore+0x3>
    18fc:	87 e0       	ldi	r24, 0x07	; 7
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	0e 94 1c 18 	call	0x3038	; 0x3038 <eeprom_update_dword>
	eeprom_write_block(ghost_x, &written_ghost_x, NUM_GHOSTS);
    1904:	44 e0       	ldi	r20, 0x04	; 4
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	71 e0       	ldi	r23, 0x01	; 1
    190c:	84 ea       	ldi	r24, 0xA4	; 164
    190e:	93 e0       	ldi	r25, 0x03	; 3
    1910:	0e 94 2e 18 	call	0x305c	; 0x305c <eeprom_write_block>
	eeprom_write_block(ghost_y, &written_ghost_y, NUM_GHOSTS);
    1914:	44 e0       	ldi	r20, 0x04	; 4
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	6c ef       	ldi	r22, 0xFC	; 252
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	80 ea       	ldi	r24, 0xA0	; 160
    191e:	93 e0       	ldi	r25, 0x03	; 3
    1920:	0e 94 2e 18 	call	0x305c	; 0x305c <eeprom_write_block>
	eeprom_write_block(ghost_direction, &written_ghost_direction, NUM_GHOSTS);
    1924:	44 e0       	ldi	r20, 0x04	; 4
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	68 ef       	ldi	r22, 0xF8	; 248
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	8c e9       	ldi	r24, 0x9C	; 156
    192e:	93 e0       	ldi	r25, 0x03	; 3
    1930:	0e 94 2e 18 	call	0x305c	; 0x305c <eeprom_write_block>
	eeprom_write_block(pacdots, &written_pacdots, FIELD_HEIGHT);
    1934:	4f e1       	ldi	r20, 0x1F	; 31
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	6c e7       	ldi	r22, 0x7C	; 124
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	80 e2       	ldi	r24, 0x20	; 32
    193e:	93 e0       	ldi	r25, 0x03	; 3
    1940:	0e 94 2e 18 	call	0x305c	; 0x305c <eeprom_write_block>
	eeprom_write_block(power_pellets, &written_power_pellets, FIELD_HEIGHT);
    1944:	4f e1       	ldi	r20, 0x1F	; 31
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	84 ea       	ldi	r24, 0xA4	; 164
    194e:	92 e0       	ldi	r25, 0x02	; 2
    1950:	0e 94 2e 18 	call	0x305c	; 0x305c <eeprom_write_block>
    1954:	08 95       	ret

00001956 <load>:
}

void load(void) {
	if (eeprom_read_byte(&IsWritten) == 1) {
    1956:	84 e1       	ldi	r24, 0x14	; 20
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <eeprom_read_byte>
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	09 f0       	breq	.+2      	; 0x1964 <load+0xe>
    1962:	6d c0       	rjmp	.+218    	; 0x1a3e <load+0xe8>
		pacman_x = eeprom_read_word(&written_pacman_x);
    1964:	82 e1       	ldi	r24, 0x12	; 18
    1966:	91 e0       	ldi	r25, 0x01	; 1
    1968:	0e 94 04 18 	call	0x3008	; 0x3008 <eeprom_read_word>
    196c:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <pacman_x>
		pacman_y = eeprom_read_word(&written_pacman_y);
    1970:	80 e1       	ldi	r24, 0x10	; 16
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	0e 94 04 18 	call	0x3008	; 0x3008 <eeprom_read_word>
    1978:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <pacman_y>
		pacman_direction = eeprom_read_byte(&written_pacman_direction);
    197c:	8f e0       	ldi	r24, 0x0F	; 15
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	0e 94 f6 17 	call	0x2fec	; 0x2fec <eeprom_read_byte>
    1984:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <pacman_direction>
		lives = eeprom_read_byte(&written_lives);
    1988:	86 e0       	ldi	r24, 0x06	; 6
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <eeprom_read_byte>
    1990:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <lives>
		power_active = eeprom_read_byte(&written_power_active);
    1994:	85 e0       	ldi	r24, 0x05	; 5
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	0e 94 f6 17 	call	0x2fec	; 0x2fec <eeprom_read_byte>
    199c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <power_active>
		special_time_remaining = eeprom_read_byte(&written_time_remaining);
    19a0:	84 e0       	ldi	r24, 0x04	; 4
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	0e 94 f6 17 	call	0x2fec	; 0x2fec <eeprom_read_byte>
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e0       	ldi	r26, 0x00	; 0
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <special_time_remaining>
    19b2:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <special_time_remaining+0x1>
    19b6:	a0 93 a1 02 	sts	0x02A1, r26	; 0x8002a1 <special_time_remaining+0x2>
    19ba:	b0 93 a2 02 	sts	0x02A2, r27	; 0x8002a2 <special_time_remaining+0x3>
		score = eeprom_read_dword(&written_score);
    19be:	8b e0       	ldi	r24, 0x0B	; 11
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <eeprom_read_dword>
    19c6:	60 93 bb 03 	sts	0x03BB, r22	; 0x8003bb <score>
    19ca:	70 93 bc 03 	sts	0x03BC, r23	; 0x8003bc <score+0x1>
    19ce:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <score+0x2>
    19d2:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <score+0x3>
		highscore = eeprom_read_dword(&written_highscore);
    19d6:	87 e0       	ldi	r24, 0x07	; 7
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <eeprom_read_dword>
    19de:	60 93 bf 03 	sts	0x03BF, r22	; 0x8003bf <highscore>
    19e2:	70 93 c0 03 	sts	0x03C0, r23	; 0x8003c0 <highscore+0x1>
    19e6:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <highscore+0x2>
    19ea:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <highscore+0x3>
				
		eeprom_read_block(ghost_x, &written_ghost_x, NUM_GHOSTS);
    19ee:	44 e0       	ldi	r20, 0x04	; 4
    19f0:	50 e0       	ldi	r21, 0x00	; 0
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	71 e0       	ldi	r23, 0x01	; 1
    19f6:	84 ea       	ldi	r24, 0xA4	; 164
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <eeprom_read_block>
		eeprom_read_block(ghost_y, &written_ghost_y, NUM_GHOSTS);
    19fe:	44 e0       	ldi	r20, 0x04	; 4
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	6c ef       	ldi	r22, 0xFC	; 252
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	80 ea       	ldi	r24, 0xA0	; 160
    1a08:	93 e0       	ldi	r25, 0x03	; 3
    1a0a:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <eeprom_read_block>
		eeprom_read_block(ghost_direction, &written_ghost_direction, NUM_GHOSTS);
    1a0e:	44 e0       	ldi	r20, 0x04	; 4
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	68 ef       	ldi	r22, 0xF8	; 248
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	8c e9       	ldi	r24, 0x9C	; 156
    1a18:	93 e0       	ldi	r25, 0x03	; 3
    1a1a:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <eeprom_read_block>
		eeprom_read_block(pacdots, &written_pacdots, FIELD_HEIGHT);
    1a1e:	4f e1       	ldi	r20, 0x1F	; 31
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	6c e7       	ldi	r22, 0x7C	; 124
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	80 e2       	ldi	r24, 0x20	; 32
    1a28:	93 e0       	ldi	r25, 0x03	; 3
    1a2a:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <eeprom_read_block>
		eeprom_read_block(power_pellets, &written_power_pellets, FIELD_HEIGHT);
    1a2e:	4f e1       	ldi	r20, 0x1F	; 31
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	84 ea       	ldi	r24, 0xA4	; 164
    1a38:	92 e0       	ldi	r25, 0x02	; 2
    1a3a:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <eeprom_read_block>
    1a3e:	08 95       	ret

00001a40 <process_serial_input>:
	if(escape_sequence_char == 'a') {
		;
	}
	uint8_t characters_into_escape_sequence = 0;
	// Receive Serial Input
	if(serial_input_available()) {
    1a40:	0e 94 ab 11 	call	0x2356	; 0x2356 <serial_input_available>
    1a44:	88 23       	and	r24, r24
    1a46:	09 f1       	breq	.+66     	; 0x1a8a <process_serial_input+0x4a>
		// Serial data was available - read the data from standard input
		serial_input = fgetc(stdin);
    1a48:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <__iob>
    1a4c:	90 91 e2 04 	lds	r25, 0x04E2	; 0x8004e2 <__iob+0x1>
    1a50:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <fgetc>
		// Check if the character is part of an escape sequence
		if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1a54:	8b 31       	cpi	r24, 0x1B	; 27
    1a56:	c9 f0       	breq	.+50     	; 0x1a8a <process_serial_input+0x4a>
			// the data in the serial_input variable.
			characters_into_escape_sequence = 0;
		}
	}
	// Process the input.
	if(serial_input == 'p' || serial_input == 'P') {
    1a58:	8f 7d       	andi	r24, 0xDF	; 223
    1a5a:	80 35       	cpi	r24, 0x50	; 80
    1a5c:	91 f0       	breq	.+36     	; 0x1a82 <process_serial_input+0x42>
		// Pause the game - pause/unpause the game until 'p' or 'P' is
		// pressed again
		return 0;
		} else if(serial_input == 'n' || serial_input == 'N') {
    1a5e:	8e 34       	cpi	r24, 0x4E	; 78
    1a60:	21 f4       	brne	.+8      	; 0x1a6a <process_serial_input+0x2a>
		// Start a new game
		new_game();
    1a62:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <new_game>
		save();
		} else if(serial_input == 'o' || serial_input == 'O') {
		load();
	}
	
	return 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
		// Pause the game - pause/unpause the game until 'p' or 'P' is
		// pressed again
		return 0;
		} else if(serial_input == 'n' || serial_input == 'N') {
		// Start a new game
		new_game();
    1a68:	08 95       	ret
		} else if(serial_input == 's' || serial_input == 'S') {
    1a6a:	83 35       	cpi	r24, 0x53	; 83
    1a6c:	21 f4       	brne	.+8      	; 0x1a76 <process_serial_input+0x36>
		// Save the game
		save();
    1a6e:	0e 94 3f 0c 	call	0x187e	; 0x187e <save>
		} else if(serial_input == 'o' || serial_input == 'O') {
		load();
	}
	
	return 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
		} else if(serial_input == 'n' || serial_input == 'N') {
		// Start a new game
		new_game();
		} else if(serial_input == 's' || serial_input == 'S') {
		// Save the game
		save();
    1a74:	08 95       	ret
		} else if(serial_input == 'o' || serial_input == 'O') {
    1a76:	8f 34       	cpi	r24, 0x4F	; 79
    1a78:	31 f4       	brne	.+12     	; 0x1a86 <process_serial_input+0x46>
		load();
    1a7a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <load>
	}
	
	return 1;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	08 95       	ret
	}
	// Process the input.
	if(serial_input == 'p' || serial_input == 'P') {
		// Pause the game - pause/unpause the game until 'p' or 'P' is
		// pressed again
		return 0;
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	08 95       	ret
		save();
		} else if(serial_input == 'o' || serial_input == 'O') {
		load();
	}
	
	return 1;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	08 95       	ret
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
}
    1a8c:	08 95       	ret

00001a8e <display_digit>:

void display_digit(uint8_t number, uint8_t digit)
{
	uint8_t ret = seven_seg[number];
    1a8e:	e8 2f       	mov	r30, r24
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	ee 5e       	subi	r30, 0xEE	; 238
    1a94:	fe 4f       	sbci	r31, 0xFE	; 254
    1a96:	80 81       	ld	r24, Z
	uint8_t high = ret & 0xF0;
	uint8_t low = ret & 0x0F;
	
	PORTD |= low;
    1a98:	9b b1       	in	r25, 0x0b	; 11
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	2f 70       	andi	r18, 0x0F	; 15
    1a9e:	92 2b       	or	r25, r18
    1aa0:	9b b9       	out	0x0b, r25	; 11
	PORTC |= high;
    1aa2:	98 b1       	in	r25, 0x08	; 8
    1aa4:	80 7f       	andi	r24, 0xF0	; 240
    1aa6:	89 2b       	or	r24, r25
    1aa8:	88 b9       	out	0x08, r24	; 8
	PORTD |= (digit << PORTD3);
    1aaa:	8b b1       	in	r24, 0x0b	; 11
    1aac:	66 0f       	add	r22, r22
    1aae:	66 0f       	add	r22, r22
    1ab0:	66 0f       	add	r22, r22
    1ab2:	68 2b       	or	r22, r24
    1ab4:	6b b9       	out	0x0b, r22	; 11
    1ab6:	08 95       	ret

00001ab8 <handle_level_complete>:
		// We get here if the game is over.
		}
	}
	
void handle_level_complete(void) {
	move_cursor(35,10);
    1ab8:	6a e0       	ldi	r22, 0x0A	; 10
    1aba:	70 e0       	ldi	r23, 0x00	; 0
    1abc:	83 e2       	ldi	r24, 0x23	; 35
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <move_cursor>
	printf_P(PSTR("Level complete"));
    1ac4:	88 e7       	ldi	r24, 0x78	; 120
    1ac6:	95 e0       	ldi	r25, 0x05	; 5
    1ac8:	9f 93       	push	r25
    1aca:	8f 93       	push	r24
    1acc:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>
	move_cursor(35,11);
    1ad0:	6b e0       	ldi	r22, 0x0B	; 11
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	83 e2       	ldi	r24, 0x23	; 35
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <move_cursor>
	printf_P(PSTR("Push a button or key to continue"));
    1adc:	87 e5       	ldi	r24, 0x57	; 87
    1ade:	95 e0       	ldi	r25, 0x05	; 5
    1ae0:	9f 93       	push	r25
    1ae2:	8f 93       	push	r24
    1ae4:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>
	// Clear any characters in the serial input buffer - to make
	// sure we only use key presses from now on.
	clear_serial_input_buffer();
    1ae8:	0e 94 b2 11 	call	0x2364	; 0x2364 <clear_serial_input_buffer>
	while(button_pushed() == NO_BUTTON_PUSHED && !serial_input_available()) {
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0e 94 8c 03 	call	0x718	; 0x718 <button_pushed>
    1af8:	8f 3f       	cpi	r24, 0xFF	; 255
    1afa:	21 f4       	brne	.+8      	; 0x1b04 <handle_level_complete+0x4c>
    1afc:	0e 94 ab 11 	call	0x2356	; 0x2356 <serial_input_available>
    1b00:	88 23       	and	r24, r24
    1b02:	c1 f3       	breq	.-16     	; 0x1af4 <handle_level_complete+0x3c>
		; // wait
	}
	// Throw away any characters in the serial input buffer
	clear_serial_input_buffer();
    1b04:	0e 94 b2 11 	call	0x2364	; 0x2364 <clear_serial_input_buffer>
    1b08:	08 95       	ret

00001b0a <play_game>:
	PORTD |= low;
	PORTC |= high;
	PORTD |= (digit << PORTD3);
}

void play_game(void) {
    1b0a:	2f 92       	push	r2
    1b0c:	3f 92       	push	r3
    1b0e:	4f 92       	push	r4
    1b10:	5f 92       	push	r5
    1b12:	6f 92       	push	r6
    1b14:	7f 92       	push	r7
    1b16:	8f 92       	push	r8
    1b18:	9f 92       	push	r9
    1b1a:	af 92       	push	r10
    1b1c:	bf 92       	push	r11
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	2d 97       	sbiw	r28, 0x0d	; 13
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
	uint8_t characters_into_escape_sequence = 0;
	int8_t paused;
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
    1b3e:	0e 94 cb 12 	call	0x2596	; 0x2596 <get_current_time>
    1b42:	6b 01       	movw	r12, r22
    1b44:	7c 01       	movw	r14, r24
	pacman_last_move_time = current_time;
	ghost0_last_move_time = current_time;
	ghost1_last_move_time = current_time;
	ghost2_last_move_time = current_time;
	ghost3_last_move_time = current_time;
    1b46:	2b 01       	movw	r4, r22
    1b48:	3c 01       	movw	r6, r24
    // were moved.
	current_time = get_current_time();
	pacman_last_move_time = current_time;
	ghost0_last_move_time = current_time;
	ghost1_last_move_time = current_time;
	ghost2_last_move_time = current_time;
    1b4a:	69 87       	std	Y+9, r22	; 0x09
    1b4c:	7a 87       	std	Y+10, r23	; 0x0a
    1b4e:	8b 87       	std	Y+11, r24	; 0x0b
    1b50:	9c 87       	std	Y+12, r25	; 0x0c
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
	pacman_last_move_time = current_time;
	ghost0_last_move_time = current_time;
	ghost1_last_move_time = current_time;
    1b52:	6d 83       	std	Y+5, r22	; 0x05
    1b54:	7e 83       	std	Y+6, r23	; 0x06
    1b56:	8f 83       	std	Y+7, r24	; 0x07
    1b58:	98 87       	std	Y+8, r25	; 0x08
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
	pacman_last_move_time = current_time;
	ghost0_last_move_time = current_time;
    1b5a:	69 83       	std	Y+1, r22	; 0x01
    1b5c:	7a 83       	std	Y+2, r23	; 0x02
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
    1b60:	9c 83       	std	Y+4, r25	; 0x04
	int8_t paused;
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
	pacman_last_move_time = current_time;
    1b62:	4b 01       	movw	r8, r22
    1b64:	5c 01       	movw	r10, r24
	uint32_t ghost1_last_move_time;
	uint32_t ghost2_last_move_time;
	uint32_t ghost3_last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    1b66:	1d 86       	std	Y+13, r1	; 0x0d
	PORTC |= high;
	PORTD |= (digit << PORTD3);
}

void play_game(void) {
	uint8_t digit = 0;
    1b68:	21 2c       	mov	r2, r1
						if(digit == 0) {
							display_digit(f_digit, digit);
							} else {
							display_digit(l_digit, digit);
						}
						digit = 1 - digit;
    1b6a:	33 24       	eor	r3, r3
    1b6c:	33 94       	inc	r3
				}

			}
		
		serial_input = -1;
		escape_sequence_char = -1;
    1b6e:	0f ef       	ldi	r16, 0xFF	; 255
	ghost1_last_move_time = current_time;
	ghost2_last_move_time = current_time;
	ghost3_last_move_time = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
    1b70:	bb c1       	rjmp	.+886    	; 0x1ee8 <play_game+0x3de>
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		update_highscore();
    1b72:	0e 94 0f 10 	call	0x201e	; 0x201e <update_highscore>
			
			if (power_active) {
    1b76:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <power_active>
    1b7a:	88 23       	and	r24, r24
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <play_game+0x76>
    1b7e:	6e c0       	rjmp	.+220    	; 0x1c5c <play_game+0x152>
				if (powered_period + 15 < current_time) {
    1b80:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <powered_period>
    1b84:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <powered_period+0x1>
    1b88:	a0 91 b9 03 	lds	r26, 0x03B9	; 0x8003b9 <powered_period+0x2>
    1b8c:	b0 91 ba 03 	lds	r27, 0x03BA	; 0x8003ba <powered_period+0x3>
    1b90:	0f 96       	adiw	r24, 0x0f	; 15
    1b92:	a1 1d       	adc	r26, r1
    1b94:	b1 1d       	adc	r27, r1
    1b96:	8c 15       	cp	r24, r12
    1b98:	9d 05       	cpc	r25, r13
    1b9a:	ae 05       	cpc	r26, r14
    1b9c:	bf 05       	cpc	r27, r15
    1b9e:	28 f5       	brcc	.+74     	; 0x1bea <play_game+0xe0>
					power_active = 0;
    1ba0:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <power_active>
					ghost_colours[0] = ghost_original_colours[0];
    1ba4:	e8 e0       	ldi	r30, 0x08	; 8
    1ba6:	f1 e0       	ldi	r31, 0x01	; 1
    1ba8:	80 81       	ld	r24, Z
    1baa:	e4 e0       	ldi	r30, 0x04	; 4
    1bac:	f1 e0       	ldi	r31, 0x01	; 1
    1bae:	80 83       	st	Z, r24
					ghost_colours[1] = ghost_original_colours[1];
    1bb0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ghost_original_colours+0x1>
    1bb4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ghost_colours+0x1>
					ghost_colours[2] = ghost_original_colours[2];
    1bb8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ghost_original_colours+0x2>
    1bbc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ghost_colours+0x2>
					ghost_colours[3] = ghost_original_colours[3];
    1bc0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ghost_original_colours+0x3>
    1bc4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ghost_colours+0x3>
					ghost_kills = 0;
    1bc8:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <ghost_kills>
					special_time_remaining = 0;
    1bcc:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <special_time_remaining>
    1bd0:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <special_time_remaining+0x1>
    1bd4:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <special_time_remaining+0x2>
    1bd8:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <special_time_remaining+0x3>
					PORTC &= 0x0F;
    1bdc:	88 b1       	in	r24, 0x08	; 8
    1bde:	8f 70       	andi	r24, 0x0F	; 15
    1be0:	88 b9       	out	0x08, r24	; 8
					PORTD &= 0xF0;
    1be2:	8b b1       	in	r24, 0x0b	; 11
    1be4:	80 7f       	andi	r24, 0xF0	; 240
    1be6:	8b b9       	out	0x0b, r24	; 11
    1be8:	39 c0       	rjmp	.+114    	; 0x1c5c <play_game+0x152>
					} else {
					special_time_remaining = ceil(15 - (current_time - powered_period));
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	6c 19       	sub	r22, r12
    1bf0:	7d 09       	sbc	r23, r13
    1bf2:	8e 09       	sbc	r24, r14
    1bf4:	9f 09       	sbc	r25, r15
    1bf6:	0e 94 44 13 	call	0x2688	; 0x2688 <__floatunsisf>
    1bfa:	0e 94 fe 12 	call	0x25fc	; 0x25fc <ceil>
    1bfe:	0e 94 15 13 	call	0x262a	; 0x262a <__fixunssfsi>
    1c02:	60 93 9f 02 	sts	0x029F, r22	; 0x80029f <special_time_remaining>
    1c06:	70 93 a0 02 	sts	0x02A0, r23	; 0x8002a0 <special_time_remaining+0x1>
    1c0a:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <special_time_remaining+0x2>
    1c0e:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <special_time_remaining+0x3>
					f_digit = special_time_remaining % 10;
    1c12:	2a e0       	ldi	r18, 0x0A	; 10
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e0       	ldi	r20, 0x00	; 0
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodsi4>
    1c1e:	16 2f       	mov	r17, r22
					l_digit = (special_time_remaining / 10) % 10;
    1c20:	ca 01       	movw	r24, r20
    1c22:	b9 01       	movw	r22, r18
    1c24:	2a e0       	ldi	r18, 0x0A	; 10
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	50 e0       	ldi	r21, 0x00	; 0
    1c2c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodsi4>
    1c30:	86 2f       	mov	r24, r22
					/* Write out seven segment display value to port A */
					if (l_digit == 0) {
    1c32:	61 11       	cpse	r22, r1
    1c34:	06 c0       	rjmp	.+12     	; 0x1c42 <play_game+0x138>
						digit = 0;
						display_digit(f_digit, digit);
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	81 2f       	mov	r24, r17
    1c3a:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <display_digit>
					special_time_remaining = ceil(15 - (current_time - powered_period));
					f_digit = special_time_remaining % 10;
					l_digit = (special_time_remaining / 10) % 10;
					/* Write out seven segment display value to port A */
					if (l_digit == 0) {
						digit = 0;
    1c3e:	21 2c       	mov	r2, r1
    1c40:	0d c0       	rjmp	.+26     	; 0x1c5c <play_game+0x152>
						display_digit(f_digit, digit);
						} else {
						if(digit == 0) {
    1c42:	21 10       	cpse	r2, r1
    1c44:	05 c0       	rjmp	.+10     	; 0x1c50 <play_game+0x146>
							display_digit(f_digit, digit);
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	81 2f       	mov	r24, r17
    1c4a:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <display_digit>
    1c4e:	03 c0       	rjmp	.+6      	; 0x1c56 <play_game+0x14c>
							} else {
							display_digit(l_digit, digit);
    1c50:	62 2d       	mov	r22, r2
    1c52:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <display_digit>
						}
						digit = 1 - digit;
    1c56:	f3 2d       	mov	r31, r3
    1c58:	f2 19       	sub	r31, r2
    1c5a:	2f 2e       	mov	r2, r31

			}
		
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
    1c5c:	0e 94 8c 03 	call	0x718	; 0x718 <button_pushed>
    1c60:	18 2f       	mov	r17, r24
		
		// Set the ADC mux to choose ADC0 if x_or_y is 0, ADC1 if x_or_y is 1
		if(x_or_y == 0) {
    1c62:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <x_or_y>
    1c66:	81 11       	cpse	r24, r1
    1c68:	06 c0       	rjmp	.+12     	; 0x1c76 <play_game+0x16c>
			ADMUX &= ~1;
    1c6a:	ec e7       	ldi	r30, 0x7C	; 124
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	8e 7f       	andi	r24, 0xFE	; 254
    1c72:	80 83       	st	Z, r24
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <play_game+0x176>
			} else {
			ADMUX |= 1;
    1c76:	ec e7       	ldi	r30, 0x7C	; 124
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	81 60       	ori	r24, 0x01	; 1
    1c7e:	80 83       	st	Z, r24
		}
		// Start the ADC conversion
		ADCSRA |= (1<<ADSC);
    1c80:	ea e7       	ldi	r30, 0x7A	; 122
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	80 64       	ori	r24, 0x40	; 64
    1c88:	80 83       	st	Z, r24
		
		while(ADCSRA & (1<<ADSC)) {
    1c8a:	ea e7       	ldi	r30, 0x7A	; 122
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	86 fd       	sbrc	r24, 6
    1c92:	fb cf       	rjmp	.-10     	; 0x1c8a <play_game+0x180>
			; /* Wait until conversion finished */
		}
		value = ADC; // read the value
    1c94:	e8 e7       	ldi	r30, 0x78	; 120
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	20 81       	ld	r18, Z
    1c9a:	31 81       	ldd	r19, Z+1	; 0x01
    1c9c:	30 93 cc 03 	sts	0x03CC, r19	; 0x8003cc <value+0x1>
    1ca0:	20 93 cb 03 	sts	0x03CB, r18	; 0x8003cb <value>
		if(x_or_y == 0) {
    1ca4:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <x_or_y>
    1ca8:	81 11       	cpse	r24, r1
    1caa:	05 c0       	rjmp	.+10     	; 0x1cb6 <play_game+0x1ac>
			x = value;
    1cac:	30 93 c4 03 	sts	0x03C4, r19	; 0x8003c4 <x+0x1>
    1cb0:	20 93 c3 03 	sts	0x03C3, r18	; 0x8003c3 <x>
    1cb4:	04 c0       	rjmp	.+8      	; 0x1cbe <play_game+0x1b4>
		} else {
			y = value;
    1cb6:	30 93 c8 03 	sts	0x03C8, r19	; 0x8003c8 <y+0x1>
    1cba:	20 93 c7 03 	sts	0x03C7, r18	; 0x8003c7 <y>
		}
		// Next time through the loop, do the other direction
		x_or_y ^= 1;
    1cbe:	83 25       	eor	r24, r3
    1cc0:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <x_or_y>
		
		// Check if joystick is in valid direction
		valid_direction();
    1cc4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <valid_direction>
		
		if(button == NO_BUTTON_PUSHED) {
    1cc8:	1f 3f       	cpi	r17, 0xFF	; 255
    1cca:	09 f0       	breq	.+2      	; 0x1cce <play_game+0x1c4>
    1ccc:	18 c1       	rjmp	.+560    	; 0x1efe <play_game+0x3f4>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    1cce:	0e 94 ab 11 	call	0x2356	; 0x2356 <serial_input_available>
    1cd2:	88 23       	and	r24, r24
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <play_game+0x1ce>
    1cd6:	7a c0       	rjmp	.+244    	; 0x1dcc <play_game+0x2c2>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1cd8:	e1 ee       	ldi	r30, 0xE1	; 225
    1cda:	f4 e0       	ldi	r31, 0x04	; 4
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1ce4:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ce6:	f1 11       	cpse	r31, r1
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <play_game+0x1ea>
    1cea:	8b 31       	cpi	r24, 0x1B	; 27
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <play_game+0x1e6>
    1cee:	02 c1       	rjmp	.+516    	; 0x1ef4 <play_game+0x3ea>
    1cf0:	90 2f       	mov	r25, r16
    1cf2:	0d c0       	rjmp	.+26     	; 0x1d0e <play_game+0x204>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    1cf4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cf6:	91 30       	cpi	r25, 0x01	; 1
    1cf8:	29 f4       	brne	.+10     	; 0x1d04 <play_game+0x1fa>
    1cfa:	8b 35       	cpi	r24, 0x5B	; 91
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <play_game+0x1f6>
    1cfe:	fc c0       	rjmp	.+504    	; 0x1ef8 <play_game+0x3ee>
    1d00:	90 2f       	mov	r25, r16
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <play_game+0x204>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    1d04:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d06:	e2 30       	cpi	r30, 0x02	; 2
    1d08:	b9 f5       	brne	.+110    	; 0x1d78 <play_game+0x26e>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    1d0a:	98 2f       	mov	r25, r24
					serial_input = -1;  // Don't further process this character - we
    1d0c:	80 2f       	mov	r24, r16
				}
			}
		}
		
		// Process the input. 
		if((button==3 || escape_sequence_char=='D') && joystick_rest) {
    1d0e:	94 34       	cpi	r25, 0x44	; 68
    1d10:	79 f4       	brne	.+30     	; 0x1d30 <play_game+0x226>
    1d12:	1d 86       	std	Y+13, r1	; 0x0d
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <play_game+0x210>
				}

			}
		
		serial_input = -1;
		escape_sequence_char = -1;
    1d16:	90 2f       	mov	r25, r16
					}
				}

			}
		
		serial_input = -1;
    1d18:	80 2f       	mov	r24, r16
				}
			}
		}
		
		// Process the input. 
		if((button==3 || escape_sequence_char=='D') && joystick_rest) {
    1d1a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <joystick_rest>
    1d1e:	22 23       	and	r18, r18
    1d20:	21 f0       	breq	.+8      	; 0x1d2a <play_game+0x220>
			// Button 3 pressed OR left cursor key escape sequence completed 
			// Attempt to move left
			change_pacman_direction(DIRN_LEFT);
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <change_pacman_direction>
    1d28:	51 c0       	rjmp	.+162    	; 0x1dcc <play_game+0x2c2>
		} else if((button==2 || escape_sequence_char=='A') && joystick_rest) {
    1d2a:	12 30       	cpi	r17, 0x02	; 2
    1d2c:	11 f4       	brne	.+4      	; 0x1d32 <play_game+0x228>
    1d2e:	ed c0       	rjmp	.+474    	; 0x1f0a <play_game+0x400>
    1d30:	1d 86       	std	Y+13, r1	; 0x0d
    1d32:	91 34       	cpi	r25, 0x41	; 65
    1d34:	41 f4       	brne	.+16     	; 0x1d46 <play_game+0x23c>
    1d36:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <joystick_rest>
    1d3a:	22 23       	and	r18, r18
    1d3c:	21 f0       	breq	.+8      	; 0x1d46 <play_game+0x23c>
			// Button 2 pressed or up cursor key escape sequence completed
			// YOUR CODE HERE
			change_pacman_direction(DIRN_UP);
    1d3e:	83 2d       	mov	r24, r3
    1d40:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <change_pacman_direction>
    1d44:	43 c0       	rjmp	.+134    	; 0x1dcc <play_game+0x2c2>
		} else if((button==1 || escape_sequence_char=='B') && joystick_rest) {
    1d46:	11 30       	cpi	r17, 0x01	; 1
    1d48:	11 f0       	breq	.+4      	; 0x1d4e <play_game+0x244>
    1d4a:	92 34       	cpi	r25, 0x42	; 66
    1d4c:	49 f4       	brne	.+18     	; 0x1d60 <play_game+0x256>
    1d4e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <joystick_rest>
    1d52:	22 23       	and	r18, r18
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <play_game+0x24e>
    1d56:	df c0       	rjmp	.+446    	; 0x1f16 <play_game+0x40c>
			// Button 1 pressed OR down cursor key escape sequence completed
			// YOUR CODE HERE
			change_pacman_direction(DIRN_DOWN);
    1d58:	83 e0       	ldi	r24, 0x03	; 3
    1d5a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <change_pacman_direction>
    1d5e:	36 c0       	rjmp	.+108    	; 0x1dcc <play_game+0x2c2>
		} else if((button==0 || escape_sequence_char=='C') && joystick_rest) {
    1d60:	11 23       	and	r17, r17
    1d62:	11 f0       	breq	.+4      	; 0x1d68 <play_game+0x25e>
    1d64:	93 34       	cpi	r25, 0x43	; 67
    1d66:	49 f4       	brne	.+18     	; 0x1d7a <play_game+0x270>
    1d68:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <joystick_rest>
    1d6c:	99 23       	and	r25, r25
    1d6e:	29 f0       	breq	.+10     	; 0x1d7a <play_game+0x270>
			// Button 0 pressed OR right cursor key escape sequence completed 
			// Attempt to move right
			change_pacman_direction(DIRN_RIGHT);
    1d70:	82 e0       	ldi	r24, 0x02	; 2
    1d72:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <change_pacman_direction>
    1d76:	2a c0       	rjmp	.+84     	; 0x1dcc <play_game+0x2c2>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    1d78:	1d 86       	std	Y+13, r1	; 0x0d
			change_pacman_direction(DIRN_DOWN);
		} else if((button==0 || escape_sequence_char=='C') && joystick_rest) {
			// Button 0 pressed OR right cursor key escape sequence completed 
			// Attempt to move right
			change_pacman_direction(DIRN_RIGHT);
		} else if(serial_input == 'n' || serial_input == 'N') {
    1d7a:	8f 7d       	andi	r24, 0xDF	; 223
    1d7c:	8e 34       	cpi	r24, 0x4E	; 78
    1d7e:	19 f4       	brne	.+6      	; 0x1d86 <play_game+0x27c>
			// Start a new game
			new_game();
    1d80:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <new_game>
    1d84:	23 c0       	rjmp	.+70     	; 0x1dcc <play_game+0x2c2>
		} else if(serial_input == 'p' || serial_input == 'P') {
    1d86:	80 35       	cpi	r24, 0x50	; 80
    1d88:	c1 f4       	brne	.+48     	; 0x1dba <play_game+0x2b0>
			// Pause the game
			paused = 1;
			while (paused) {
				paused = process_serial_input();
    1d8a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <process_serial_input>
    1d8e:	18 2f       	mov	r17, r24
				pacman_last_move_time = ghost0_last_move_time = ghost1_last_move_time = ghost2_last_move_time = ghost3_last_move_time = get_current_time();
    1d90:	0e 94 cb 12 	call	0x2596	; 0x2596 <get_current_time>
    1d94:	4b 01       	movw	r8, r22
    1d96:	5c 01       	movw	r10, r24
			// Start a new game
			new_game();
		} else if(serial_input == 'p' || serial_input == 'P') {
			// Pause the game
			paused = 1;
			while (paused) {
    1d98:	11 11       	cpse	r17, r1
    1d9a:	f7 cf       	rjmp	.-18     	; 0x1d8a <play_game+0x280>
				paused = process_serial_input();
				pacman_last_move_time = ghost0_last_move_time = ghost1_last_move_time = ghost2_last_move_time = ghost3_last_move_time = get_current_time();
    1d9c:	2b 01       	movw	r4, r22
    1d9e:	3c 01       	movw	r6, r24
    1da0:	69 87       	std	Y+9, r22	; 0x09
    1da2:	7a 87       	std	Y+10, r23	; 0x0a
    1da4:	8b 87       	std	Y+11, r24	; 0x0b
    1da6:	9c 87       	std	Y+12, r25	; 0x0c
    1da8:	6d 83       	std	Y+5, r22	; 0x05
    1daa:	7e 83       	std	Y+6, r23	; 0x06
    1dac:	8f 83       	std	Y+7, r24	; 0x07
    1dae:	98 87       	std	Y+8, r25	; 0x08
    1db0:	69 83       	std	Y+1, r22	; 0x01
    1db2:	7a 83       	std	Y+2, r23	; 0x02
    1db4:	8b 83       	std	Y+3, r24	; 0x03
    1db6:	9c 83       	std	Y+4, r25	; 0x04
    1db8:	09 c0       	rjmp	.+18     	; 0x1dcc <play_game+0x2c2>
			}
		} else if(serial_input == 's' || serial_input == 'S') {
    1dba:	83 35       	cpi	r24, 0x53	; 83
    1dbc:	19 f4       	brne	.+6      	; 0x1dc4 <play_game+0x2ba>
		// Save the game
		save();
    1dbe:	0e 94 3f 0c 	call	0x187e	; 0x187e <save>
    1dc2:	04 c0       	rjmp	.+8      	; 0x1dcc <play_game+0x2c2>
		} else if(serial_input == 'o' || serial_input == 'O') {
    1dc4:	8f 34       	cpi	r24, 0x4F	; 79
    1dc6:	11 f4       	brne	.+4      	; 0x1dcc <play_game+0x2c2>
		// Load the game
		load();
    1dc8:	0e 94 ab 0c 	call	0x1956	; 0x1956 <load>
		}
		
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		current_time = get_current_time();
    1dcc:	0e 94 cb 12 	call	0x2596	; 0x2596 <get_current_time>
    1dd0:	6b 01       	movw	r12, r22
    1dd2:	7c 01       	movw	r14, r24
		if(!is_game_over() && current_time >= pacman_last_move_time + 400) {
    1dd4:	0e 94 25 0b 	call	0x164a	; 0x164a <is_game_over>
    1dd8:	81 11       	cpse	r24, r1
    1dda:	2a c0       	rjmp	.+84     	; 0x1e30 <play_game+0x326>
    1ddc:	d5 01       	movw	r26, r10
    1dde:	c4 01       	movw	r24, r8
    1de0:	80 57       	subi	r24, 0x70	; 112
    1de2:	9e 4f       	sbci	r25, 0xFE	; 254
    1de4:	af 4f       	sbci	r26, 0xFF	; 255
    1de6:	bf 4f       	sbci	r27, 0xFF	; 255
    1de8:	c8 16       	cp	r12, r24
    1dea:	d9 06       	cpc	r13, r25
    1dec:	ea 06       	cpc	r14, r26
    1dee:	fb 06       	cpc	r15, r27
    1df0:	f8 f0       	brcs	.+62     	; 0x1e30 <play_game+0x326>
			// 400ms (0.4 second) has passed since the last time we moved 
			// the pac-man - move it.
			move_pacman();
    1df2:	0e 94 04 08 	call	0x1008	; 0x1008 <move_pacman>
			pacman_last_move_time = current_time;
			// Check if the move finished the level - and restart if so
			if(is_level_complete()) {
    1df6:	0e 94 2b 0b 	call	0x1656	; 0x1656 <is_level_complete>
    1dfa:	88 23       	and	r24, r24
    1dfc:	b9 f0       	breq	.+46     	; 0x1e2c <play_game+0x322>
				handle_level_complete();	// This will pause until a button is pushed
    1dfe:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <handle_level_complete>
				initialise_game_level();
    1e02:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <initialise_game_level>
				// Update our timers since we have a pause above
				pacman_last_move_time = ghost0_last_move_time = ghost1_last_move_time = ghost2_last_move_time = ghost3_last_move_time = get_current_time();
    1e06:	0e 94 cb 12 	call	0x2596	; 0x2596 <get_current_time>
    1e0a:	4b 01       	movw	r8, r22
    1e0c:	5c 01       	movw	r10, r24
    1e0e:	2b 01       	movw	r4, r22
    1e10:	3c 01       	movw	r6, r24
    1e12:	69 87       	std	Y+9, r22	; 0x09
    1e14:	7a 87       	std	Y+10, r23	; 0x0a
    1e16:	8b 87       	std	Y+11, r24	; 0x0b
    1e18:	9c 87       	std	Y+12, r25	; 0x0c
    1e1a:	6d 83       	std	Y+5, r22	; 0x05
    1e1c:	7e 83       	std	Y+6, r23	; 0x06
    1e1e:	8f 83       	std	Y+7, r24	; 0x07
    1e20:	98 87       	std	Y+8, r25	; 0x08
    1e22:	69 83       	std	Y+1, r22	; 0x01
    1e24:	7a 83       	std	Y+2, r23	; 0x02
    1e26:	8b 83       	std	Y+3, r24	; 0x03
    1e28:	9c 83       	std	Y+4, r25	; 0x04
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <play_game+0x326>
		current_time = get_current_time();
		if(!is_game_over() && current_time >= pacman_last_move_time + 400) {
			// 400ms (0.4 second) has passed since the last time we moved 
			// the pac-man - move it.
			move_pacman();
			pacman_last_move_time = current_time;
    1e2c:	46 01       	movw	r8, r12
    1e2e:	57 01       	movw	r10, r14
				// Update our timers since we have a pause above
				pacman_last_move_time = ghost0_last_move_time = ghost1_last_move_time = ghost2_last_move_time = ghost3_last_move_time = get_current_time();
			}
		}
		// Ghost 0 Movement (0.4 seconds)
		if(!is_game_over() && current_time >= ghost0_last_move_time + 400) {
    1e30:	0e 94 25 0b 	call	0x164a	; 0x164a <is_game_over>
    1e34:	81 11       	cpse	r24, r1
    1e36:	14 c0       	rjmp	.+40     	; 0x1e60 <play_game+0x356>
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e3e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e40:	80 57       	subi	r24, 0x70	; 112
    1e42:	9e 4f       	sbci	r25, 0xFE	; 254
    1e44:	af 4f       	sbci	r26, 0xFF	; 255
    1e46:	bf 4f       	sbci	r27, 0xFF	; 255
    1e48:	c8 16       	cp	r12, r24
    1e4a:	d9 06       	cpc	r13, r25
    1e4c:	ea 06       	cpc	r14, r26
    1e4e:	fb 06       	cpc	r15, r27
    1e50:	38 f0       	brcs	.+14     	; 0x1e60 <play_game+0x356>
			// 400ms (0.4 second) has passed since the last time we moved the
			// ghosts - move them
			move_ghost(0);
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	0e 94 0e 09 	call	0x121c	; 0x121c <move_ghost>
			ghost0_last_move_time = current_time;
    1e58:	c9 82       	std	Y+1, r12	; 0x01
    1e5a:	da 82       	std	Y+2, r13	; 0x02
    1e5c:	eb 82       	std	Y+3, r14	; 0x03
    1e5e:	fc 82       	std	Y+4, r15	; 0x04
		}
		// Ghost 1 Movement (0.5 seconds)
		if(!is_game_over() && current_time >= ghost1_last_move_time + 500) {
    1e60:	0e 94 25 0b 	call	0x164a	; 0x164a <is_game_over>
    1e64:	81 11       	cpse	r24, r1
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <play_game+0x386>
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	af 81       	ldd	r26, Y+7	; 0x07
    1e6e:	b8 85       	ldd	r27, Y+8	; 0x08
    1e70:	8c 50       	subi	r24, 0x0C	; 12
    1e72:	9e 4f       	sbci	r25, 0xFE	; 254
    1e74:	af 4f       	sbci	r26, 0xFF	; 255
    1e76:	bf 4f       	sbci	r27, 0xFF	; 255
    1e78:	c8 16       	cp	r12, r24
    1e7a:	d9 06       	cpc	r13, r25
    1e7c:	ea 06       	cpc	r14, r26
    1e7e:	fb 06       	cpc	r15, r27
    1e80:	38 f0       	brcs	.+14     	; 0x1e90 <play_game+0x386>
			// 500ms (0.5 second) has passed since the last time we moved the
			// ghosts - move them
			move_ghost(1);
    1e82:	83 2d       	mov	r24, r3
    1e84:	0e 94 0e 09 	call	0x121c	; 0x121c <move_ghost>
			ghost1_last_move_time = current_time;
    1e88:	cd 82       	std	Y+5, r12	; 0x05
    1e8a:	de 82       	std	Y+6, r13	; 0x06
    1e8c:	ef 82       	std	Y+7, r14	; 0x07
    1e8e:	f8 86       	std	Y+8, r15	; 0x08
		}
		// Ghost 2 Movement (0.55 seconds)
		if(!is_game_over() && current_time >= ghost2_last_move_time + 550) {
    1e90:	0e 94 25 0b 	call	0x164a	; 0x164a <is_game_over>
    1e94:	81 11       	cpse	r24, r1
    1e96:	14 c0       	rjmp	.+40     	; 0x1ec0 <play_game+0x3b6>
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e9e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ea0:	8a 5d       	subi	r24, 0xDA	; 218
    1ea2:	9d 4f       	sbci	r25, 0xFD	; 253
    1ea4:	af 4f       	sbci	r26, 0xFF	; 255
    1ea6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea8:	c8 16       	cp	r12, r24
    1eaa:	d9 06       	cpc	r13, r25
    1eac:	ea 06       	cpc	r14, r26
    1eae:	fb 06       	cpc	r15, r27
    1eb0:	38 f0       	brcs	.+14     	; 0x1ec0 <play_game+0x3b6>
			// 550ms (0.55 second) has passed since the last time we moved the
			// ghosts - move them
			move_ghost(2);
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	0e 94 0e 09 	call	0x121c	; 0x121c <move_ghost>
			ghost2_last_move_time = current_time;
    1eb8:	c9 86       	std	Y+9, r12	; 0x09
    1eba:	da 86       	std	Y+10, r13	; 0x0a
    1ebc:	eb 86       	std	Y+11, r14	; 0x0b
    1ebe:	fc 86       	std	Y+12, r15	; 0x0c
		}
		// Ghost 3 Movement (0.6 seconds)
		if(!is_game_over() && current_time >= ghost3_last_move_time + 600) {
    1ec0:	0e 94 25 0b 	call	0x164a	; 0x164a <is_game_over>
    1ec4:	81 11       	cpse	r24, r1
    1ec6:	10 c0       	rjmp	.+32     	; 0x1ee8 <play_game+0x3de>
    1ec8:	d3 01       	movw	r26, r6
    1eca:	c2 01       	movw	r24, r4
    1ecc:	88 5a       	subi	r24, 0xA8	; 168
    1ece:	9d 4f       	sbci	r25, 0xFD	; 253
    1ed0:	af 4f       	sbci	r26, 0xFF	; 255
    1ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed4:	c8 16       	cp	r12, r24
    1ed6:	d9 06       	cpc	r13, r25
    1ed8:	ea 06       	cpc	r14, r26
    1eda:	fb 06       	cpc	r15, r27
    1edc:	28 f0       	brcs	.+10     	; 0x1ee8 <play_game+0x3de>
			// 600ms (0.6 second) has passed since the last time we moved the
			// ghosts - move them
			move_ghost(3);
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	0e 94 0e 09 	call	0x121c	; 0x121c <move_ghost>
			ghost3_last_move_time = current_time;
    1ee4:	26 01       	movw	r4, r12
    1ee6:	37 01       	movw	r6, r14
	ghost1_last_move_time = current_time;
	ghost2_last_move_time = current_time;
	ghost3_last_move_time = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
    1ee8:	0e 94 25 0b 	call	0x164a	; 0x164a <is_game_over>
    1eec:	88 23       	and	r24, r24
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <play_game+0x3e8>
    1ef0:	40 ce       	rjmp	.-896    	; 0x1b72 <play_game+0x68>
    1ef2:	1a c0       	rjmp	.+52     	; 0x1f28 <play_game+0x41e>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    1ef4:	3d 86       	std	Y+13, r3	; 0x0d
    1ef6:	6a cf       	rjmp	.-300    	; 0x1dcc <play_game+0x2c2>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    1ef8:	f2 e0       	ldi	r31, 0x02	; 2
    1efa:	fd 87       	std	Y+13, r31	; 0x0d
    1efc:	67 cf       	rjmp	.-306    	; 0x1dcc <play_game+0x2c2>
				}
			}
		}
		
		// Process the input. 
		if((button==3 || escape_sequence_char=='D') && joystick_rest) {
    1efe:	13 30       	cpi	r17, 0x03	; 3
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <play_game+0x3fa>
    1f02:	09 cf       	rjmp	.-494    	; 0x1d16 <play_game+0x20c>
    1f04:	0c c0       	rjmp	.+24     	; 0x1f1e <play_game+0x414>
				}

			}
		
		serial_input = -1;
		escape_sequence_char = -1;
    1f06:	90 2f       	mov	r25, r16
					}
				}

			}
		
		serial_input = -1;
    1f08:	80 2f       	mov	r24, r16
		// Process the input. 
		if((button==3 || escape_sequence_char=='D') && joystick_rest) {
			// Button 3 pressed OR left cursor key escape sequence completed 
			// Attempt to move left
			change_pacman_direction(DIRN_LEFT);
		} else if((button==2 || escape_sequence_char=='A') && joystick_rest) {
    1f0a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <joystick_rest>
    1f0e:	22 23       	and	r18, r18
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <play_game+0x40a>
    1f12:	1b cf       	rjmp	.-458    	; 0x1d4a <play_game+0x240>
    1f14:	14 cf       	rjmp	.-472    	; 0x1d3e <play_game+0x234>
			change_pacman_direction(DIRN_UP);
		} else if((button==1 || escape_sequence_char=='B') && joystick_rest) {
			// Button 1 pressed OR down cursor key escape sequence completed
			// YOUR CODE HERE
			change_pacman_direction(DIRN_DOWN);
		} else if((button==0 || escape_sequence_char=='C') && joystick_rest) {
    1f16:	11 23       	and	r17, r17
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <play_game+0x412>
    1f1a:	2f cf       	rjmp	.-418    	; 0x1d7a <play_game+0x270>
    1f1c:	23 cf       	rjmp	.-442    	; 0x1d64 <play_game+0x25a>
		// Process the input. 
		if((button==3 || escape_sequence_char=='D') && joystick_rest) {
			// Button 3 pressed OR left cursor key escape sequence completed 
			// Attempt to move left
			change_pacman_direction(DIRN_LEFT);
		} else if((button==2 || escape_sequence_char=='A') && joystick_rest) {
    1f1e:	12 30       	cpi	r17, 0x02	; 2
    1f20:	91 f3       	breq	.-28     	; 0x1f06 <play_game+0x3fc>
				}

			}
		
		serial_input = -1;
		escape_sequence_char = -1;
    1f22:	90 2f       	mov	r25, r16
					}
				}

			}
		
		serial_input = -1;
    1f24:	80 2f       	mov	r24, r16
    1f26:	0f cf       	rjmp	.-482    	; 0x1d46 <play_game+0x23c>
			move_ghost(3);
			ghost3_last_move_time = current_time;
		}
		// We get here if the game is over.
		}
	}
    1f28:	2d 96       	adiw	r28, 0x0d	; 13
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	ff 90       	pop	r15
    1f3e:	ef 90       	pop	r14
    1f40:	df 90       	pop	r13
    1f42:	cf 90       	pop	r12
    1f44:	bf 90       	pop	r11
    1f46:	af 90       	pop	r10
    1f48:	9f 90       	pop	r9
    1f4a:	8f 90       	pop	r8
    1f4c:	7f 90       	pop	r7
    1f4e:	6f 90       	pop	r6
    1f50:	5f 90       	pop	r5
    1f52:	4f 90       	pop	r4
    1f54:	3f 90       	pop	r3
    1f56:	2f 90       	pop	r2
    1f58:	08 95       	ret

00001f5a <handle_game_over>:
	clear_serial_input_buffer();

}

void handle_game_over(void) {
	move_cursor(35,14);
    1f5a:	6e e0       	ldi	r22, 0x0E	; 14
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	83 e2       	ldi	r24, 0x23	; 35
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    1f66:	8d e4       	ldi	r24, 0x4D	; 77
    1f68:	95 e0       	ldi	r25, 0x05	; 5
    1f6a:	9f 93       	push	r25
    1f6c:	8f 93       	push	r24
    1f6e:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>
	move_cursor(35,16);
    1f72:	60 e1       	ldi	r22, 0x10	; 16
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	83 e2       	ldi	r24, 0x23	; 35
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    1f7e:	8f e2       	ldi	r24, 0x2F	; 47
    1f80:	95 e0       	ldi	r25, 0x05	; 5
    1f82:	9f 93       	push	r25
    1f84:	8f 93       	push	r24
    1f86:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>
	while(button_pushed() == NO_BUTTON_PUSHED) {
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0e 94 8c 03 	call	0x718	; 0x718 <button_pushed>
    1f96:	8f 3f       	cpi	r24, 0xFF	; 255
    1f98:	e1 f3       	breq	.-8      	; 0x1f92 <handle_game_over+0x38>
		; // wait
	}
	new_game();
    1f9a:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <new_game>
    1f9e:	08 95       	ret

00001fa0 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1fa0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    1fa4:	0e 94 6f 0b 	call	0x16de	; 0x16de <splash_screen>
	
	DDRC = 0xFF;
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	87 b9       	out	0x07, r24	; 7
	DDRA = 0xF0;
    1fac:	80 ef       	ldi	r24, 0xF0	; 240
    1fae:	81 b9       	out	0x01, r24	; 1
	
	while(1) {
		new_game();
    1fb0:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <new_game>
		play_game();
    1fb4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <play_game>
		handle_game_over();
    1fb8:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <handle_game_over>
    1fbc:	f9 cf       	rjmp	.-14     	; 0x1fb0 <main+0x10>

00001fbe <init_score>:

uint32_t score;
uint32_t highscore;

void init_score(void) {
	score = 0;
    1fbe:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <score>
    1fc2:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <score+0x1>
    1fc6:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <score+0x2>
    1fca:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <score+0x3>
    1fce:	08 95       	ret

00001fd0 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1fd0:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <score>
    1fd4:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <score+0x1>
    1fd8:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <score+0x2>
    1fdc:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <score+0x3>
    1fe0:	48 0f       	add	r20, r24
    1fe2:	59 1f       	adc	r21, r25
    1fe4:	61 1d       	adc	r22, r1
    1fe6:	71 1d       	adc	r23, r1
    1fe8:	40 93 bb 03 	sts	0x03BB, r20	; 0x8003bb <score>
    1fec:	50 93 bc 03 	sts	0x03BC, r21	; 0x8003bc <score+0x1>
    1ff0:	60 93 bd 03 	sts	0x03BD, r22	; 0x8003bd <score+0x2>
    1ff4:	70 93 be 03 	sts	0x03BE, r23	; 0x8003be <score+0x3>
    1ff8:	08 95       	ret

00001ffa <get_score>:
}

uint32_t get_score(void) {
	return score;
    1ffa:	60 91 bb 03 	lds	r22, 0x03BB	; 0x8003bb <score>
    1ffe:	70 91 bc 03 	lds	r23, 0x03BC	; 0x8003bc <score+0x1>
    2002:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <score+0x2>
    2006:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <score+0x3>
}
    200a:	08 95       	ret

0000200c <get_highscore>:

uint32_t get_highscore(void) {
	return highscore;
    200c:	60 91 bf 03 	lds	r22, 0x03BF	; 0x8003bf <highscore>
    2010:	70 91 c0 03 	lds	r23, 0x03C0	; 0x8003c0 <highscore+0x1>
    2014:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <highscore+0x2>
    2018:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <highscore+0x3>
}
    201c:	08 95       	ret

0000201e <update_highscore>:

void update_highscore(void) {
	if (score > highscore) {
    201e:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <score>
    2022:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <score+0x1>
    2026:	a0 91 bd 03 	lds	r26, 0x03BD	; 0x8003bd <score+0x2>
    202a:	b0 91 be 03 	lds	r27, 0x03BE	; 0x8003be <score+0x3>
    202e:	40 91 bf 03 	lds	r20, 0x03BF	; 0x8003bf <highscore>
    2032:	50 91 c0 03 	lds	r21, 0x03C0	; 0x8003c0 <highscore+0x1>
    2036:	60 91 c1 03 	lds	r22, 0x03C1	; 0x8003c1 <highscore+0x2>
    203a:	70 91 c2 03 	lds	r23, 0x03C2	; 0x8003c2 <highscore+0x3>
    203e:	48 17       	cp	r20, r24
    2040:	59 07       	cpc	r21, r25
    2042:	6a 07       	cpc	r22, r26
    2044:	7b 07       	cpc	r23, r27
    2046:	40 f4       	brcc	.+16     	; 0x2058 <update_highscore+0x3a>
		highscore = score;
    2048:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <highscore>
    204c:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <highscore+0x1>
    2050:	a0 93 c1 03 	sts	0x03C1, r26	; 0x8003c1 <highscore+0x2>
    2054:	b0 93 c2 03 	sts	0x03C2, r27	; 0x8003c2 <highscore+0x3>
    2058:	08 95       	ret

0000205a <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    205a:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <colour>
	display_string = string_to_display;
    205e:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <display_string+0x1>
    2062:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <display_string>
	next_col_ptr = 0;
    2066:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <next_col_ptr+0x1>
    206a:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <next_col_ptr>
	next_char_to_display = 0;
    206e:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <next_char_to_display+0x1>
    2072:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <next_char_to_display>
    2076:	08 95       	ret

00002078 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	28 97       	sbiw	r28, 0x08	; 8
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    2090:	e0 91 af 03 	lds	r30, 0x03AF	; 0x8003af <next_col_ptr>
    2094:	f0 91 b0 03 	lds	r31, 0x03B0	; 0x8003b0 <next_col_ptr+0x1>
    2098:	30 97       	sbiw	r30, 0x00	; 0
    209a:	81 f0       	breq	.+32     	; 0x20bc <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    209c:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    209e:	10 ff       	sbrs	r17, 0
    20a0:	06 c0       	rjmp	.+12     	; 0x20ae <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    20a2:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <next_col_ptr+0x1>
    20a6:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    20aa:	00 e0       	ldi	r16, 0x00	; 0
    20ac:	6b c0       	rjmp	.+214    	; 0x2184 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    20ae:	31 96       	adiw	r30, 0x01	; 1
    20b0:	f0 93 b0 03 	sts	0x03B0, r31	; 0x8003b0 <next_col_ptr+0x1>
    20b4:	e0 93 af 03 	sts	0x03AF, r30	; 0x8003af <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    20b8:	00 e0       	ldi	r16, 0x00	; 0
    20ba:	64 c0       	rjmp	.+200    	; 0x2184 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    20bc:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <next_char_to_display>
    20c0:	f0 91 ac 03 	lds	r31, 0x03AC	; 0x8003ac <next_char_to_display+0x1>
    20c4:	30 97       	sbiw	r30, 0x00	; 0
    20c6:	09 f4       	brne	.+2      	; 0x20ca <scroll_display+0x52>
    20c8:	49 c0       	rjmp	.+146    	; 0x215c <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    20ca:	cf 01       	movw	r24, r30
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <next_char_to_display+0x1>
    20d2:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <next_char_to_display>
    20d6:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    20d8:	e1 11       	cpse	r30, r1
    20da:	0a c0       	rjmp	.+20     	; 0x20f0 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    20dc:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <next_char_to_display+0x1>
    20e0:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <next_char_to_display>
			shift_countdown = 16;
    20e4:	80 e1       	ldi	r24, 0x10	; 16
    20e6:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    20ea:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    20ec:	10 e0       	ldi	r17, 0x00	; 0
    20ee:	4a c0       	rjmp	.+148    	; 0x2184 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    20f0:	8f e9       	ldi	r24, 0x9F	; 159
    20f2:	8e 0f       	add	r24, r30
    20f4:	8a 31       	cpi	r24, 0x1A	; 26
    20f6:	70 f4       	brcc	.+28     	; 0x2114 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	ee 0f       	add	r30, r30
    20fc:	ff 1f       	adc	r31, r31
    20fe:	ef 5e       	subi	r30, 0xEF	; 239
    2100:	fa 4f       	sbci	r31, 0xFA	; 250
    2102:	85 91       	lpm	r24, Z+
    2104:	94 91       	lpm	r25, Z
    2106:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <next_col_ptr+0x1>
    210a:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    210e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    2110:	10 e0       	ldi	r17, 0x00	; 0
    2112:	38 c0       	rjmp	.+112    	; 0x2184 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    2114:	8f eb       	ldi	r24, 0xBF	; 191
    2116:	8e 0f       	add	r24, r30
    2118:	8a 31       	cpi	r24, 0x1A	; 26
    211a:	70 f4       	brcc	.+28     	; 0x2138 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	ee 0f       	add	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	ef 5a       	subi	r30, 0xAF	; 175
    2124:	fa 4f       	sbci	r31, 0xFA	; 250
    2126:	85 91       	lpm	r24, Z+
    2128:	94 91       	lpm	r25, Z
    212a:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <next_col_ptr+0x1>
    212e:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2132:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    2134:	10 e0       	ldi	r17, 0x00	; 0
    2136:	26 c0       	rjmp	.+76     	; 0x2184 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    2138:	80 ed       	ldi	r24, 0xD0	; 208
    213a:	8e 0f       	add	r24, r30
    213c:	8a 30       	cpi	r24, 0x0A	; 10
    213e:	00 f5       	brcc	.+64     	; 0x2180 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	ee 0f       	add	r30, r30
    2144:	ff 1f       	adc	r31, r31
    2146:	e1 5a       	subi	r30, 0xA1	; 161
    2148:	fa 4f       	sbci	r31, 0xFA	; 250
    214a:	85 91       	lpm	r24, Z+
    214c:	94 91       	lpm	r25, Z
    214e:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <next_col_ptr+0x1>
    2152:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2156:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    2158:	10 e0       	ldi	r17, 0x00	; 0
    215a:	14 c0       	rjmp	.+40     	; 0x2184 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    215c:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <display_string>
    2160:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2164:	01 e0       	ldi	r16, 0x01	; 1
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	09 f0       	breq	.+2      	; 0x216c <scroll_display+0xf4>
    216a:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    216c:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <next_char_to_display+0x1>
    2170:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <next_char_to_display>
		display_string = 0;
    2174:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <display_string+0x1>
    2178:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    217c:	10 e0       	ldi	r17, 0x00	; 0
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2180:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    2182:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    2184:	0e 94 55 0b 	call	0x16aa	; 0x16aa <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    2188:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <colour>
    218c:	fe 01       	movw	r30, r28
    218e:	38 96       	adiw	r30, 0x08	; 8
    2190:	ce 01       	movw	r24, r28
    2192:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    2194:	11 23       	and	r17, r17
    2196:	14 f4       	brge	.+4      	; 0x219c <scroll_display+0x124>
			column_colour_data[i] = colour;
    2198:	20 83       	st	Z, r18
    219a:	01 c0       	rjmp	.+2      	; 0x219e <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    219c:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    219e:	11 0f       	add	r17, r17
    21a0:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    21a2:	e8 17       	cp	r30, r24
    21a4:	f9 07       	cpc	r31, r25
    21a6:	b1 f7       	brne	.-20     	; 0x2194 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    21a8:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    21aa:	be 01       	movw	r22, r28
    21ac:	6f 5f       	subi	r22, 0xFF	; 255
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
    21b0:	8f e0       	ldi	r24, 0x0F	; 15
    21b2:	0e 94 38 0b 	call	0x1670	; 0x1670 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    21b6:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <shift_countdown.1854>
    21ba:	88 23       	and	r24, r24
    21bc:	89 f0       	breq	.+34     	; 0x21e0 <scroll_display+0x168>
		shift_countdown--;
    21be:	81 50       	subi	r24, 0x01	; 1
    21c0:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    21c4:	00 23       	and	r16, r16
    21c6:	11 f0       	breq	.+4      	; 0x21cc <scroll_display+0x154>
    21c8:	88 23       	and	r24, r24
    21ca:	11 f0       	breq	.+4      	; 0x21d0 <scroll_display+0x158>
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <scroll_display+0x15e>
    21d0:	91 e0       	ldi	r25, 0x01	; 1
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <scroll_display+0x15e>
    21d4:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	99 23       	and	r25, r25
    21da:	29 f0       	breq	.+10     	; 0x21e6 <scroll_display+0x16e>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	03 c0       	rjmp	.+6      	; 0x21e6 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    21e0:	00 23       	and	r16, r16
    21e2:	a1 f3       	breq	.-24     	; 0x21cc <scroll_display+0x154>
    21e4:	f7 cf       	rjmp	.-18     	; 0x21d4 <scroll_display+0x15c>
	return !finished;
}
    21e6:	28 96       	adiw	r28, 0x08	; 8
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	0f 91       	pop	r16
    21fa:	08 95       	ret

000021fc <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    21fc:	cf 93       	push	r28
    21fe:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    2200:	8a 30       	cpi	r24, 0x0A	; 10
    2202:	19 f4       	brne	.+6      	; 0x220a <uart_put_char+0xe>
		uart_put_char('\r', stream);
    2204:	8d e0       	ldi	r24, 0x0D	; 13
    2206:	0e 94 fe 10 	call	0x21fc	; 0x21fc <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    220a:	9f b7       	in	r25, 0x3f	; 63
    220c:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    2210:	99 23       	and	r25, r25
    2212:	29 f1       	breq	.+74     	; 0x225e <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    2214:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <bytes_in_out_buffer>
    2218:	8f 3f       	cpi	r24, 0xFF	; 255
    221a:	d1 f3       	breq	.-12     	; 0x2210 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    221c:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    221e:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <out_insert_pos>
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	8e 0f       	add	r24, r30
    2226:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <out_insert_pos>
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	e1 53       	subi	r30, 0x31	; 49
    222e:	fc 4f       	sbci	r31, 0xFC	; 252
    2230:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    2232:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <bytes_in_out_buffer>
    2236:	8f 5f       	subi	r24, 0xFF	; 255
    2238:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    223c:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <out_insert_pos>
    2240:	8f 3f       	cpi	r24, 0xFF	; 255
    2242:	11 f4       	brne	.+4      	; 0x2248 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    2244:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    2248:	e1 ec       	ldi	r30, 0xC1	; 193
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	80 62       	ori	r24, 0x20	; 32
    2250:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    2252:	99 23       	and	r25, r25
    2254:	39 f0       	breq	.+14     	; 0x2264 <uart_put_char+0x68>
		sei();
    2256:	78 94       	sei
	}
	return 0;
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	05 c0       	rjmp	.+10     	; 0x2268 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
}
    2268:	cf 91       	pop	r28
    226a:	08 95       	ret

0000226c <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    226c:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <bytes_in_input_buffer>
    2270:	88 23       	and	r24, r24
    2272:	e1 f3       	breq	.-8      	; 0x226c <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    2274:	2f b7       	in	r18, 0x3f	; 63
    2276:	20 78       	andi	r18, 0x80	; 128
	cli();
    2278:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    227a:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <input_insert_pos>
    227e:	30 91 e0 04 	lds	r19, 0x04E0	; 0x8004e0 <bytes_in_input_buffer>
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	83 1b       	sub	r24, r19
    2286:	91 09       	sbc	r25, r1
    2288:	5a f4       	brpl	.+22     	; 0x22a0 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    228a:	e0 91 ce 04 	lds	r30, 0x04CE	; 0x8004ce <input_insert_pos>
    228e:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	e8 1b       	sub	r30, r24
    2296:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    2298:	e1 52       	subi	r30, 0x21	; 33
    229a:	fb 4f       	sbci	r31, 0xFB	; 251
    229c:	80 81       	ld	r24, Z
    229e:	0a c0       	rjmp	.+20     	; 0x22b4 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    22a0:	e0 91 ce 04 	lds	r30, 0x04CE	; 0x8004ce <input_insert_pos>
    22a4:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <bytes_in_input_buffer>
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	e8 1b       	sub	r30, r24
    22ac:	f1 09       	sbc	r31, r1
    22ae:	e1 53       	subi	r30, 0x31	; 49
    22b0:	fb 4f       	sbci	r31, 0xFB	; 251
    22b2:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    22b4:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <bytes_in_input_buffer>
    22b8:	91 50       	subi	r25, 0x01	; 1
    22ba:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    22be:	22 23       	and	r18, r18
    22c0:	09 f0       	breq	.+2      	; 0x22c4 <uart_get_char+0x58>
		sei();
    22c2:	78 94       	sei
	}	
	return c;
}
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	08 95       	ret

000022c8 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    22c8:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <out_insert_pos>
	bytes_in_out_buffer = 0;
    22cc:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <bytes_in_out_buffer>
	input_insert_pos = 0;
    22d0:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <input_insert_pos>
	bytes_in_input_buffer = 0;
    22d4:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <bytes_in_input_buffer>
	input_overrun = 0;
    22d8:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    22dc:	40 93 b1 03 	sts	0x03B1, r20	; 0x8003b1 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	88 0f       	add	r24, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	aa 1f       	adc	r26, r26
    22ea:	bb 1f       	adc	r27, r27
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	aa 1f       	adc	r26, r26
    22f2:	bb 1f       	adc	r27, r27
    22f4:	9c 01       	movw	r18, r24
    22f6:	ad 01       	movw	r20, r26
    22f8:	22 0f       	add	r18, r18
    22fa:	33 1f       	adc	r19, r19
    22fc:	44 1f       	adc	r20, r20
    22fe:	55 1f       	adc	r21, r21
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	72 e1       	ldi	r23, 0x12	; 18
    2304:	8a e7       	ldi	r24, 0x7A	; 122
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 0d 14 	call	0x281a	; 0x281a <__divmodsi4>
    230c:	ba 01       	movw	r22, r20
    230e:	a9 01       	movw	r20, r18
    2310:	4f 5f       	subi	r20, 0xFF	; 255
    2312:	5f 4f       	sbci	r21, 0xFF	; 255
    2314:	6f 4f       	sbci	r22, 0xFF	; 255
    2316:	7f 4f       	sbci	r23, 0xFF	; 255
    2318:	db 01       	movw	r26, r22
    231a:	ca 01       	movw	r24, r20
    231c:	1a f4       	brpl	.+6      	; 0x2324 <init_serial_stdio+0x5c>
    231e:	01 96       	adiw	r24, 0x01	; 1
    2320:	a1 1d       	adc	r26, r1
    2322:	b1 1d       	adc	r27, r1
    2324:	b5 95       	asr	r27
    2326:	a7 95       	ror	r26
    2328:	97 95       	ror	r25
    232a:	87 95       	ror	r24
    232c:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    232e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    2332:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    2336:	e1 ec       	ldi	r30, 0xC1	; 193
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	88 e1       	ldi	r24, 0x18	; 24
    233c:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    233e:	80 81       	ld	r24, Z
    2340:	80 68       	ori	r24, 0x80	; 128
    2342:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    2344:	e1 ee       	ldi	r30, 0xE1	; 225
    2346:	f4 e0       	ldi	r31, 0x04	; 4
    2348:	8e e1       	ldi	r24, 0x1E	; 30
    234a:	91 e0       	ldi	r25, 0x01	; 1
    234c:	93 83       	std	Z+3, r25	; 0x03
    234e:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    2350:	91 83       	std	Z+1, r25	; 0x01
    2352:	80 83       	st	Z, r24
    2354:	08 95       	ret

00002356 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    2356:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <bytes_in_input_buffer>
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	91 11       	cpse	r25, r1
    235e:	01 c0       	rjmp	.+2      	; 0x2362 <serial_input_available+0xc>
    2360:	80 e0       	ldi	r24, 0x00	; 0
}
    2362:	08 95       	ret

00002364 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    2364:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <input_insert_pos>
	bytes_in_input_buffer = 0;
    2368:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <bytes_in_input_buffer>
    236c:	08 95       	ret

0000236e <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    236e:	1f 92       	push	r1
    2370:	0f 92       	push	r0
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	0f 92       	push	r0
    2376:	11 24       	eor	r1, r1
    2378:	2f 93       	push	r18
    237a:	8f 93       	push	r24
    237c:	9f 93       	push	r25
    237e:	ef 93       	push	r30
    2380:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    2382:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <bytes_in_out_buffer>
    2386:	88 23       	and	r24, r24
    2388:	29 f1       	breq	.+74     	; 0x23d4 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    238a:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <out_insert_pos>
    238e:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <bytes_in_out_buffer>
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	82 1b       	sub	r24, r18
    2396:	91 09       	sbc	r25, r1
    2398:	5a f4       	brpl	.+22     	; 0x23b0 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    239a:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <out_insert_pos>
    239e:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	e8 1b       	sub	r30, r24
    23a6:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    23a8:	e2 53       	subi	r30, 0x32	; 50
    23aa:	fb 4f       	sbci	r31, 0xFB	; 251
    23ac:	90 81       	ld	r25, Z
    23ae:	0a c0       	rjmp	.+20     	; 0x23c4 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    23b0:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <out_insert_pos>
    23b4:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <bytes_in_out_buffer>
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	e8 1b       	sub	r30, r24
    23bc:	f1 09       	sbc	r31, r1
    23be:	e1 53       	subi	r30, 0x31	; 49
    23c0:	fc 4f       	sbci	r31, 0xFC	; 252
    23c2:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    23c4:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <bytes_in_out_buffer>
    23c8:	81 50       	subi	r24, 0x01	; 1
    23ca:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    23ce:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    23d2:	05 c0       	rjmp	.+10     	; 0x23de <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    23d4:	e1 ec       	ldi	r30, 0xC1	; 193
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	8f 7d       	andi	r24, 0xDF	; 223
    23dc:	80 83       	st	Z, r24
	}
}
    23de:	ff 91       	pop	r31
    23e0:	ef 91       	pop	r30
    23e2:	9f 91       	pop	r25
    23e4:	8f 91       	pop	r24
    23e6:	2f 91       	pop	r18
    23e8:	0f 90       	pop	r0
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	0f 90       	pop	r0
    23ee:	1f 90       	pop	r1
    23f0:	18 95       	reti

000023f2 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    23f2:	1f 92       	push	r1
    23f4:	0f 92       	push	r0
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	0f 92       	push	r0
    23fa:	11 24       	eor	r1, r1
    23fc:	2f 93       	push	r18
    23fe:	3f 93       	push	r19
    2400:	4f 93       	push	r20
    2402:	5f 93       	push	r21
    2404:	6f 93       	push	r22
    2406:	7f 93       	push	r23
    2408:	8f 93       	push	r24
    240a:	9f 93       	push	r25
    240c:	af 93       	push	r26
    240e:	bf 93       	push	r27
    2410:	cf 93       	push	r28
    2412:	ef 93       	push	r30
    2414:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    2416:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    241a:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <do_echo>
    241e:	88 23       	and	r24, r24
    2420:	49 f0       	breq	.+18     	; 0x2434 <__vector_20+0x42>
    2422:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <bytes_in_out_buffer>
    2426:	8f 3f       	cpi	r24, 0xFF	; 255
    2428:	29 f0       	breq	.+10     	; 0x2434 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	70 e0       	ldi	r23, 0x00	; 0
    242e:	8c 2f       	mov	r24, r28
    2430:	0e 94 fe 10 	call	0x21fc	; 0x21fc <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    2434:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <bytes_in_input_buffer>
    2438:	80 31       	cpi	r24, 0x10	; 16
    243a:	20 f0       	brcs	.+8      	; 0x2444 <__vector_20+0x52>
		input_overrun = 1;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <input_overrun>
    2442:	18 c0       	rjmp	.+48     	; 0x2474 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    2444:	cd 30       	cpi	r28, 0x0D	; 13
    2446:	09 f4       	brne	.+2      	; 0x244a <__vector_20+0x58>
			c = '\n';
    2448:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    244a:	e0 91 ce 04 	lds	r30, 0x04CE	; 0x8004ce <input_insert_pos>
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	8e 0f       	add	r24, r30
    2452:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <input_insert_pos>
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	e1 53       	subi	r30, 0x31	; 49
    245a:	fb 4f       	sbci	r31, 0xFB	; 251
    245c:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    245e:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <bytes_in_input_buffer>
    2462:	8f 5f       	subi	r24, 0xFF	; 255
    2464:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    2468:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <input_insert_pos>
    246c:	80 31       	cpi	r24, 0x10	; 16
    246e:	11 f4       	brne	.+4      	; 0x2474 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    2470:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <input_insert_pos>
		}
	}
}
    2474:	ff 91       	pop	r31
    2476:	ef 91       	pop	r30
    2478:	cf 91       	pop	r28
    247a:	bf 91       	pop	r27
    247c:	af 91       	pop	r26
    247e:	9f 91       	pop	r25
    2480:	8f 91       	pop	r24
    2482:	7f 91       	pop	r23
    2484:	6f 91       	pop	r22
    2486:	5f 91       	pop	r21
    2488:	4f 91       	pop	r20
    248a:	3f 91       	pop	r19
    248c:	2f 91       	pop	r18
    248e:	0f 90       	pop	r0
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	0f 90       	pop	r0
    2494:	1f 90       	pop	r1
    2496:	18 95       	reti

00002498 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    2498:	94 b1       	in	r25, 0x04	; 4
    249a:	90 6b       	ori	r25, 0xB0	; 176
    249c:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    249e:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    24a0:	90 e5       	ldi	r25, 0x50	; 80
    24a2:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    24a4:	88 30       	cpi	r24, 0x08	; 8
    24a6:	21 f0       	breq	.+8      	; 0x24b0 <spi_setup_master+0x18>
    24a8:	80 32       	cpi	r24, 0x20	; 32
    24aa:	11 f0       	breq	.+4      	; 0x24b0 <spi_setup_master+0x18>
    24ac:	82 30       	cpi	r24, 0x02	; 2
    24ae:	19 f4       	brne	.+6      	; 0x24b6 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	9d bd       	out	0x2d, r25	; 45
			break;
    24b4:	01 c0       	rjmp	.+2      	; 0x24b8 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    24b6:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    24b8:	80 32       	cpi	r24, 0x20	; 32
    24ba:	69 f0       	breq	.+26     	; 0x24d6 <spi_setup_master+0x3e>
    24bc:	28 f4       	brcc	.+10     	; 0x24c8 <spi_setup_master+0x30>
    24be:	88 30       	cpi	r24, 0x08	; 8
    24c0:	71 f0       	breq	.+28     	; 0x24de <spi_setup_master+0x46>
    24c2:	80 31       	cpi	r24, 0x10	; 16
    24c4:	61 f0       	breq	.+24     	; 0x24de <spi_setup_master+0x46>
    24c6:	0e c0       	rjmp	.+28     	; 0x24e4 <spi_setup_master+0x4c>
    24c8:	80 34       	cpi	r24, 0x40	; 64
    24ca:	29 f0       	breq	.+10     	; 0x24d6 <spi_setup_master+0x3e>
    24cc:	80 38       	cpi	r24, 0x80	; 128
    24ce:	51 f4       	brne	.+20     	; 0x24e4 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    24d0:	8c b5       	in	r24, 0x2c	; 44
    24d2:	81 60       	ori	r24, 0x01	; 1
    24d4:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    24d6:	8c b5       	in	r24, 0x2c	; 44
    24d8:	82 60       	ori	r24, 0x02	; 2
    24da:	8c bd       	out	0x2c, r24	; 44
			break;
    24dc:	03 c0       	rjmp	.+6      	; 0x24e4 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    24de:	8c b5       	in	r24, 0x2c	; 44
    24e0:	81 60       	ori	r24, 0x01	; 1
    24e2:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    24e4:	2c 98       	cbi	0x05, 4	; 5
    24e6:	08 95       	ret

000024e8 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    24e8:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    24ea:	0d b4       	in	r0, 0x2d	; 45
    24ec:	07 fe       	sbrs	r0, 7
    24ee:	fd cf       	rjmp	.-6      	; 0x24ea <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    24f0:	8e b5       	in	r24, 0x2e	; 46
    24f2:	08 95       	ret

000024f4 <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    24f4:	9f 93       	push	r25
    24f6:	8f 93       	push	r24
    24f8:	7f 93       	push	r23
    24fa:	6f 93       	push	r22
    24fc:	84 eb       	ldi	r24, 0xB4	; 180
    24fe:	96 e0       	ldi	r25, 0x06	; 6
    2500:	9f 93       	push	r25
    2502:	8f 93       	push	r24
    2504:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	08 95       	ret

00002516 <normal_display_mode>:
    2516:	8f ea       	ldi	r24, 0xAF	; 175
    2518:	96 e0       	ldi	r25, 0x06	; 6
    251a:	9f 93       	push	r25
    251c:	8f 93       	push	r24
    251e:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	08 95       	ret

00002528 <clear_terminal>:
    2528:	8a ea       	ldi	r24, 0xAA	; 170
    252a:	96 e0       	ldi	r25, 0x06	; 6
    252c:	9f 93       	push	r25
    252e:	8f 93       	push	r24
    2530:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	08 95       	ret

0000253a <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    253a:	1f 92       	push	r1
    253c:	8f 93       	push	r24
    253e:	84 ea       	ldi	r24, 0xA4	; 164
    2540:	96 e0       	ldi	r25, 0x06	; 6
    2542:	9f 93       	push	r25
    2544:	8f 93       	push	r24
    2546:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	08 95       	ret

00002554 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    2554:	8d e9       	ldi	r24, 0x9D	; 157
    2556:	96 e0       	ldi	r25, 0x06	; 6
    2558:	9f 93       	push	r25
    255a:	8f 93       	push	r24
    255c:	0e 94 28 15 	call	0x2a50	; 0x2a50 <printf_P>
}
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	08 95       	ret

00002566 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    2566:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <clockTicks>
    256a:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <clockTicks+0x1>
    256e:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <clockTicks+0x2>
    2572:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    2576:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    2578:	8c e7       	ldi	r24, 0x7C	; 124
    257a:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    2580:	83 e0       	ldi	r24, 0x03	; 3
    2582:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    2584:	ee e6       	ldi	r30, 0x6E	; 110
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	82 60       	ori	r24, 0x02	; 2
    258c:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    258e:	85 b3       	in	r24, 0x15	; 21
    2590:	82 70       	andi	r24, 0x02	; 2
    2592:	85 bb       	out	0x15, r24	; 21
    2594:	08 95       	ret

00002596 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    2596:	2f b7       	in	r18, 0x3f	; 63
	cli();
    2598:	f8 94       	cli
	returnValue = clockTicks;
    259a:	60 91 b2 03 	lds	r22, 0x03B2	; 0x8003b2 <clockTicks>
    259e:	70 91 b3 03 	lds	r23, 0x03B3	; 0x8003b3 <clockTicks+0x1>
    25a2:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <clockTicks+0x2>
    25a6:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <clockTicks+0x3>
	if(interruptsOn) {
    25aa:	22 23       	and	r18, r18
    25ac:	0c f4       	brge	.+2      	; 0x25b0 <get_current_time+0x1a>
		sei();
    25ae:	78 94       	sei
	}
	return returnValue;
}
    25b0:	08 95       	ret

000025b2 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    25b2:	1f 92       	push	r1
    25b4:	0f 92       	push	r0
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	0f 92       	push	r0
    25ba:	11 24       	eor	r1, r1
    25bc:	8f 93       	push	r24
    25be:	9f 93       	push	r25
    25c0:	af 93       	push	r26
    25c2:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
    25c4:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <clockTicks>
    25c8:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <clockTicks+0x1>
    25cc:	a0 91 b4 03 	lds	r26, 0x03B4	; 0x8003b4 <clockTicks+0x2>
    25d0:	b0 91 b5 03 	lds	r27, 0x03B5	; 0x8003b5 <clockTicks+0x3>
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	a1 1d       	adc	r26, r1
    25d8:	b1 1d       	adc	r27, r1
    25da:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <clockTicks>
    25de:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <clockTicks+0x1>
    25e2:	a0 93 b4 03 	sts	0x03B4, r26	; 0x8003b4 <clockTicks+0x2>
    25e6:	b0 93 b5 03 	sts	0x03B5, r27	; 0x8003b5 <clockTicks+0x3>
}
    25ea:	bf 91       	pop	r27
    25ec:	af 91       	pop	r26
    25ee:	9f 91       	pop	r25
    25f0:	8f 91       	pop	r24
    25f2:	0f 90       	pop	r0
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	0f 90       	pop	r0
    25f8:	1f 90       	pop	r1
    25fa:	18 95       	reti

000025fc <ceil>:
    25fc:	0e 94 cc 13 	call	0x2798	; 0x2798 <__fp_trunc>
    2600:	90 f0       	brcs	.+36     	; 0x2626 <ceil+0x2a>
    2602:	9f 37       	cpi	r25, 0x7F	; 127
    2604:	48 f4       	brcc	.+18     	; 0x2618 <ceil+0x1c>
    2606:	91 11       	cpse	r25, r1
    2608:	16 f4       	brtc	.+4      	; 0x260e <ceil+0x12>
    260a:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_szero>
    260e:	60 e0       	ldi	r22, 0x00	; 0
    2610:	70 e0       	ldi	r23, 0x00	; 0
    2612:	80 e8       	ldi	r24, 0x80	; 128
    2614:	9f e3       	ldi	r25, 0x3F	; 63
    2616:	08 95       	ret
    2618:	26 f0       	brts	.+8      	; 0x2622 <ceil+0x26>
    261a:	1b 16       	cp	r1, r27
    261c:	61 1d       	adc	r22, r1
    261e:	71 1d       	adc	r23, r1
    2620:	81 1d       	adc	r24, r1
    2622:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__fp_mintl>
    2626:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__fp_mpack>

0000262a <__fixunssfsi>:
    262a:	0e 94 b2 13 	call	0x2764	; 0x2764 <__fp_splitA>
    262e:	88 f0       	brcs	.+34     	; 0x2652 <__fixunssfsi+0x28>
    2630:	9f 57       	subi	r25, 0x7F	; 127
    2632:	98 f0       	brcs	.+38     	; 0x265a <__fixunssfsi+0x30>
    2634:	b9 2f       	mov	r27, r25
    2636:	99 27       	eor	r25, r25
    2638:	b7 51       	subi	r27, 0x17	; 23
    263a:	b0 f0       	brcs	.+44     	; 0x2668 <__fixunssfsi+0x3e>
    263c:	e1 f0       	breq	.+56     	; 0x2676 <__fixunssfsi+0x4c>
    263e:	66 0f       	add	r22, r22
    2640:	77 1f       	adc	r23, r23
    2642:	88 1f       	adc	r24, r24
    2644:	99 1f       	adc	r25, r25
    2646:	1a f0       	brmi	.+6      	; 0x264e <__fixunssfsi+0x24>
    2648:	ba 95       	dec	r27
    264a:	c9 f7       	brne	.-14     	; 0x263e <__fixunssfsi+0x14>
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <__fixunssfsi+0x4c>
    264e:	b1 30       	cpi	r27, 0x01	; 1
    2650:	91 f0       	breq	.+36     	; 0x2676 <__fixunssfsi+0x4c>
    2652:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__fp_zero>
    2656:	b1 e0       	ldi	r27, 0x01	; 1
    2658:	08 95       	ret
    265a:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__fp_zero>
    265e:	67 2f       	mov	r22, r23
    2660:	78 2f       	mov	r23, r24
    2662:	88 27       	eor	r24, r24
    2664:	b8 5f       	subi	r27, 0xF8	; 248
    2666:	39 f0       	breq	.+14     	; 0x2676 <__fixunssfsi+0x4c>
    2668:	b9 3f       	cpi	r27, 0xF9	; 249
    266a:	cc f3       	brlt	.-14     	; 0x265e <__fixunssfsi+0x34>
    266c:	86 95       	lsr	r24
    266e:	77 95       	ror	r23
    2670:	67 95       	ror	r22
    2672:	b3 95       	inc	r27
    2674:	d9 f7       	brne	.-10     	; 0x266c <__fixunssfsi+0x42>
    2676:	3e f4       	brtc	.+14     	; 0x2686 <__fixunssfsi+0x5c>
    2678:	90 95       	com	r25
    267a:	80 95       	com	r24
    267c:	70 95       	com	r23
    267e:	61 95       	neg	r22
    2680:	7f 4f       	sbci	r23, 0xFF	; 255
    2682:	8f 4f       	sbci	r24, 0xFF	; 255
    2684:	9f 4f       	sbci	r25, 0xFF	; 255
    2686:	08 95       	ret

00002688 <__floatunsisf>:
    2688:	e8 94       	clt
    268a:	09 c0       	rjmp	.+18     	; 0x269e <__floatsisf+0x12>

0000268c <__floatsisf>:
    268c:	97 fb       	bst	r25, 7
    268e:	3e f4       	brtc	.+14     	; 0x269e <__floatsisf+0x12>
    2690:	90 95       	com	r25
    2692:	80 95       	com	r24
    2694:	70 95       	com	r23
    2696:	61 95       	neg	r22
    2698:	7f 4f       	sbci	r23, 0xFF	; 255
    269a:	8f 4f       	sbci	r24, 0xFF	; 255
    269c:	9f 4f       	sbci	r25, 0xFF	; 255
    269e:	99 23       	and	r25, r25
    26a0:	a9 f0       	breq	.+42     	; 0x26cc <__floatsisf+0x40>
    26a2:	f9 2f       	mov	r31, r25
    26a4:	96 e9       	ldi	r25, 0x96	; 150
    26a6:	bb 27       	eor	r27, r27
    26a8:	93 95       	inc	r25
    26aa:	f6 95       	lsr	r31
    26ac:	87 95       	ror	r24
    26ae:	77 95       	ror	r23
    26b0:	67 95       	ror	r22
    26b2:	b7 95       	ror	r27
    26b4:	f1 11       	cpse	r31, r1
    26b6:	f8 cf       	rjmp	.-16     	; 0x26a8 <__floatsisf+0x1c>
    26b8:	fa f4       	brpl	.+62     	; 0x26f8 <__floatsisf+0x6c>
    26ba:	bb 0f       	add	r27, r27
    26bc:	11 f4       	brne	.+4      	; 0x26c2 <__floatsisf+0x36>
    26be:	60 ff       	sbrs	r22, 0
    26c0:	1b c0       	rjmp	.+54     	; 0x26f8 <__floatsisf+0x6c>
    26c2:	6f 5f       	subi	r22, 0xFF	; 255
    26c4:	7f 4f       	sbci	r23, 0xFF	; 255
    26c6:	8f 4f       	sbci	r24, 0xFF	; 255
    26c8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ca:	16 c0       	rjmp	.+44     	; 0x26f8 <__floatsisf+0x6c>
    26cc:	88 23       	and	r24, r24
    26ce:	11 f0       	breq	.+4      	; 0x26d4 <__floatsisf+0x48>
    26d0:	96 e9       	ldi	r25, 0x96	; 150
    26d2:	11 c0       	rjmp	.+34     	; 0x26f6 <__floatsisf+0x6a>
    26d4:	77 23       	and	r23, r23
    26d6:	21 f0       	breq	.+8      	; 0x26e0 <__floatsisf+0x54>
    26d8:	9e e8       	ldi	r25, 0x8E	; 142
    26da:	87 2f       	mov	r24, r23
    26dc:	76 2f       	mov	r23, r22
    26de:	05 c0       	rjmp	.+10     	; 0x26ea <__floatsisf+0x5e>
    26e0:	66 23       	and	r22, r22
    26e2:	71 f0       	breq	.+28     	; 0x2700 <__floatsisf+0x74>
    26e4:	96 e8       	ldi	r25, 0x86	; 134
    26e6:	86 2f       	mov	r24, r22
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	60 e0       	ldi	r22, 0x00	; 0
    26ec:	2a f0       	brmi	.+10     	; 0x26f8 <__floatsisf+0x6c>
    26ee:	9a 95       	dec	r25
    26f0:	66 0f       	add	r22, r22
    26f2:	77 1f       	adc	r23, r23
    26f4:	88 1f       	adc	r24, r24
    26f6:	da f7       	brpl	.-10     	; 0x26ee <__floatsisf+0x62>
    26f8:	88 0f       	add	r24, r24
    26fa:	96 95       	lsr	r25
    26fc:	87 95       	ror	r24
    26fe:	97 f9       	bld	r25, 7
    2700:	08 95       	ret

00002702 <__fp_mintl>:
    2702:	88 23       	and	r24, r24
    2704:	71 f4       	brne	.+28     	; 0x2722 <__fp_mintl+0x20>
    2706:	77 23       	and	r23, r23
    2708:	21 f0       	breq	.+8      	; 0x2712 <__fp_mintl+0x10>
    270a:	98 50       	subi	r25, 0x08	; 8
    270c:	87 2b       	or	r24, r23
    270e:	76 2f       	mov	r23, r22
    2710:	07 c0       	rjmp	.+14     	; 0x2720 <__fp_mintl+0x1e>
    2712:	66 23       	and	r22, r22
    2714:	11 f4       	brne	.+4      	; 0x271a <__fp_mintl+0x18>
    2716:	99 27       	eor	r25, r25
    2718:	0d c0       	rjmp	.+26     	; 0x2734 <__fp_mintl+0x32>
    271a:	90 51       	subi	r25, 0x10	; 16
    271c:	86 2b       	or	r24, r22
    271e:	70 e0       	ldi	r23, 0x00	; 0
    2720:	60 e0       	ldi	r22, 0x00	; 0
    2722:	2a f0       	brmi	.+10     	; 0x272e <__fp_mintl+0x2c>
    2724:	9a 95       	dec	r25
    2726:	66 0f       	add	r22, r22
    2728:	77 1f       	adc	r23, r23
    272a:	88 1f       	adc	r24, r24
    272c:	da f7       	brpl	.-10     	; 0x2724 <__fp_mintl+0x22>
    272e:	88 0f       	add	r24, r24
    2730:	96 95       	lsr	r25
    2732:	87 95       	ror	r24
    2734:	97 f9       	bld	r25, 7
    2736:	08 95       	ret

00002738 <__fp_mpack>:
    2738:	9f 3f       	cpi	r25, 0xFF	; 255
    273a:	31 f0       	breq	.+12     	; 0x2748 <__fp_mpack_finite+0xc>

0000273c <__fp_mpack_finite>:
    273c:	91 50       	subi	r25, 0x01	; 1
    273e:	20 f4       	brcc	.+8      	; 0x2748 <__fp_mpack_finite+0xc>
    2740:	87 95       	ror	r24
    2742:	77 95       	ror	r23
    2744:	67 95       	ror	r22
    2746:	b7 95       	ror	r27
    2748:	88 0f       	add	r24, r24
    274a:	91 1d       	adc	r25, r1
    274c:	96 95       	lsr	r25
    274e:	87 95       	ror	r24
    2750:	97 f9       	bld	r25, 7
    2752:	08 95       	ret

00002754 <__fp_split3>:
    2754:	57 fd       	sbrc	r21, 7
    2756:	90 58       	subi	r25, 0x80	; 128
    2758:	44 0f       	add	r20, r20
    275a:	55 1f       	adc	r21, r21
    275c:	59 f0       	breq	.+22     	; 0x2774 <__fp_splitA+0x10>
    275e:	5f 3f       	cpi	r21, 0xFF	; 255
    2760:	71 f0       	breq	.+28     	; 0x277e <__fp_splitA+0x1a>
    2762:	47 95       	ror	r20

00002764 <__fp_splitA>:
    2764:	88 0f       	add	r24, r24
    2766:	97 fb       	bst	r25, 7
    2768:	99 1f       	adc	r25, r25
    276a:	61 f0       	breq	.+24     	; 0x2784 <__fp_splitA+0x20>
    276c:	9f 3f       	cpi	r25, 0xFF	; 255
    276e:	79 f0       	breq	.+30     	; 0x278e <__fp_splitA+0x2a>
    2770:	87 95       	ror	r24
    2772:	08 95       	ret
    2774:	12 16       	cp	r1, r18
    2776:	13 06       	cpc	r1, r19
    2778:	14 06       	cpc	r1, r20
    277a:	55 1f       	adc	r21, r21
    277c:	f2 cf       	rjmp	.-28     	; 0x2762 <__fp_split3+0xe>
    277e:	46 95       	lsr	r20
    2780:	f1 df       	rcall	.-30     	; 0x2764 <__fp_splitA>
    2782:	08 c0       	rjmp	.+16     	; 0x2794 <__fp_splitA+0x30>
    2784:	16 16       	cp	r1, r22
    2786:	17 06       	cpc	r1, r23
    2788:	18 06       	cpc	r1, r24
    278a:	99 1f       	adc	r25, r25
    278c:	f1 cf       	rjmp	.-30     	; 0x2770 <__fp_splitA+0xc>
    278e:	86 95       	lsr	r24
    2790:	71 05       	cpc	r23, r1
    2792:	61 05       	cpc	r22, r1
    2794:	08 94       	sec
    2796:	08 95       	ret

00002798 <__fp_trunc>:
    2798:	0e 94 b2 13 	call	0x2764	; 0x2764 <__fp_splitA>
    279c:	a0 f0       	brcs	.+40     	; 0x27c6 <__fp_trunc+0x2e>
    279e:	be e7       	ldi	r27, 0x7E	; 126
    27a0:	b9 17       	cp	r27, r25
    27a2:	88 f4       	brcc	.+34     	; 0x27c6 <__fp_trunc+0x2e>
    27a4:	bb 27       	eor	r27, r27
    27a6:	9f 38       	cpi	r25, 0x8F	; 143
    27a8:	60 f4       	brcc	.+24     	; 0x27c2 <__fp_trunc+0x2a>
    27aa:	16 16       	cp	r1, r22
    27ac:	b1 1d       	adc	r27, r1
    27ae:	67 2f       	mov	r22, r23
    27b0:	78 2f       	mov	r23, r24
    27b2:	88 27       	eor	r24, r24
    27b4:	98 5f       	subi	r25, 0xF8	; 248
    27b6:	f7 cf       	rjmp	.-18     	; 0x27a6 <__fp_trunc+0xe>
    27b8:	86 95       	lsr	r24
    27ba:	77 95       	ror	r23
    27bc:	67 95       	ror	r22
    27be:	b1 1d       	adc	r27, r1
    27c0:	93 95       	inc	r25
    27c2:	96 39       	cpi	r25, 0x96	; 150
    27c4:	c8 f3       	brcs	.-14     	; 0x27b8 <__fp_trunc+0x20>
    27c6:	08 95       	ret

000027c8 <__fp_zero>:
    27c8:	e8 94       	clt

000027ca <__fp_szero>:
    27ca:	bb 27       	eor	r27, r27
    27cc:	66 27       	eor	r22, r22
    27ce:	77 27       	eor	r23, r23
    27d0:	cb 01       	movw	r24, r22
    27d2:	97 f9       	bld	r25, 7
    27d4:	08 95       	ret

000027d6 <__udivmodsi4>:
    27d6:	a1 e2       	ldi	r26, 0x21	; 33
    27d8:	1a 2e       	mov	r1, r26
    27da:	aa 1b       	sub	r26, r26
    27dc:	bb 1b       	sub	r27, r27
    27de:	fd 01       	movw	r30, r26
    27e0:	0d c0       	rjmp	.+26     	; 0x27fc <__udivmodsi4_ep>

000027e2 <__udivmodsi4_loop>:
    27e2:	aa 1f       	adc	r26, r26
    27e4:	bb 1f       	adc	r27, r27
    27e6:	ee 1f       	adc	r30, r30
    27e8:	ff 1f       	adc	r31, r31
    27ea:	a2 17       	cp	r26, r18
    27ec:	b3 07       	cpc	r27, r19
    27ee:	e4 07       	cpc	r30, r20
    27f0:	f5 07       	cpc	r31, r21
    27f2:	20 f0       	brcs	.+8      	; 0x27fc <__udivmodsi4_ep>
    27f4:	a2 1b       	sub	r26, r18
    27f6:	b3 0b       	sbc	r27, r19
    27f8:	e4 0b       	sbc	r30, r20
    27fa:	f5 0b       	sbc	r31, r21

000027fc <__udivmodsi4_ep>:
    27fc:	66 1f       	adc	r22, r22
    27fe:	77 1f       	adc	r23, r23
    2800:	88 1f       	adc	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	1a 94       	dec	r1
    2806:	69 f7       	brne	.-38     	; 0x27e2 <__udivmodsi4_loop>
    2808:	60 95       	com	r22
    280a:	70 95       	com	r23
    280c:	80 95       	com	r24
    280e:	90 95       	com	r25
    2810:	9b 01       	movw	r18, r22
    2812:	ac 01       	movw	r20, r24
    2814:	bd 01       	movw	r22, r26
    2816:	cf 01       	movw	r24, r30
    2818:	08 95       	ret

0000281a <__divmodsi4>:
    281a:	05 2e       	mov	r0, r21
    281c:	97 fb       	bst	r25, 7
    281e:	1e f4       	brtc	.+6      	; 0x2826 <__divmodsi4+0xc>
    2820:	00 94       	com	r0
    2822:	0e 94 24 14 	call	0x2848	; 0x2848 <__negsi2>
    2826:	57 fd       	sbrc	r21, 7
    2828:	07 d0       	rcall	.+14     	; 0x2838 <__divmodsi4_neg2>
    282a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodsi4>
    282e:	07 fc       	sbrc	r0, 7
    2830:	03 d0       	rcall	.+6      	; 0x2838 <__divmodsi4_neg2>
    2832:	4e f4       	brtc	.+18     	; 0x2846 <__divmodsi4_exit>
    2834:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__negsi2>

00002838 <__divmodsi4_neg2>:
    2838:	50 95       	com	r21
    283a:	40 95       	com	r20
    283c:	30 95       	com	r19
    283e:	21 95       	neg	r18
    2840:	3f 4f       	sbci	r19, 0xFF	; 255
    2842:	4f 4f       	sbci	r20, 0xFF	; 255
    2844:	5f 4f       	sbci	r21, 0xFF	; 255

00002846 <__divmodsi4_exit>:
    2846:	08 95       	ret

00002848 <__negsi2>:
    2848:	90 95       	com	r25
    284a:	80 95       	com	r24
    284c:	70 95       	com	r23
    284e:	61 95       	neg	r22
    2850:	7f 4f       	sbci	r23, 0xFF	; 255
    2852:	8f 4f       	sbci	r24, 0xFF	; 255
    2854:	9f 4f       	sbci	r25, 0xFF	; 255
    2856:	08 95       	ret

00002858 <__tablejump2__>:
    2858:	ee 0f       	add	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	05 90       	lpm	r0, Z+
    285e:	f4 91       	lpm	r31, Z
    2860:	e0 2d       	mov	r30, r0
    2862:	09 94       	ijmp

00002864 <random_r>:
    2864:	8f 92       	push	r8
    2866:	9f 92       	push	r9
    2868:	af 92       	push	r10
    286a:	bf 92       	push	r11
    286c:	cf 92       	push	r12
    286e:	df 92       	push	r13
    2870:	ef 92       	push	r14
    2872:	ff 92       	push	r15
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	ec 01       	movw	r28, r24
    287a:	68 81       	ld	r22, Y
    287c:	79 81       	ldd	r23, Y+1	; 0x01
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	9b 81       	ldd	r25, Y+3	; 0x03
    2882:	61 15       	cp	r22, r1
    2884:	71 05       	cpc	r23, r1
    2886:	81 05       	cpc	r24, r1
    2888:	91 05       	cpc	r25, r1
    288a:	21 f4       	brne	.+8      	; 0x2894 <random_r+0x30>
    288c:	64 e2       	ldi	r22, 0x24	; 36
    288e:	79 ed       	ldi	r23, 0xD9	; 217
    2890:	8b e5       	ldi	r24, 0x5B	; 91
    2892:	97 e0       	ldi	r25, 0x07	; 7
    2894:	2d e1       	ldi	r18, 0x1D	; 29
    2896:	33 ef       	ldi	r19, 0xF3	; 243
    2898:	41 e0       	ldi	r20, 0x01	; 1
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	0e 94 0d 14 	call	0x281a	; 0x281a <__divmodsi4>
    28a0:	49 01       	movw	r8, r18
    28a2:	5a 01       	movw	r10, r20
    28a4:	9b 01       	movw	r18, r22
    28a6:	ac 01       	movw	r20, r24
    28a8:	a7 ea       	ldi	r26, 0xA7	; 167
    28aa:	b1 e4       	ldi	r27, 0x41	; 65
    28ac:	0e 94 46 18 	call	0x308c	; 0x308c <__muluhisi3>
    28b0:	6b 01       	movw	r12, r22
    28b2:	7c 01       	movw	r14, r24
    28b4:	ac ee       	ldi	r26, 0xEC	; 236
    28b6:	b4 ef       	ldi	r27, 0xF4	; 244
    28b8:	a5 01       	movw	r20, r10
    28ba:	94 01       	movw	r18, r8
    28bc:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__mulohisi3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	8c 0d       	add	r24, r12
    28c6:	9d 1d       	adc	r25, r13
    28c8:	ae 1d       	adc	r26, r14
    28ca:	bf 1d       	adc	r27, r15
    28cc:	b7 ff       	sbrs	r27, 7
    28ce:	03 c0       	rjmp	.+6      	; 0x28d6 <random_r+0x72>
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	a1 09       	sbc	r26, r1
    28d4:	b0 48       	sbci	r27, 0x80	; 128
    28d6:	88 83       	st	Y, r24
    28d8:	99 83       	std	Y+1, r25	; 0x01
    28da:	aa 83       	std	Y+2, r26	; 0x02
    28dc:	bb 83       	std	Y+3, r27	; 0x03
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	9f 77       	andi	r25, 0x7F	; 127
    28e4:	df 91       	pop	r29
    28e6:	cf 91       	pop	r28
    28e8:	ff 90       	pop	r15
    28ea:	ef 90       	pop	r14
    28ec:	df 90       	pop	r13
    28ee:	cf 90       	pop	r12
    28f0:	bf 90       	pop	r11
    28f2:	af 90       	pop	r10
    28f4:	9f 90       	pop	r9
    28f6:	8f 90       	pop	r8
    28f8:	08 95       	ret

000028fa <random>:
    28fa:	8f 92       	push	r8
    28fc:	9f 92       	push	r9
    28fe:	af 92       	push	r10
    2900:	bf 92       	push	r11
    2902:	cf 92       	push	r12
    2904:	df 92       	push	r13
    2906:	ef 92       	push	r14
    2908:	ff 92       	push	r15
    290a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    290e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    2912:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    2916:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    291a:	61 15       	cp	r22, r1
    291c:	71 05       	cpc	r23, r1
    291e:	81 05       	cpc	r24, r1
    2920:	91 05       	cpc	r25, r1
    2922:	21 f4       	brne	.+8      	; 0x292c <random+0x32>
    2924:	64 e2       	ldi	r22, 0x24	; 36
    2926:	79 ed       	ldi	r23, 0xD9	; 217
    2928:	8b e5       	ldi	r24, 0x5B	; 91
    292a:	97 e0       	ldi	r25, 0x07	; 7
    292c:	2d e1       	ldi	r18, 0x1D	; 29
    292e:	33 ef       	ldi	r19, 0xF3	; 243
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	50 e0       	ldi	r21, 0x00	; 0
    2934:	0e 94 0d 14 	call	0x281a	; 0x281a <__divmodsi4>
    2938:	49 01       	movw	r8, r18
    293a:	5a 01       	movw	r10, r20
    293c:	9b 01       	movw	r18, r22
    293e:	ac 01       	movw	r20, r24
    2940:	a7 ea       	ldi	r26, 0xA7	; 167
    2942:	b1 e4       	ldi	r27, 0x41	; 65
    2944:	0e 94 46 18 	call	0x308c	; 0x308c <__muluhisi3>
    2948:	6b 01       	movw	r12, r22
    294a:	7c 01       	movw	r14, r24
    294c:	ac ee       	ldi	r26, 0xEC	; 236
    294e:	b4 ef       	ldi	r27, 0xF4	; 244
    2950:	a5 01       	movw	r20, r10
    2952:	94 01       	movw	r18, r8
    2954:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__mulohisi3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	8c 0d       	add	r24, r12
    295e:	9d 1d       	adc	r25, r13
    2960:	ae 1d       	adc	r26, r14
    2962:	bf 1d       	adc	r27, r15
    2964:	b7 ff       	sbrs	r27, 7
    2966:	03 c0       	rjmp	.+6      	; 0x296e <random+0x74>
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	a1 09       	sbc	r26, r1
    296c:	b0 48       	sbci	r27, 0x80	; 128
    296e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2972:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2976:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    297a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	9f 77       	andi	r25, 0x7F	; 127
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	df 90       	pop	r13
    298a:	cf 90       	pop	r12
    298c:	bf 90       	pop	r11
    298e:	af 90       	pop	r10
    2990:	9f 90       	pop	r9
    2992:	8f 90       	pop	r8
    2994:	08 95       	ret

00002996 <srandom>:
    2996:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    299a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    299e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    29a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    29a6:	08 95       	ret

000029a8 <fgetc>:
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	ec 01       	movw	r28, r24
    29ae:	2b 81       	ldd	r18, Y+3	; 0x03
    29b0:	20 ff       	sbrs	r18, 0
    29b2:	33 c0       	rjmp	.+102    	; 0x2a1a <fgetc+0x72>
    29b4:	26 ff       	sbrs	r18, 6
    29b6:	0a c0       	rjmp	.+20     	; 0x29cc <fgetc+0x24>
    29b8:	2f 7b       	andi	r18, 0xBF	; 191
    29ba:	2b 83       	std	Y+3, r18	; 0x03
    29bc:	8e 81       	ldd	r24, Y+6	; 0x06
    29be:	9f 81       	ldd	r25, Y+7	; 0x07
    29c0:	01 96       	adiw	r24, 0x01	; 1
    29c2:	9f 83       	std	Y+7, r25	; 0x07
    29c4:	8e 83       	std	Y+6, r24	; 0x06
    29c6:	8a 81       	ldd	r24, Y+2	; 0x02
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	29 c0       	rjmp	.+82     	; 0x2a1e <fgetc+0x76>
    29cc:	22 ff       	sbrs	r18, 2
    29ce:	0f c0       	rjmp	.+30     	; 0x29ee <fgetc+0x46>
    29d0:	e8 81       	ld	r30, Y
    29d2:	f9 81       	ldd	r31, Y+1	; 0x01
    29d4:	80 81       	ld	r24, Z
    29d6:	08 2e       	mov	r0, r24
    29d8:	00 0c       	add	r0, r0
    29da:	99 0b       	sbc	r25, r25
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	19 f4       	brne	.+6      	; 0x29e6 <fgetc+0x3e>
    29e0:	20 62       	ori	r18, 0x20	; 32
    29e2:	2b 83       	std	Y+3, r18	; 0x03
    29e4:	1a c0       	rjmp	.+52     	; 0x2a1a <fgetc+0x72>
    29e6:	31 96       	adiw	r30, 0x01	; 1
    29e8:	f9 83       	std	Y+1, r31	; 0x01
    29ea:	e8 83       	st	Y, r30
    29ec:	0e c0       	rjmp	.+28     	; 0x2a0a <fgetc+0x62>
    29ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    29f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    29f2:	09 95       	icall
    29f4:	97 ff       	sbrs	r25, 7
    29f6:	09 c0       	rjmp	.+18     	; 0x2a0a <fgetc+0x62>
    29f8:	2b 81       	ldd	r18, Y+3	; 0x03
    29fa:	01 96       	adiw	r24, 0x01	; 1
    29fc:	11 f0       	breq	.+4      	; 0x2a02 <fgetc+0x5a>
    29fe:	80 e2       	ldi	r24, 0x20	; 32
    2a00:	01 c0       	rjmp	.+2      	; 0x2a04 <fgetc+0x5c>
    2a02:	80 e1       	ldi	r24, 0x10	; 16
    2a04:	82 2b       	or	r24, r18
    2a06:	8b 83       	std	Y+3, r24	; 0x03
    2a08:	08 c0       	rjmp	.+16     	; 0x2a1a <fgetc+0x72>
    2a0a:	2e 81       	ldd	r18, Y+6	; 0x06
    2a0c:	3f 81       	ldd	r19, Y+7	; 0x07
    2a0e:	2f 5f       	subi	r18, 0xFF	; 255
    2a10:	3f 4f       	sbci	r19, 0xFF	; 255
    2a12:	3f 83       	std	Y+7, r19	; 0x07
    2a14:	2e 83       	std	Y+6, r18	; 0x06
    2a16:	99 27       	eor	r25, r25
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <fgetc+0x76>
    2a1a:	8f ef       	ldi	r24, 0xFF	; 255
    2a1c:	9f ef       	ldi	r25, 0xFF	; 255
    2a1e:	df 91       	pop	r29
    2a20:	cf 91       	pop	r28
    2a22:	08 95       	ret

00002a24 <printf>:
    2a24:	a0 e0       	ldi	r26, 0x00	; 0
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e8 e1       	ldi	r30, 0x18	; 24
    2a2a:	f5 e1       	ldi	r31, 0x15	; 21
    2a2c:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__prologue_saves__+0x20>
    2a30:	ae 01       	movw	r20, r28
    2a32:	4b 5f       	subi	r20, 0xFB	; 251
    2a34:	5f 4f       	sbci	r21, 0xFF	; 255
    2a36:	fa 01       	movw	r30, r20
    2a38:	61 91       	ld	r22, Z+
    2a3a:	71 91       	ld	r23, Z+
    2a3c:	af 01       	movw	r20, r30
    2a3e:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <__iob+0x2>
    2a42:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <__iob+0x3>
    2a46:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <vfprintf>
    2a4a:	e2 e0       	ldi	r30, 0x02	; 2
    2a4c:	0c 94 85 18 	jmp	0x310a	; 0x310a <__epilogue_restores__+0x20>

00002a50 <printf_P>:
    2a50:	a0 e0       	ldi	r26, 0x00	; 0
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	ee e2       	ldi	r30, 0x2E	; 46
    2a56:	f5 e1       	ldi	r31, 0x15	; 21
    2a58:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__+0x1c>
    2a5c:	ae 01       	movw	r20, r28
    2a5e:	49 5f       	subi	r20, 0xF9	; 249
    2a60:	5f 4f       	sbci	r21, 0xFF	; 255
    2a62:	da 01       	movw	r26, r20
    2a64:	6d 91       	ld	r22, X+
    2a66:	7d 91       	ld	r23, X+
    2a68:	ad 01       	movw	r20, r26
    2a6a:	01 ee       	ldi	r16, 0xE1	; 225
    2a6c:	14 e0       	ldi	r17, 0x04	; 4
    2a6e:	f8 01       	movw	r30, r16
    2a70:	82 81       	ldd	r24, Z+2	; 0x02
    2a72:	93 81       	ldd	r25, Z+3	; 0x03
    2a74:	dc 01       	movw	r26, r24
    2a76:	13 96       	adiw	r26, 0x03	; 3
    2a78:	2c 91       	ld	r18, X
    2a7a:	13 97       	sbiw	r26, 0x03	; 3
    2a7c:	28 60       	ori	r18, 0x08	; 8
    2a7e:	13 96       	adiw	r26, 0x03	; 3
    2a80:	2c 93       	st	X, r18
    2a82:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <vfprintf>
    2a86:	d8 01       	movw	r26, r16
    2a88:	12 96       	adiw	r26, 0x02	; 2
    2a8a:	ed 91       	ld	r30, X+
    2a8c:	fc 91       	ld	r31, X
    2a8e:	13 97       	sbiw	r26, 0x03	; 3
    2a90:	23 81       	ldd	r18, Z+3	; 0x03
    2a92:	27 7f       	andi	r18, 0xF7	; 247
    2a94:	23 83       	std	Z+3, r18	; 0x03
    2a96:	e4 e0       	ldi	r30, 0x04	; 4
    2a98:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__+0x1c>

00002a9c <putchar>:
    2a9c:	60 91 e3 04 	lds	r22, 0x04E3	; 0x8004e3 <__iob+0x2>
    2aa0:	70 91 e4 04 	lds	r23, 0x04E4	; 0x8004e4 <__iob+0x3>
    2aa4:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <fputc>
    2aa8:	08 95       	ret

00002aaa <vfprintf>:
    2aaa:	ab e0       	ldi	r26, 0x0B	; 11
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	eb e5       	ldi	r30, 0x5B	; 91
    2ab0:	f5 e1       	ldi	r31, 0x15	; 21
    2ab2:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__>
    2ab6:	6c 01       	movw	r12, r24
    2ab8:	7b 01       	movw	r14, r22
    2aba:	8a 01       	movw	r16, r20
    2abc:	fc 01       	movw	r30, r24
    2abe:	17 82       	std	Z+7, r1	; 0x07
    2ac0:	16 82       	std	Z+6, r1	; 0x06
    2ac2:	83 81       	ldd	r24, Z+3	; 0x03
    2ac4:	81 ff       	sbrs	r24, 1
    2ac6:	cc c1       	rjmp	.+920    	; 0x2e60 <vfprintf+0x3b6>
    2ac8:	ce 01       	movw	r24, r28
    2aca:	01 96       	adiw	r24, 0x01	; 1
    2acc:	3c 01       	movw	r6, r24
    2ace:	f6 01       	movw	r30, r12
    2ad0:	93 81       	ldd	r25, Z+3	; 0x03
    2ad2:	f7 01       	movw	r30, r14
    2ad4:	93 fd       	sbrc	r25, 3
    2ad6:	85 91       	lpm	r24, Z+
    2ad8:	93 ff       	sbrs	r25, 3
    2ada:	81 91       	ld	r24, Z+
    2adc:	7f 01       	movw	r14, r30
    2ade:	88 23       	and	r24, r24
    2ae0:	09 f4       	brne	.+2      	; 0x2ae4 <vfprintf+0x3a>
    2ae2:	ba c1       	rjmp	.+884    	; 0x2e58 <vfprintf+0x3ae>
    2ae4:	85 32       	cpi	r24, 0x25	; 37
    2ae6:	39 f4       	brne	.+14     	; 0x2af6 <vfprintf+0x4c>
    2ae8:	93 fd       	sbrc	r25, 3
    2aea:	85 91       	lpm	r24, Z+
    2aec:	93 ff       	sbrs	r25, 3
    2aee:	81 91       	ld	r24, Z+
    2af0:	7f 01       	movw	r14, r30
    2af2:	85 32       	cpi	r24, 0x25	; 37
    2af4:	29 f4       	brne	.+10     	; 0x2b00 <vfprintf+0x56>
    2af6:	b6 01       	movw	r22, r12
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <fputc>
    2afe:	e7 cf       	rjmp	.-50     	; 0x2ace <vfprintf+0x24>
    2b00:	91 2c       	mov	r9, r1
    2b02:	21 2c       	mov	r2, r1
    2b04:	31 2c       	mov	r3, r1
    2b06:	ff e1       	ldi	r31, 0x1F	; 31
    2b08:	f3 15       	cp	r31, r3
    2b0a:	d8 f0       	brcs	.+54     	; 0x2b42 <vfprintf+0x98>
    2b0c:	8b 32       	cpi	r24, 0x2B	; 43
    2b0e:	79 f0       	breq	.+30     	; 0x2b2e <vfprintf+0x84>
    2b10:	38 f4       	brcc	.+14     	; 0x2b20 <vfprintf+0x76>
    2b12:	80 32       	cpi	r24, 0x20	; 32
    2b14:	79 f0       	breq	.+30     	; 0x2b34 <vfprintf+0x8a>
    2b16:	83 32       	cpi	r24, 0x23	; 35
    2b18:	a1 f4       	brne	.+40     	; 0x2b42 <vfprintf+0x98>
    2b1a:	23 2d       	mov	r18, r3
    2b1c:	20 61       	ori	r18, 0x10	; 16
    2b1e:	1d c0       	rjmp	.+58     	; 0x2b5a <vfprintf+0xb0>
    2b20:	8d 32       	cpi	r24, 0x2D	; 45
    2b22:	61 f0       	breq	.+24     	; 0x2b3c <vfprintf+0x92>
    2b24:	80 33       	cpi	r24, 0x30	; 48
    2b26:	69 f4       	brne	.+26     	; 0x2b42 <vfprintf+0x98>
    2b28:	23 2d       	mov	r18, r3
    2b2a:	21 60       	ori	r18, 0x01	; 1
    2b2c:	16 c0       	rjmp	.+44     	; 0x2b5a <vfprintf+0xb0>
    2b2e:	83 2d       	mov	r24, r3
    2b30:	82 60       	ori	r24, 0x02	; 2
    2b32:	38 2e       	mov	r3, r24
    2b34:	e3 2d       	mov	r30, r3
    2b36:	e4 60       	ori	r30, 0x04	; 4
    2b38:	3e 2e       	mov	r3, r30
    2b3a:	2a c0       	rjmp	.+84     	; 0x2b90 <vfprintf+0xe6>
    2b3c:	f3 2d       	mov	r31, r3
    2b3e:	f8 60       	ori	r31, 0x08	; 8
    2b40:	1d c0       	rjmp	.+58     	; 0x2b7c <vfprintf+0xd2>
    2b42:	37 fc       	sbrc	r3, 7
    2b44:	2d c0       	rjmp	.+90     	; 0x2ba0 <vfprintf+0xf6>
    2b46:	20 ed       	ldi	r18, 0xD0	; 208
    2b48:	28 0f       	add	r18, r24
    2b4a:	2a 30       	cpi	r18, 0x0A	; 10
    2b4c:	40 f0       	brcs	.+16     	; 0x2b5e <vfprintf+0xb4>
    2b4e:	8e 32       	cpi	r24, 0x2E	; 46
    2b50:	b9 f4       	brne	.+46     	; 0x2b80 <vfprintf+0xd6>
    2b52:	36 fc       	sbrc	r3, 6
    2b54:	81 c1       	rjmp	.+770    	; 0x2e58 <vfprintf+0x3ae>
    2b56:	23 2d       	mov	r18, r3
    2b58:	20 64       	ori	r18, 0x40	; 64
    2b5a:	32 2e       	mov	r3, r18
    2b5c:	19 c0       	rjmp	.+50     	; 0x2b90 <vfprintf+0xe6>
    2b5e:	36 fe       	sbrs	r3, 6
    2b60:	06 c0       	rjmp	.+12     	; 0x2b6e <vfprintf+0xc4>
    2b62:	8a e0       	ldi	r24, 0x0A	; 10
    2b64:	98 9e       	mul	r9, r24
    2b66:	20 0d       	add	r18, r0
    2b68:	11 24       	eor	r1, r1
    2b6a:	92 2e       	mov	r9, r18
    2b6c:	11 c0       	rjmp	.+34     	; 0x2b90 <vfprintf+0xe6>
    2b6e:	ea e0       	ldi	r30, 0x0A	; 10
    2b70:	2e 9e       	mul	r2, r30
    2b72:	20 0d       	add	r18, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	22 2e       	mov	r2, r18
    2b78:	f3 2d       	mov	r31, r3
    2b7a:	f0 62       	ori	r31, 0x20	; 32
    2b7c:	3f 2e       	mov	r3, r31
    2b7e:	08 c0       	rjmp	.+16     	; 0x2b90 <vfprintf+0xe6>
    2b80:	8c 36       	cpi	r24, 0x6C	; 108
    2b82:	21 f4       	brne	.+8      	; 0x2b8c <vfprintf+0xe2>
    2b84:	83 2d       	mov	r24, r3
    2b86:	80 68       	ori	r24, 0x80	; 128
    2b88:	38 2e       	mov	r3, r24
    2b8a:	02 c0       	rjmp	.+4      	; 0x2b90 <vfprintf+0xe6>
    2b8c:	88 36       	cpi	r24, 0x68	; 104
    2b8e:	41 f4       	brne	.+16     	; 0x2ba0 <vfprintf+0xf6>
    2b90:	f7 01       	movw	r30, r14
    2b92:	93 fd       	sbrc	r25, 3
    2b94:	85 91       	lpm	r24, Z+
    2b96:	93 ff       	sbrs	r25, 3
    2b98:	81 91       	ld	r24, Z+
    2b9a:	7f 01       	movw	r14, r30
    2b9c:	81 11       	cpse	r24, r1
    2b9e:	b3 cf       	rjmp	.-154    	; 0x2b06 <vfprintf+0x5c>
    2ba0:	98 2f       	mov	r25, r24
    2ba2:	9f 7d       	andi	r25, 0xDF	; 223
    2ba4:	95 54       	subi	r25, 0x45	; 69
    2ba6:	93 30       	cpi	r25, 0x03	; 3
    2ba8:	28 f4       	brcc	.+10     	; 0x2bb4 <vfprintf+0x10a>
    2baa:	0c 5f       	subi	r16, 0xFC	; 252
    2bac:	1f 4f       	sbci	r17, 0xFF	; 255
    2bae:	9f e3       	ldi	r25, 0x3F	; 63
    2bb0:	99 83       	std	Y+1, r25	; 0x01
    2bb2:	0d c0       	rjmp	.+26     	; 0x2bce <vfprintf+0x124>
    2bb4:	83 36       	cpi	r24, 0x63	; 99
    2bb6:	31 f0       	breq	.+12     	; 0x2bc4 <vfprintf+0x11a>
    2bb8:	83 37       	cpi	r24, 0x73	; 115
    2bba:	71 f0       	breq	.+28     	; 0x2bd8 <vfprintf+0x12e>
    2bbc:	83 35       	cpi	r24, 0x53	; 83
    2bbe:	09 f0       	breq	.+2      	; 0x2bc2 <vfprintf+0x118>
    2bc0:	59 c0       	rjmp	.+178    	; 0x2c74 <vfprintf+0x1ca>
    2bc2:	21 c0       	rjmp	.+66     	; 0x2c06 <vfprintf+0x15c>
    2bc4:	f8 01       	movw	r30, r16
    2bc6:	80 81       	ld	r24, Z
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	0e 5f       	subi	r16, 0xFE	; 254
    2bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bce:	88 24       	eor	r8, r8
    2bd0:	83 94       	inc	r8
    2bd2:	91 2c       	mov	r9, r1
    2bd4:	53 01       	movw	r10, r6
    2bd6:	13 c0       	rjmp	.+38     	; 0x2bfe <vfprintf+0x154>
    2bd8:	28 01       	movw	r4, r16
    2bda:	f2 e0       	ldi	r31, 0x02	; 2
    2bdc:	4f 0e       	add	r4, r31
    2bde:	51 1c       	adc	r5, r1
    2be0:	f8 01       	movw	r30, r16
    2be2:	a0 80       	ld	r10, Z
    2be4:	b1 80       	ldd	r11, Z+1	; 0x01
    2be6:	36 fe       	sbrs	r3, 6
    2be8:	03 c0       	rjmp	.+6      	; 0x2bf0 <vfprintf+0x146>
    2bea:	69 2d       	mov	r22, r9
    2bec:	70 e0       	ldi	r23, 0x00	; 0
    2bee:	02 c0       	rjmp	.+4      	; 0x2bf4 <vfprintf+0x14a>
    2bf0:	6f ef       	ldi	r22, 0xFF	; 255
    2bf2:	7f ef       	ldi	r23, 0xFF	; 255
    2bf4:	c5 01       	movw	r24, r10
    2bf6:	0e 94 41 17 	call	0x2e82	; 0x2e82 <strnlen>
    2bfa:	4c 01       	movw	r8, r24
    2bfc:	82 01       	movw	r16, r4
    2bfe:	f3 2d       	mov	r31, r3
    2c00:	ff 77       	andi	r31, 0x7F	; 127
    2c02:	3f 2e       	mov	r3, r31
    2c04:	16 c0       	rjmp	.+44     	; 0x2c32 <vfprintf+0x188>
    2c06:	28 01       	movw	r4, r16
    2c08:	22 e0       	ldi	r18, 0x02	; 2
    2c0a:	42 0e       	add	r4, r18
    2c0c:	51 1c       	adc	r5, r1
    2c0e:	f8 01       	movw	r30, r16
    2c10:	a0 80       	ld	r10, Z
    2c12:	b1 80       	ldd	r11, Z+1	; 0x01
    2c14:	36 fe       	sbrs	r3, 6
    2c16:	03 c0       	rjmp	.+6      	; 0x2c1e <vfprintf+0x174>
    2c18:	69 2d       	mov	r22, r9
    2c1a:	70 e0       	ldi	r23, 0x00	; 0
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <vfprintf+0x178>
    2c1e:	6f ef       	ldi	r22, 0xFF	; 255
    2c20:	7f ef       	ldi	r23, 0xFF	; 255
    2c22:	c5 01       	movw	r24, r10
    2c24:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <strnlen_P>
    2c28:	4c 01       	movw	r8, r24
    2c2a:	f3 2d       	mov	r31, r3
    2c2c:	f0 68       	ori	r31, 0x80	; 128
    2c2e:	3f 2e       	mov	r3, r31
    2c30:	82 01       	movw	r16, r4
    2c32:	33 fc       	sbrc	r3, 3
    2c34:	1b c0       	rjmp	.+54     	; 0x2c6c <vfprintf+0x1c2>
    2c36:	82 2d       	mov	r24, r2
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	88 16       	cp	r8, r24
    2c3c:	99 06       	cpc	r9, r25
    2c3e:	b0 f4       	brcc	.+44     	; 0x2c6c <vfprintf+0x1c2>
    2c40:	b6 01       	movw	r22, r12
    2c42:	80 e2       	ldi	r24, 0x20	; 32
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <fputc>
    2c4a:	2a 94       	dec	r2
    2c4c:	f4 cf       	rjmp	.-24     	; 0x2c36 <vfprintf+0x18c>
    2c4e:	f5 01       	movw	r30, r10
    2c50:	37 fc       	sbrc	r3, 7
    2c52:	85 91       	lpm	r24, Z+
    2c54:	37 fe       	sbrs	r3, 7
    2c56:	81 91       	ld	r24, Z+
    2c58:	5f 01       	movw	r10, r30
    2c5a:	b6 01       	movw	r22, r12
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <fputc>
    2c62:	21 10       	cpse	r2, r1
    2c64:	2a 94       	dec	r2
    2c66:	21 e0       	ldi	r18, 0x01	; 1
    2c68:	82 1a       	sub	r8, r18
    2c6a:	91 08       	sbc	r9, r1
    2c6c:	81 14       	cp	r8, r1
    2c6e:	91 04       	cpc	r9, r1
    2c70:	71 f7       	brne	.-36     	; 0x2c4e <vfprintf+0x1a4>
    2c72:	e8 c0       	rjmp	.+464    	; 0x2e44 <vfprintf+0x39a>
    2c74:	84 36       	cpi	r24, 0x64	; 100
    2c76:	11 f0       	breq	.+4      	; 0x2c7c <vfprintf+0x1d2>
    2c78:	89 36       	cpi	r24, 0x69	; 105
    2c7a:	41 f5       	brne	.+80     	; 0x2ccc <vfprintf+0x222>
    2c7c:	f8 01       	movw	r30, r16
    2c7e:	37 fe       	sbrs	r3, 7
    2c80:	07 c0       	rjmp	.+14     	; 0x2c90 <vfprintf+0x1e6>
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	0c 5f       	subi	r16, 0xFC	; 252
    2c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c8e:	08 c0       	rjmp	.+16     	; 0x2ca0 <vfprintf+0x1f6>
    2c90:	60 81       	ld	r22, Z
    2c92:	71 81       	ldd	r23, Z+1	; 0x01
    2c94:	07 2e       	mov	r0, r23
    2c96:	00 0c       	add	r0, r0
    2c98:	88 0b       	sbc	r24, r24
    2c9a:	99 0b       	sbc	r25, r25
    2c9c:	0e 5f       	subi	r16, 0xFE	; 254
    2c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca0:	f3 2d       	mov	r31, r3
    2ca2:	ff 76       	andi	r31, 0x6F	; 111
    2ca4:	3f 2e       	mov	r3, r31
    2ca6:	97 ff       	sbrs	r25, 7
    2ca8:	09 c0       	rjmp	.+18     	; 0x2cbc <vfprintf+0x212>
    2caa:	90 95       	com	r25
    2cac:	80 95       	com	r24
    2cae:	70 95       	com	r23
    2cb0:	61 95       	neg	r22
    2cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb4:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb8:	f0 68       	ori	r31, 0x80	; 128
    2cba:	3f 2e       	mov	r3, r31
    2cbc:	2a e0       	ldi	r18, 0x0A	; 10
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	a3 01       	movw	r20, r6
    2cc2:	0e 94 88 17 	call	0x2f10	; 0x2f10 <__ultoa_invert>
    2cc6:	88 2e       	mov	r8, r24
    2cc8:	86 18       	sub	r8, r6
    2cca:	45 c0       	rjmp	.+138    	; 0x2d56 <vfprintf+0x2ac>
    2ccc:	85 37       	cpi	r24, 0x75	; 117
    2cce:	31 f4       	brne	.+12     	; 0x2cdc <vfprintf+0x232>
    2cd0:	23 2d       	mov	r18, r3
    2cd2:	2f 7e       	andi	r18, 0xEF	; 239
    2cd4:	b2 2e       	mov	r11, r18
    2cd6:	2a e0       	ldi	r18, 0x0A	; 10
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	25 c0       	rjmp	.+74     	; 0x2d26 <vfprintf+0x27c>
    2cdc:	93 2d       	mov	r25, r3
    2cde:	99 7f       	andi	r25, 0xF9	; 249
    2ce0:	b9 2e       	mov	r11, r25
    2ce2:	8f 36       	cpi	r24, 0x6F	; 111
    2ce4:	c1 f0       	breq	.+48     	; 0x2d16 <vfprintf+0x26c>
    2ce6:	18 f4       	brcc	.+6      	; 0x2cee <vfprintf+0x244>
    2ce8:	88 35       	cpi	r24, 0x58	; 88
    2cea:	79 f0       	breq	.+30     	; 0x2d0a <vfprintf+0x260>
    2cec:	b5 c0       	rjmp	.+362    	; 0x2e58 <vfprintf+0x3ae>
    2cee:	80 37       	cpi	r24, 0x70	; 112
    2cf0:	19 f0       	breq	.+6      	; 0x2cf8 <vfprintf+0x24e>
    2cf2:	88 37       	cpi	r24, 0x78	; 120
    2cf4:	21 f0       	breq	.+8      	; 0x2cfe <vfprintf+0x254>
    2cf6:	b0 c0       	rjmp	.+352    	; 0x2e58 <vfprintf+0x3ae>
    2cf8:	e9 2f       	mov	r30, r25
    2cfa:	e0 61       	ori	r30, 0x10	; 16
    2cfc:	be 2e       	mov	r11, r30
    2cfe:	b4 fe       	sbrs	r11, 4
    2d00:	0d c0       	rjmp	.+26     	; 0x2d1c <vfprintf+0x272>
    2d02:	fb 2d       	mov	r31, r11
    2d04:	f4 60       	ori	r31, 0x04	; 4
    2d06:	bf 2e       	mov	r11, r31
    2d08:	09 c0       	rjmp	.+18     	; 0x2d1c <vfprintf+0x272>
    2d0a:	34 fe       	sbrs	r3, 4
    2d0c:	0a c0       	rjmp	.+20     	; 0x2d22 <vfprintf+0x278>
    2d0e:	29 2f       	mov	r18, r25
    2d10:	26 60       	ori	r18, 0x06	; 6
    2d12:	b2 2e       	mov	r11, r18
    2d14:	06 c0       	rjmp	.+12     	; 0x2d22 <vfprintf+0x278>
    2d16:	28 e0       	ldi	r18, 0x08	; 8
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	05 c0       	rjmp	.+10     	; 0x2d26 <vfprintf+0x27c>
    2d1c:	20 e1       	ldi	r18, 0x10	; 16
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	02 c0       	rjmp	.+4      	; 0x2d26 <vfprintf+0x27c>
    2d22:	20 e1       	ldi	r18, 0x10	; 16
    2d24:	32 e0       	ldi	r19, 0x02	; 2
    2d26:	f8 01       	movw	r30, r16
    2d28:	b7 fe       	sbrs	r11, 7
    2d2a:	07 c0       	rjmp	.+14     	; 0x2d3a <vfprintf+0x290>
    2d2c:	60 81       	ld	r22, Z
    2d2e:	71 81       	ldd	r23, Z+1	; 0x01
    2d30:	82 81       	ldd	r24, Z+2	; 0x02
    2d32:	93 81       	ldd	r25, Z+3	; 0x03
    2d34:	0c 5f       	subi	r16, 0xFC	; 252
    2d36:	1f 4f       	sbci	r17, 0xFF	; 255
    2d38:	06 c0       	rjmp	.+12     	; 0x2d46 <vfprintf+0x29c>
    2d3a:	60 81       	ld	r22, Z
    2d3c:	71 81       	ldd	r23, Z+1	; 0x01
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	0e 5f       	subi	r16, 0xFE	; 254
    2d44:	1f 4f       	sbci	r17, 0xFF	; 255
    2d46:	a3 01       	movw	r20, r6
    2d48:	0e 94 88 17 	call	0x2f10	; 0x2f10 <__ultoa_invert>
    2d4c:	88 2e       	mov	r8, r24
    2d4e:	86 18       	sub	r8, r6
    2d50:	fb 2d       	mov	r31, r11
    2d52:	ff 77       	andi	r31, 0x7F	; 127
    2d54:	3f 2e       	mov	r3, r31
    2d56:	36 fe       	sbrs	r3, 6
    2d58:	0d c0       	rjmp	.+26     	; 0x2d74 <vfprintf+0x2ca>
    2d5a:	23 2d       	mov	r18, r3
    2d5c:	2e 7f       	andi	r18, 0xFE	; 254
    2d5e:	a2 2e       	mov	r10, r18
    2d60:	89 14       	cp	r8, r9
    2d62:	58 f4       	brcc	.+22     	; 0x2d7a <vfprintf+0x2d0>
    2d64:	34 fe       	sbrs	r3, 4
    2d66:	0b c0       	rjmp	.+22     	; 0x2d7e <vfprintf+0x2d4>
    2d68:	32 fc       	sbrc	r3, 2
    2d6a:	09 c0       	rjmp	.+18     	; 0x2d7e <vfprintf+0x2d4>
    2d6c:	83 2d       	mov	r24, r3
    2d6e:	8e 7e       	andi	r24, 0xEE	; 238
    2d70:	a8 2e       	mov	r10, r24
    2d72:	05 c0       	rjmp	.+10     	; 0x2d7e <vfprintf+0x2d4>
    2d74:	b8 2c       	mov	r11, r8
    2d76:	a3 2c       	mov	r10, r3
    2d78:	03 c0       	rjmp	.+6      	; 0x2d80 <vfprintf+0x2d6>
    2d7a:	b8 2c       	mov	r11, r8
    2d7c:	01 c0       	rjmp	.+2      	; 0x2d80 <vfprintf+0x2d6>
    2d7e:	b9 2c       	mov	r11, r9
    2d80:	a4 fe       	sbrs	r10, 4
    2d82:	0f c0       	rjmp	.+30     	; 0x2da2 <vfprintf+0x2f8>
    2d84:	fe 01       	movw	r30, r28
    2d86:	e8 0d       	add	r30, r8
    2d88:	f1 1d       	adc	r31, r1
    2d8a:	80 81       	ld	r24, Z
    2d8c:	80 33       	cpi	r24, 0x30	; 48
    2d8e:	21 f4       	brne	.+8      	; 0x2d98 <vfprintf+0x2ee>
    2d90:	9a 2d       	mov	r25, r10
    2d92:	99 7e       	andi	r25, 0xE9	; 233
    2d94:	a9 2e       	mov	r10, r25
    2d96:	09 c0       	rjmp	.+18     	; 0x2daa <vfprintf+0x300>
    2d98:	a2 fe       	sbrs	r10, 2
    2d9a:	06 c0       	rjmp	.+12     	; 0x2da8 <vfprintf+0x2fe>
    2d9c:	b3 94       	inc	r11
    2d9e:	b3 94       	inc	r11
    2da0:	04 c0       	rjmp	.+8      	; 0x2daa <vfprintf+0x300>
    2da2:	8a 2d       	mov	r24, r10
    2da4:	86 78       	andi	r24, 0x86	; 134
    2da6:	09 f0       	breq	.+2      	; 0x2daa <vfprintf+0x300>
    2da8:	b3 94       	inc	r11
    2daa:	a3 fc       	sbrc	r10, 3
    2dac:	11 c0       	rjmp	.+34     	; 0x2dd0 <vfprintf+0x326>
    2dae:	a0 fe       	sbrs	r10, 0
    2db0:	06 c0       	rjmp	.+12     	; 0x2dbe <vfprintf+0x314>
    2db2:	b2 14       	cp	r11, r2
    2db4:	88 f4       	brcc	.+34     	; 0x2dd8 <vfprintf+0x32e>
    2db6:	28 0c       	add	r2, r8
    2db8:	92 2c       	mov	r9, r2
    2dba:	9b 18       	sub	r9, r11
    2dbc:	0e c0       	rjmp	.+28     	; 0x2dda <vfprintf+0x330>
    2dbe:	b2 14       	cp	r11, r2
    2dc0:	60 f4       	brcc	.+24     	; 0x2dda <vfprintf+0x330>
    2dc2:	b6 01       	movw	r22, r12
    2dc4:	80 e2       	ldi	r24, 0x20	; 32
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <fputc>
    2dcc:	b3 94       	inc	r11
    2dce:	f7 cf       	rjmp	.-18     	; 0x2dbe <vfprintf+0x314>
    2dd0:	b2 14       	cp	r11, r2
    2dd2:	18 f4       	brcc	.+6      	; 0x2dda <vfprintf+0x330>
    2dd4:	2b 18       	sub	r2, r11
    2dd6:	02 c0       	rjmp	.+4      	; 0x2ddc <vfprintf+0x332>
    2dd8:	98 2c       	mov	r9, r8
    2dda:	21 2c       	mov	r2, r1
    2ddc:	a4 fe       	sbrs	r10, 4
    2dde:	10 c0       	rjmp	.+32     	; 0x2e00 <vfprintf+0x356>
    2de0:	b6 01       	movw	r22, r12
    2de2:	80 e3       	ldi	r24, 0x30	; 48
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <fputc>
    2dea:	a2 fe       	sbrs	r10, 2
    2dec:	17 c0       	rjmp	.+46     	; 0x2e1c <vfprintf+0x372>
    2dee:	a1 fc       	sbrc	r10, 1
    2df0:	03 c0       	rjmp	.+6      	; 0x2df8 <vfprintf+0x34e>
    2df2:	88 e7       	ldi	r24, 0x78	; 120
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <vfprintf+0x352>
    2df8:	88 e5       	ldi	r24, 0x58	; 88
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	b6 01       	movw	r22, r12
    2dfe:	0c c0       	rjmp	.+24     	; 0x2e18 <vfprintf+0x36e>
    2e00:	8a 2d       	mov	r24, r10
    2e02:	86 78       	andi	r24, 0x86	; 134
    2e04:	59 f0       	breq	.+22     	; 0x2e1c <vfprintf+0x372>
    2e06:	a1 fe       	sbrs	r10, 1
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <vfprintf+0x364>
    2e0a:	8b e2       	ldi	r24, 0x2B	; 43
    2e0c:	01 c0       	rjmp	.+2      	; 0x2e10 <vfprintf+0x366>
    2e0e:	80 e2       	ldi	r24, 0x20	; 32
    2e10:	a7 fc       	sbrc	r10, 7
    2e12:	8d e2       	ldi	r24, 0x2D	; 45
    2e14:	b6 01       	movw	r22, r12
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <fputc>
    2e1c:	89 14       	cp	r8, r9
    2e1e:	38 f4       	brcc	.+14     	; 0x2e2e <vfprintf+0x384>
    2e20:	b6 01       	movw	r22, r12
    2e22:	80 e3       	ldi	r24, 0x30	; 48
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <fputc>
    2e2a:	9a 94       	dec	r9
    2e2c:	f7 cf       	rjmp	.-18     	; 0x2e1c <vfprintf+0x372>
    2e2e:	8a 94       	dec	r8
    2e30:	f3 01       	movw	r30, r6
    2e32:	e8 0d       	add	r30, r8
    2e34:	f1 1d       	adc	r31, r1
    2e36:	80 81       	ld	r24, Z
    2e38:	b6 01       	movw	r22, r12
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <fputc>
    2e40:	81 10       	cpse	r8, r1
    2e42:	f5 cf       	rjmp	.-22     	; 0x2e2e <vfprintf+0x384>
    2e44:	22 20       	and	r2, r2
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <vfprintf+0x3a0>
    2e48:	42 ce       	rjmp	.-892    	; 0x2ace <vfprintf+0x24>
    2e4a:	b6 01       	movw	r22, r12
    2e4c:	80 e2       	ldi	r24, 0x20	; 32
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <fputc>
    2e54:	2a 94       	dec	r2
    2e56:	f6 cf       	rjmp	.-20     	; 0x2e44 <vfprintf+0x39a>
    2e58:	f6 01       	movw	r30, r12
    2e5a:	86 81       	ldd	r24, Z+6	; 0x06
    2e5c:	97 81       	ldd	r25, Z+7	; 0x07
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <vfprintf+0x3ba>
    2e60:	8f ef       	ldi	r24, 0xFF	; 255
    2e62:	9f ef       	ldi	r25, 0xFF	; 255
    2e64:	2b 96       	adiw	r28, 0x0b	; 11
    2e66:	e2 e1       	ldi	r30, 0x12	; 18
    2e68:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__>

00002e6c <strnlen_P>:
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	05 90       	lpm	r0, Z+
    2e70:	61 50       	subi	r22, 0x01	; 1
    2e72:	70 40       	sbci	r23, 0x00	; 0
    2e74:	01 10       	cpse	r0, r1
    2e76:	d8 f7       	brcc	.-10     	; 0x2e6e <strnlen_P+0x2>
    2e78:	80 95       	com	r24
    2e7a:	90 95       	com	r25
    2e7c:	8e 0f       	add	r24, r30
    2e7e:	9f 1f       	adc	r25, r31
    2e80:	08 95       	ret

00002e82 <strnlen>:
    2e82:	fc 01       	movw	r30, r24
    2e84:	61 50       	subi	r22, 0x01	; 1
    2e86:	70 40       	sbci	r23, 0x00	; 0
    2e88:	01 90       	ld	r0, Z+
    2e8a:	01 10       	cpse	r0, r1
    2e8c:	d8 f7       	brcc	.-10     	; 0x2e84 <strnlen+0x2>
    2e8e:	80 95       	com	r24
    2e90:	90 95       	com	r25
    2e92:	8e 0f       	add	r24, r30
    2e94:	9f 1f       	adc	r25, r31
    2e96:	08 95       	ret

00002e98 <fputc>:
    2e98:	0f 93       	push	r16
    2e9a:	1f 93       	push	r17
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	fb 01       	movw	r30, r22
    2ea2:	23 81       	ldd	r18, Z+3	; 0x03
    2ea4:	21 fd       	sbrc	r18, 1
    2ea6:	03 c0       	rjmp	.+6      	; 0x2eae <fputc+0x16>
    2ea8:	8f ef       	ldi	r24, 0xFF	; 255
    2eaa:	9f ef       	ldi	r25, 0xFF	; 255
    2eac:	2c c0       	rjmp	.+88     	; 0x2f06 <fputc+0x6e>
    2eae:	22 ff       	sbrs	r18, 2
    2eb0:	16 c0       	rjmp	.+44     	; 0x2ede <fputc+0x46>
    2eb2:	46 81       	ldd	r20, Z+6	; 0x06
    2eb4:	57 81       	ldd	r21, Z+7	; 0x07
    2eb6:	24 81       	ldd	r18, Z+4	; 0x04
    2eb8:	35 81       	ldd	r19, Z+5	; 0x05
    2eba:	42 17       	cp	r20, r18
    2ebc:	53 07       	cpc	r21, r19
    2ebe:	44 f4       	brge	.+16     	; 0x2ed0 <fputc+0x38>
    2ec0:	a0 81       	ld	r26, Z
    2ec2:	b1 81       	ldd	r27, Z+1	; 0x01
    2ec4:	9d 01       	movw	r18, r26
    2ec6:	2f 5f       	subi	r18, 0xFF	; 255
    2ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eca:	31 83       	std	Z+1, r19	; 0x01
    2ecc:	20 83       	st	Z, r18
    2ece:	8c 93       	st	X, r24
    2ed0:	26 81       	ldd	r18, Z+6	; 0x06
    2ed2:	37 81       	ldd	r19, Z+7	; 0x07
    2ed4:	2f 5f       	subi	r18, 0xFF	; 255
    2ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed8:	37 83       	std	Z+7, r19	; 0x07
    2eda:	26 83       	std	Z+6, r18	; 0x06
    2edc:	14 c0       	rjmp	.+40     	; 0x2f06 <fputc+0x6e>
    2ede:	8b 01       	movw	r16, r22
    2ee0:	ec 01       	movw	r28, r24
    2ee2:	fb 01       	movw	r30, r22
    2ee4:	00 84       	ldd	r0, Z+8	; 0x08
    2ee6:	f1 85       	ldd	r31, Z+9	; 0x09
    2ee8:	e0 2d       	mov	r30, r0
    2eea:	09 95       	icall
    2eec:	89 2b       	or	r24, r25
    2eee:	e1 f6       	brne	.-72     	; 0x2ea8 <fputc+0x10>
    2ef0:	d8 01       	movw	r26, r16
    2ef2:	16 96       	adiw	r26, 0x06	; 6
    2ef4:	8d 91       	ld	r24, X+
    2ef6:	9c 91       	ld	r25, X
    2ef8:	17 97       	sbiw	r26, 0x07	; 7
    2efa:	01 96       	adiw	r24, 0x01	; 1
    2efc:	17 96       	adiw	r26, 0x07	; 7
    2efe:	9c 93       	st	X, r25
    2f00:	8e 93       	st	-X, r24
    2f02:	16 97       	sbiw	r26, 0x06	; 6
    2f04:	ce 01       	movw	r24, r28
    2f06:	df 91       	pop	r29
    2f08:	cf 91       	pop	r28
    2f0a:	1f 91       	pop	r17
    2f0c:	0f 91       	pop	r16
    2f0e:	08 95       	ret

00002f10 <__ultoa_invert>:
    2f10:	fa 01       	movw	r30, r20
    2f12:	aa 27       	eor	r26, r26
    2f14:	28 30       	cpi	r18, 0x08	; 8
    2f16:	51 f1       	breq	.+84     	; 0x2f6c <__ultoa_invert+0x5c>
    2f18:	20 31       	cpi	r18, 0x10	; 16
    2f1a:	81 f1       	breq	.+96     	; 0x2f7c <__ultoa_invert+0x6c>
    2f1c:	e8 94       	clt
    2f1e:	6f 93       	push	r22
    2f20:	6e 7f       	andi	r22, 0xFE	; 254
    2f22:	6e 5f       	subi	r22, 0xFE	; 254
    2f24:	7f 4f       	sbci	r23, 0xFF	; 255
    2f26:	8f 4f       	sbci	r24, 0xFF	; 255
    2f28:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2a:	af 4f       	sbci	r26, 0xFF	; 255
    2f2c:	b1 e0       	ldi	r27, 0x01	; 1
    2f2e:	3e d0       	rcall	.+124    	; 0x2fac <__ultoa_invert+0x9c>
    2f30:	b4 e0       	ldi	r27, 0x04	; 4
    2f32:	3c d0       	rcall	.+120    	; 0x2fac <__ultoa_invert+0x9c>
    2f34:	67 0f       	add	r22, r23
    2f36:	78 1f       	adc	r23, r24
    2f38:	89 1f       	adc	r24, r25
    2f3a:	9a 1f       	adc	r25, r26
    2f3c:	a1 1d       	adc	r26, r1
    2f3e:	68 0f       	add	r22, r24
    2f40:	79 1f       	adc	r23, r25
    2f42:	8a 1f       	adc	r24, r26
    2f44:	91 1d       	adc	r25, r1
    2f46:	a1 1d       	adc	r26, r1
    2f48:	6a 0f       	add	r22, r26
    2f4a:	71 1d       	adc	r23, r1
    2f4c:	81 1d       	adc	r24, r1
    2f4e:	91 1d       	adc	r25, r1
    2f50:	a1 1d       	adc	r26, r1
    2f52:	20 d0       	rcall	.+64     	; 0x2f94 <__ultoa_invert+0x84>
    2f54:	09 f4       	brne	.+2      	; 0x2f58 <__ultoa_invert+0x48>
    2f56:	68 94       	set
    2f58:	3f 91       	pop	r19
    2f5a:	2a e0       	ldi	r18, 0x0A	; 10
    2f5c:	26 9f       	mul	r18, r22
    2f5e:	11 24       	eor	r1, r1
    2f60:	30 19       	sub	r19, r0
    2f62:	30 5d       	subi	r19, 0xD0	; 208
    2f64:	31 93       	st	Z+, r19
    2f66:	de f6       	brtc	.-74     	; 0x2f1e <__ultoa_invert+0xe>
    2f68:	cf 01       	movw	r24, r30
    2f6a:	08 95       	ret
    2f6c:	46 2f       	mov	r20, r22
    2f6e:	47 70       	andi	r20, 0x07	; 7
    2f70:	40 5d       	subi	r20, 0xD0	; 208
    2f72:	41 93       	st	Z+, r20
    2f74:	b3 e0       	ldi	r27, 0x03	; 3
    2f76:	0f d0       	rcall	.+30     	; 0x2f96 <__ultoa_invert+0x86>
    2f78:	c9 f7       	brne	.-14     	; 0x2f6c <__ultoa_invert+0x5c>
    2f7a:	f6 cf       	rjmp	.-20     	; 0x2f68 <__ultoa_invert+0x58>
    2f7c:	46 2f       	mov	r20, r22
    2f7e:	4f 70       	andi	r20, 0x0F	; 15
    2f80:	40 5d       	subi	r20, 0xD0	; 208
    2f82:	4a 33       	cpi	r20, 0x3A	; 58
    2f84:	18 f0       	brcs	.+6      	; 0x2f8c <__ultoa_invert+0x7c>
    2f86:	49 5d       	subi	r20, 0xD9	; 217
    2f88:	31 fd       	sbrc	r19, 1
    2f8a:	40 52       	subi	r20, 0x20	; 32
    2f8c:	41 93       	st	Z+, r20
    2f8e:	02 d0       	rcall	.+4      	; 0x2f94 <__ultoa_invert+0x84>
    2f90:	a9 f7       	brne	.-22     	; 0x2f7c <__ultoa_invert+0x6c>
    2f92:	ea cf       	rjmp	.-44     	; 0x2f68 <__ultoa_invert+0x58>
    2f94:	b4 e0       	ldi	r27, 0x04	; 4
    2f96:	a6 95       	lsr	r26
    2f98:	97 95       	ror	r25
    2f9a:	87 95       	ror	r24
    2f9c:	77 95       	ror	r23
    2f9e:	67 95       	ror	r22
    2fa0:	ba 95       	dec	r27
    2fa2:	c9 f7       	brne	.-14     	; 0x2f96 <__ultoa_invert+0x86>
    2fa4:	00 97       	sbiw	r24, 0x00	; 0
    2fa6:	61 05       	cpc	r22, r1
    2fa8:	71 05       	cpc	r23, r1
    2faa:	08 95       	ret
    2fac:	9b 01       	movw	r18, r22
    2fae:	ac 01       	movw	r20, r24
    2fb0:	0a 2e       	mov	r0, r26
    2fb2:	06 94       	lsr	r0
    2fb4:	57 95       	ror	r21
    2fb6:	47 95       	ror	r20
    2fb8:	37 95       	ror	r19
    2fba:	27 95       	ror	r18
    2fbc:	ba 95       	dec	r27
    2fbe:	c9 f7       	brne	.-14     	; 0x2fb2 <__ultoa_invert+0xa2>
    2fc0:	62 0f       	add	r22, r18
    2fc2:	73 1f       	adc	r23, r19
    2fc4:	84 1f       	adc	r24, r20
    2fc6:	95 1f       	adc	r25, r21
    2fc8:	a0 1d       	adc	r26, r0
    2fca:	08 95       	ret

00002fcc <eeprom_read_block>:
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22

00002fd0 <eeprom_read_blraw>:
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	f9 99       	sbic	0x1f, 1	; 31
    2fd4:	fe cf       	rjmp	.-4      	; 0x2fd2 <eeprom_read_blraw+0x2>
    2fd6:	06 c0       	rjmp	.+12     	; 0x2fe4 <eeprom_read_blraw+0x14>
    2fd8:	f2 bd       	out	0x22, r31	; 34
    2fda:	e1 bd       	out	0x21, r30	; 33
    2fdc:	f8 9a       	sbi	0x1f, 0	; 31
    2fde:	31 96       	adiw	r30, 0x01	; 1
    2fe0:	00 b4       	in	r0, 0x20	; 32
    2fe2:	0d 92       	st	X+, r0
    2fe4:	41 50       	subi	r20, 0x01	; 1
    2fe6:	50 40       	sbci	r21, 0x00	; 0
    2fe8:	b8 f7       	brcc	.-18     	; 0x2fd8 <eeprom_read_blraw+0x8>
    2fea:	08 95       	ret

00002fec <eeprom_read_byte>:
    2fec:	f9 99       	sbic	0x1f, 1	; 31
    2fee:	fe cf       	rjmp	.-4      	; 0x2fec <eeprom_read_byte>
    2ff0:	92 bd       	out	0x22, r25	; 34
    2ff2:	81 bd       	out	0x21, r24	; 33
    2ff4:	f8 9a       	sbi	0x1f, 0	; 31
    2ff6:	99 27       	eor	r25, r25
    2ff8:	80 b5       	in	r24, 0x20	; 32
    2ffa:	08 95       	ret

00002ffc <eeprom_read_dword>:
    2ffc:	a6 e1       	ldi	r26, 0x16	; 22
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	44 e0       	ldi	r20, 0x04	; 4
    3002:	50 e0       	ldi	r21, 0x00	; 0
    3004:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <eeprom_read_blraw>

00003008 <eeprom_read_word>:
    3008:	a8 e1       	ldi	r26, 0x18	; 24
    300a:	b0 e0       	ldi	r27, 0x00	; 0
    300c:	42 e0       	ldi	r20, 0x02	; 2
    300e:	50 e0       	ldi	r21, 0x00	; 0
    3010:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <eeprom_read_blraw>

00003014 <eeprom_update_byte>:
    3014:	26 2f       	mov	r18, r22

00003016 <eeprom_update_r18>:
    3016:	f9 99       	sbic	0x1f, 1	; 31
    3018:	fe cf       	rjmp	.-4      	; 0x3016 <eeprom_update_r18>
    301a:	92 bd       	out	0x22, r25	; 34
    301c:	81 bd       	out	0x21, r24	; 33
    301e:	f8 9a       	sbi	0x1f, 0	; 31
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	00 b4       	in	r0, 0x20	; 32
    3024:	02 16       	cp	r0, r18
    3026:	39 f0       	breq	.+14     	; 0x3036 <eeprom_update_r18+0x20>
    3028:	1f ba       	out	0x1f, r1	; 31
    302a:	20 bd       	out	0x20, r18	; 32
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	fa 9a       	sbi	0x1f, 2	; 31
    3032:	f9 9a       	sbi	0x1f, 1	; 31
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	08 95       	ret

00003038 <eeprom_update_dword>:
    3038:	03 96       	adiw	r24, 0x03	; 3
    303a:	27 2f       	mov	r18, r23
    303c:	0e 94 0b 18 	call	0x3016	; 0x3016 <eeprom_update_r18>
    3040:	0e 94 0a 18 	call	0x3014	; 0x3014 <eeprom_update_byte>
    3044:	25 2f       	mov	r18, r21
    3046:	0e 94 0b 18 	call	0x3016	; 0x3016 <eeprom_update_r18>
    304a:	24 2f       	mov	r18, r20
    304c:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <eeprom_update_r18>

00003050 <eeprom_update_word>:
    3050:	01 96       	adiw	r24, 0x01	; 1
    3052:	27 2f       	mov	r18, r23
    3054:	0e 94 0b 18 	call	0x3016	; 0x3016 <eeprom_update_r18>
    3058:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <eeprom_update_byte>

0000305c <eeprom_write_block>:
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	03 c0       	rjmp	.+6      	; 0x3068 <eeprom_write_block+0xc>
    3062:	2d 91       	ld	r18, X+
    3064:	0e 94 39 18 	call	0x3072	; 0x3072 <eeprom_write_r18>
    3068:	41 50       	subi	r20, 0x01	; 1
    306a:	50 40       	sbci	r21, 0x00	; 0
    306c:	d0 f7       	brcc	.-12     	; 0x3062 <eeprom_write_block+0x6>
    306e:	08 95       	ret

00003070 <eeprom_write_byte>:
    3070:	26 2f       	mov	r18, r22

00003072 <eeprom_write_r18>:
    3072:	f9 99       	sbic	0x1f, 1	; 31
    3074:	fe cf       	rjmp	.-4      	; 0x3072 <eeprom_write_r18>
    3076:	1f ba       	out	0x1f, r1	; 31
    3078:	92 bd       	out	0x22, r25	; 34
    307a:	81 bd       	out	0x21, r24	; 33
    307c:	20 bd       	out	0x20, r18	; 32
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	fa 9a       	sbi	0x1f, 2	; 31
    3084:	f9 9a       	sbi	0x1f, 1	; 31
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	01 96       	adiw	r24, 0x01	; 1
    308a:	08 95       	ret

0000308c <__muluhisi3>:
    308c:	0e 94 90 18 	call	0x3120	; 0x3120 <__umulhisi3>
    3090:	a5 9f       	mul	r26, r21
    3092:	90 0d       	add	r25, r0
    3094:	b4 9f       	mul	r27, r20
    3096:	90 0d       	add	r25, r0
    3098:	a4 9f       	mul	r26, r20
    309a:	80 0d       	add	r24, r0
    309c:	91 1d       	adc	r25, r1
    309e:	11 24       	eor	r1, r1
    30a0:	08 95       	ret

000030a2 <__mulshisi3>:
    30a2:	b7 ff       	sbrs	r27, 7
    30a4:	0c 94 46 18 	jmp	0x308c	; 0x308c <__muluhisi3>

000030a8 <__mulohisi3>:
    30a8:	0e 94 46 18 	call	0x308c	; 0x308c <__muluhisi3>
    30ac:	82 1b       	sub	r24, r18
    30ae:	93 0b       	sbc	r25, r19
    30b0:	08 95       	ret

000030b2 <__prologue_saves__>:
    30b2:	2f 92       	push	r2
    30b4:	3f 92       	push	r3
    30b6:	4f 92       	push	r4
    30b8:	5f 92       	push	r5
    30ba:	6f 92       	push	r6
    30bc:	7f 92       	push	r7
    30be:	8f 92       	push	r8
    30c0:	9f 92       	push	r9
    30c2:	af 92       	push	r10
    30c4:	bf 92       	push	r11
    30c6:	cf 92       	push	r12
    30c8:	df 92       	push	r13
    30ca:	ef 92       	push	r14
    30cc:	ff 92       	push	r15
    30ce:	0f 93       	push	r16
    30d0:	1f 93       	push	r17
    30d2:	cf 93       	push	r28
    30d4:	df 93       	push	r29
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    30da:	ca 1b       	sub	r28, r26
    30dc:	db 0b       	sbc	r29, r27
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	09 94       	ijmp

000030ea <__epilogue_restores__>:
    30ea:	2a 88       	ldd	r2, Y+18	; 0x12
    30ec:	39 88       	ldd	r3, Y+17	; 0x11
    30ee:	48 88       	ldd	r4, Y+16	; 0x10
    30f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    30fc:	b9 84       	ldd	r11, Y+9	; 0x09
    30fe:	c8 84       	ldd	r12, Y+8	; 0x08
    3100:	df 80       	ldd	r13, Y+7	; 0x07
    3102:	ee 80       	ldd	r14, Y+6	; 0x06
    3104:	fd 80       	ldd	r15, Y+5	; 0x05
    3106:	0c 81       	ldd	r16, Y+4	; 0x04
    3108:	1b 81       	ldd	r17, Y+3	; 0x03
    310a:	aa 81       	ldd	r26, Y+2	; 0x02
    310c:	b9 81       	ldd	r27, Y+1	; 0x01
    310e:	ce 0f       	add	r28, r30
    3110:	d1 1d       	adc	r29, r1
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	ed 01       	movw	r28, r26
    311e:	08 95       	ret

00003120 <__umulhisi3>:
    3120:	a2 9f       	mul	r26, r18
    3122:	b0 01       	movw	r22, r0
    3124:	b3 9f       	mul	r27, r19
    3126:	c0 01       	movw	r24, r0
    3128:	a3 9f       	mul	r26, r19
    312a:	70 0d       	add	r23, r0
    312c:	81 1d       	adc	r24, r1
    312e:	11 24       	eor	r1, r1
    3130:	91 1d       	adc	r25, r1
    3132:	b2 9f       	mul	r27, r18
    3134:	70 0d       	add	r23, r0
    3136:	81 1d       	adc	r24, r1
    3138:	11 24       	eor	r1, r1
    313a:	91 1d       	adc	r25, r1
    313c:	08 95       	ret

0000313e <_exit>:
    313e:	f8 94       	cli

00003140 <__stop_program>:
    3140:	ff cf       	rjmp	.-2      	; 0x3140 <__stop_program>
